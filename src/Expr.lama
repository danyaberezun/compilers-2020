-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;
import Collection;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefs (state, defs) {
  fun addDef (state, d) {
    case d of
      Local(args) -> addNames(state, args)
		| Fun(name, args, body) -> addFunction(state, name, args, body)
    esac
  }
  foldl (addDef, state, defs)
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w@[inp, outp]], expr) {
  case expr of
    Assn (z0, v) ->
		  case eval(c, z0) of [nc, Ref (z)] ->
			  case eval(nc, v) of [[ns, nw], val] ->
				  [[ns <- [z, val], nw], val]
				esac
			esac
	| Scope (defs, expr) ->
      case addDefs(enterScope(s), defs) of newS ->
        case eval([newS, w], expr) of [[newS, newW], val] ->
          [[leaveScope(newS), newW], val]
        esac
      esac
	| Call(fname, args) -> {
	  case lookup(s, fname) of f@Fun(fArgs, body) ->
			case evalList(c, args) of [[s, w], evArgs] ->
				local funState = foldl(
				  fun (res, [k, v]) { addName(res, k, v) },
					enterFunction(s),
					reverse(zip(fArgs, evArgs))
				);
				case eval([funState, w], body) of [[ns, nw], val] ->
				  [[leaveFunction(s, getGlobal(ns)), nw], val]
				esac
			esac
		esac
	}
  | Seq (head, tail) ->
    case eval(c, head) of [nc, val] ->
      case eval(nc, tail) of [nnc, val2] -> [nnc, val2] esac
    esac
  | Skip -> [c, Void]
  | Read (x) -> case readWorld(w) of [a, nw] -> [[s <- [x,a], nw], Void] esac
  | Write (x) ->
	  case eval(c, x) of [[ns, nw], val] ->
		  [[ns, writeWorld(val, nw)], Void]
		esac
  | If (cond, ifb, elseb) ->
    case eval(c, cond) of [nc, isCond] ->
      eval(nc, if isCond then ifb else elseb fi)
    esac
  | w@While (cond, body) ->
    case eval(c, cond) of [nc, isCond] ->
      case isCond of
        true -> eval(eval(nc, body)[0], w)
      | false -> [nc, Void]
      esac
    esac
  | r@Repeat (body, cond) ->
	  case eval(c, body) of [nc, _] ->
      case eval(nc, cond) of [nnc, isCond] ->
				case isCond of
          true -> [nnc, Void]
        | false -> eval(nnc, r)
        esac
			esac
    esac
  | Var (x) -> [c, lookup(s, x)]
  | Ref (z) -> [c, Ref (z)]
  | Const (const) -> [c, const]
  | Binop (op, a, b) ->
    case eval(c, a) of [nc, aa] ->
      case eval(nc, b) of [nnc, bb] -> [nnc, evalOp(op, aa, bb)] esac
    esac
  | Ignore (expr) -> case eval(c, expr) of [nc, val] -> [nc, Void] esac
  | wat -> failure("Can't parse command: %s\n", wat.string)
  esac    
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}


public fun calculate(op, x, y) {
  case op of
    "*"  -> x * y
  | "+"  -> x + y
  | "-"  -> x - y
  | "/"  -> x / y
  | "%"  -> x % y
  | "<"  -> x < y
  | "<=" -> x <= y
  | "==" -> x == y
  | "!=" -> x != y
  | ">"  -> x > y
  | ">=" -> x >= y
  | "!!" -> x !! y
  | "&&" -> x && y
  esac
}
