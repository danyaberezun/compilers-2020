-- Expression evaluator

import List;
import State;

public fun eval_Binop (op, l, r) {
case op of
	  "+"  -> l + r
	| "-"  -> l - r
	| "==" -> l == r
	| "!=" -> l != r
	| ">"  -> l > r
	| "<"  -> l < r
	| ">=" -> l >= r
	| "<=" -> l <= r
	| "*"  -> l * r
	| "/"  -> l / r
	| "%"  -> l % r
	| "&&" -> l && r
	| "!!" -> l !! r
esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {

  case expr of
	  Var(x)                  -> st (x)
	| Const(x)                -> x
	| Binop(op, expr1, expr2) -> eval_Binop (op,evalExpr (st, expr1), evalExpr (st, expr2))
esac	 
 
}
