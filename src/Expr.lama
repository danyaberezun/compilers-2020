-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--

-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun getBinop (op, lefVal, rigVal) {
	case op of
		"+"  -> lefVal + rigVal
		| "-"  -> lefVal - rigVal
		| "*"  -> lefVal * rigVal
		| "/"  -> lefVal / rigVal
		| "%"  -> lefVal % rigVal
		| "==" -> lefVal == rigVal
		| "!=" -> lefVal != rigVal
		| "<"  -> lefVal < rigVal
		| "<=" -> lefVal <= rigVal
		| ">"  -> lefVal > rigVal
		| ">=" -> lefVal >= rigVal
		| "&&" -> lefVal && rigVal
		| "!!" -> lefVal !! rigVal
	esac
}

public fun evalExpr (st, expr) {
  -- failure ("evalExpr not implemented\n")
  case expr of
  		Var (varVal) -> return st(varVal)
  		| Const (constVal) -> return constVal
        | Binop (strVal, leftExpr, rightExpr) -> return getBinop(strVal, evalExpr(st, leftExpr), evalExpr(st, rightExpr))
  esac
}