-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun dvar(v) {
  case v of 
      Var(x) -> x
      | _ -> failure("not a var")
  esac
}

fun eval (c@[state, world], expr) {
    case expr of 
      Read(x) -> state.checkVar(x); case readWorld(world) of [val, nworld] ->
          [[
            state<-[x, Var(val)],
            nworld
          ],
          Void
          ]
          esac
      | Write(expr) ->
          case eval(c, expr) of [[state, world], res] ->
          [[
            state, 
            writeWorld(res, world)
          ],
          Void]
          esac
      | Assn(x, expr) -> case evalList(c, {x, expr}) of [[state, world], var:res:_] ->
        [
        [
          state<-[var, Var(res)],
          world
        ],
        res
        ]
        esac
      | Seq(stmt1, stmt2) -> 
        eval(
          eval(c, stmt1).fst,
          stmt2
        )
      | If(cond, stmt, estmt) -> case eval(c, cond) of 
          [newConf, 0] -> case estmt of None -> [newConf, Void] | _ -> eval(newConf, estmt) esac |
          [newConf, _] -> eval(newConf, stmt)
        esac
      | While(cond, stmt) -> case eval(c, cond) of 
          [newConf, 0] -> [newConf, Void] |
          [newConf, _] -> eval(eval(newConf, stmt).fst, While(cond, stmt))
        esac
      | Rep(stmt, cond) -> 
          case eval(c, stmt).fst of newConf ->
              case eval(newConf, cond) of 
                  [newConf1, 0] -> eval(newConf1, Rep(stmt, cond)) |
                  [newConf1, _] -> [newConf1, Void]
              esac
          esac
      | Skip -> [c, Void]
      | Const(n) -> [c, n]
      | Var(x) -> [c, state.lookup(x).dvar]
      | Binop(op, lefto, righto) -> case evalList(c, {lefto, righto}) of [c, a:b:_] ->
                                    [c, evalOp(op, a, b)]
                                    esac
      | Ref(x) -> [c, x]
      | Ignore(expr) -> [eval(c, expr).fst, Void]
      | Scope(defs, expr) -> case evalList([state.enterScope, world], defs) of [c, _] -> 
            case eval(c, expr) of [[s, w], res] -> [[s.leaveScope, w], res] esac
        esac
      | Local(vars) -> [[state.addNames(vars), world], Void]
      | Fun(name, args, body) -> [[state.addFunction(name, args, body), world], Void]
      | Call(f, argExps) -> state.checkFun(f); case c.evalList(argExps) of [[s, w], argVals] -> case state.lookup(f) of Fun(args, body) ->
            local news = foldl(
                        fun (olds, [arg, val]) {olds.addName(arg, Var(val))}, 
                        s.enterFunction, 
                        zip(args, argVals)
                      );
            case eval([news, w],
                       body
                     ) of [[sres, w], res] ->
                [[s.leaveFunction(sres.getGlobal), w], res]
            esac
        esac esac

    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
