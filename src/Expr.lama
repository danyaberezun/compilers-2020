-- Expression evaluator

import List;
import State;


public fun binopOp(op, l, r){
   case op of
        "+" -> l + r
        |"*" -> l * r
        |"-" -> l - r
        |"/" -> l / r
        |"%" -> l % r
        |"==" -> l == r
        |"!=" -> l != r
        |"<" -> l < r
        |"<=" -> l <= r
        |">" -> l > r
        |">=" -> l >= r
        |"&&" -> l && r
        |"!!" -> l !! r
   esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  --failure ("evalExpr not implemented\n")
  case expr of
     Var(x) -> st(x)
    |Const(n) -> n
    |Binop(op, l, r) -> binopOp (op, evalExpr (st,l), evalExpr (st, r))
  esac 
}
