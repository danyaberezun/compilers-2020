-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[state, world], expr) {
--printf("Evaluating %s\n", expr.string);
case expr of
	Const (n) -> [c, n]
	| Var (x) -> [c, lookup (state, x)]
        | Binop (op, l, r) -> case evalList (c, {l, r}) of
				[new_c, {value1, value2}] -> [new_c, evalOp (op, value1, value2)] 
			      esac
	| Assn (to, from) -> case evalList (c, {to, from}) of
				[new_c@[new_state, new_world], {Ref (place), value}] -> [[new_state <- [place, value], new_world], value]
			     esac
	| Seq (expr1, expr2) -> case eval (c, expr1) of
					[new_c, value] -> eval (new_c, expr2)
				esac
	| Skip -> [c, None]
	| Read (to) -> case readWorld (world) of
				[value, new_world] -> [[state <- [to, value], new_world], Void]
		       esac
	| Write (expression) -> case eval (c, expression) of
					[new_c@[new_state, new_world], value] -> [[new_state, writeWorld (value, new_world)], Void]
				esac
	| If (condition, expr1, expr2) -> case eval (c, condition) of
						[new_c, 0] -> eval (new_c, expr2)
						| [new_c, _ ] -> eval (new_c, expr1)
					  esac
	| While (condition, expression) -> case eval (c, condition) of
						[new_c, 0] -> [new_c, None]
						| [new_c, _ ] -> case eval (new_c, expression)  of
									[latest_c, value] -> eval (latest_c, expr)
								 esac
					   esac
	| Repeat (expression, condition) -> eval (c, Seq (expression, While (Binop ("==", condition, Const (0)), expression)))
	| Ref (x) -> [c, Ref (x)]
	| Ignore (expression) -> case eval (c, expression) of
					[new_c, value] -> [new_c, None]
				 esac
	| Scope (definitions, expression) -> case evalList ([enterScope (state), world], definitions) of
						[new_c, value] -> case eval (new_c, expression) of
									[last_c@[last_state, last_world], new_value] -> [[leaveScope (last_state), last_world], new_value]
								  esac
					     esac
	| Call (name, real_args) -> case lookup (state, name) of
				Fun (args, body) -> (*printf ("%s\n", args.string);*)case evalList (c, real_args) of
							[new_c@[new_state, new_world], values] -> (*printf("%s%s\n", new_state.string, values.string);*)case eval( [foldl (fun (enter_state, [arg, val]) {addName (enter_state, arg, val)}, enterFunction(new_state), zip(args, values)), world], body) of
										[[last_state, last_world], result] -> [[leaveFunction(new_state, getGlobal (last_state)), last_world], result]
												  esac
						    esac
			       esac
	| Local (definition) -> [[addNames (state, definition), world], Void]
	| Fun (name, args, body) -> (*printf("%s %s %s\n", name.string, args.string, body.string);*)[[addFunction (state, name, args, body), world], Void]
esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
