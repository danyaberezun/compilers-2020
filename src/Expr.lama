-- Expression evaluator

import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value

public fun apply(op, x, y) {
    case op of
    "+" -> x + y |
    "-" -> x - y |
    "*" -> x * y |
    "/" -> x / y |
    "%" -> x % y |
    "==" -> x == y |
    "!=" -> x != y |
    "<" -> x < y |
    ">" -> x > y |
    "<=" -> x <= y |
    ">=" -> x >= y |
    "&&" -> x && y |
    "!!" -> x !! y
    esac
}


public fun evalExpr (st, expr) {
    -- printf("Expr: %s : %s\n", expr.string, st.string);
    case expr of
    Binop(op, e1, e2) -> apply(op, evalExpr(st, e1), evalExpr(st, e2)) |
    Var(x) -> st(x) |
    Const(x) -> x
    esac
}
