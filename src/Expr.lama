-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state

fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (dest, exp) -> case evalList(c, {exp, dest}) of
      [[s, w], val:ref:_] -> case ref of
        ElemRef(a, i) -> a[i] := val; [c, val] |
        _ -> [[s <- [ref, val], w], val]
      esac
    esac |
    Seq (exp1, exp2) -> case evalList(c, {exp1, exp2}) of
      [c, _:res:_] -> [c, res]
    esac |
    Skip -> [c, Void] |
    If (cond, exp1, exp2) -> case eval(c, cond) of
      [c, val] -> case if val then eval(c, exp1) else eval(c, exp2) fi of
        [_, ElemRef(_, _)] -> failure("reference to arrays element in wrong context") |
        res -> res
      esac
    esac |
    While (cond, body) -> case eval(c, cond) of
      [c, val] -> if val then eval(eval(c, body)[0], expr) else [c, Void] fi
    esac |
    Repeat (body, cond) -> case evalList(c, {body, cond}) of
      [c, _:val:_] -> if val then [c, Void] else eval(c, expr) fi
    esac |
    Var (name) -> [c, lookup(s, name)] |
    Ref (name) -> [c, name] |
    Const (val) -> [c, val] |
    Binop (op, exp1, exp2) -> case evalList(c, {exp1, exp2}) of
      [c, val1:val2:_] -> [c, evalOp(op, val1, val2)]
    esac |
    Scope (defs, expr) -> case
      foldl(fun (s, def) {
        case def of
          Local (names) -> addNames(s, names) |
          Fun (names, args, body) -> addFunction(s, names, args, body)
        esac
      }, enterScope(s), defs)
    of
      s -> case eval([s, w], expr) of
        [[s, w], val] -> [[leaveScope(s), w], val]
      esac
    esac |
    Call (name, args) -> case evalList(c, args) of
      [[s, w], vals] -> case lookup(s, name) of
        Fun (args, body) -> case body of
          External -> case evalBuiltin(name, vals, w) of
            [v, w] -> [[s, w], v]
          esac |
          _ -> case 
            foldl(fun (s, [name, value]) {
                addName(s, name, value)
              }, enterFunction(s), zip(args, vals))
          of
            fs -> case eval([fs, w], body) of
              [[fs, w], res] -> [[leaveFunction(s, getGlobal(fs)), w], res]
            esac
          esac
        esac
      esac
    esac |
    Ignore (exp) -> [eval(c, exp)[0], Void] |
    String (str) -> [c, str] |
    Array (exprs) -> case evalList(c, exprs) of
      [c, vals] -> [c, listArray(vals)]
    esac |
    Elem (a, i) -> case evalList(c, {a, i}) of
      [c, {a, i}] -> [c, a[i]]
    esac |
    ElemRef (a, i) -> case evalList(c, {a, i}) of
      [c, {a, i}] -> [c, ElemRef(a, i)]
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  -- printf("%s\n", expr.string);
  case eval ([
    emptyState().enterScope.addName("read", Fun ({}, External))
      .addName("write", Fun (singleton("a"), External))
      .addName("length", Fun (singleton("a"), External)) , createWorld (input)
    ], expr)
  of
    [c, _] -> c.snd.getOutput
  esac
}