-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
    case expr of 
      Read(x) -> case readWorld(world) of [val, nworld] ->
          [[
            state<-[x, val],
            nworld
          ],
          Void
          ]
          esac
      | Write(expr) ->
          case evalExpr(c, expr) of [newConf, res] ->
          [[
            state, 
            writeWorld(res, world)
          ],
          Void]
          esac
      | Assn(x, expr) -> case evalList(c, {x, expr}) of [newConf, var:res:_] ->
        [
        [
          state<-[var, res],
          world
        ],
        res
        ]
        esac
      | Seq(stmt1, stmt2) -> 
        eval(
          eval(c, stmt1).fst,
          stmt2
        )
      | If(cond, stmt, estmt) -> case eval(c, cond) of 
          [newConf, 0] -> case estmt of None -> [newConf, Void] | _ -> eval(newConf, estmt) esac |
          [newConf, _] -> eval(newConf, stmt)
        esac
      | While(cond, stmt) -> case eval(c, cond) of 
          [newConf, 0] -> [newConf, Void] |
          [newConf, _] -> eval(eval(newConf, stmt).fst, While(cond, stmt))
        esac
      | Rep(stmt, cond) -> 
          case eval(c, stmt).fst of newConf ->
              case eval(newConf, cond) of 
                  [newConf1, 0] -> eval(newConf1, Rep(stmt, cond)) |
                  [newConf1, _] -> [newConf1, Void]
              esac
          esac
      | Skip -> [c, Void]
      | Const(n) -> [c, n]
      | Var(x) -> [c, state(x)]
      | Binop(op, lefto, righto) -> case evalList(c, {lefto, righto}) of [c, a:b:_] ->
                                    [c, evalOp(op, a, b)]
                                    esac
      | Ref(x) -> [c, x]
      | Ignore(expr) -> [eval(c, expr).fst, Void]
                                    
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
