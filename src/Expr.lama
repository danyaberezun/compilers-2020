-- Expression evaluator

import List;
import State;

public fun evalOp (op, lhs, rhs) {
  case op of
    "+" -> lhs + rhs
  | "-" -> lhs - rhs
  | "*" -> lhs * rhs
  | "/" -> lhs / rhs
  | "%" -> lhs % rhs
  | "==" -> lhs == rhs
  | ">=" -> lhs >= rhs
  | "<=" -> lhs <= rhs
  | ">" -> lhs > rhs
  | "<" -> lhs < rhs
  | "!=" -> lhs != rhs
  | "&&" -> lhs && rhs
  | "!!" -> lhs !! rhs
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
  case expr of
    Var (x) -> st (x)
  | Const (n) -> n
  | Binop (op, lhs, rhs) -> evalOp(op, evalExpr(st, lhs), evalExpr(st, rhs))
  esac
}
