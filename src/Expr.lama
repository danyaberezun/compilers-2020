-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
	--failure (">>> %s\n", expr.string);
	case expr of
		  Assn   (var, e)       -> case evalList (c, {var, e}) of [[s_n, w_n], {Ref(x), val}] -> [[s_n <- [x, val], w_n], val] esac
		| Seq    (e1, e2)       -> case eval (c, e1) of [c_n, n] -> eval (c_n, e2) esac
		| Skip                  -> [c, None]
		| Read   (var)          -> case readWorld (w) of [val, w_n] -> [[s <- [var, val], w_n], None] esac
		| Write  (e)            -> case eval (c, e) of [[s_n, w_n], val] -> [[s_n, writeWorld(val, w_n)], None] esac
		| If     (cond, e1, e2) -> case eval (c, cond) of [c_n, res] -> if (res) then eval (c_n, e1) else eval (c_n, e2) fi esac
		| While  (cond, e)      -> case eval (c, cond) of [c_n, res] -> if (res) then 
																			case eval (c_n, e) of [c_nn, n] -> eval (c_nn, While(cond, e)) esac 
																			else [c_n, None]
																		fi esac
		| Repeat (e, cond)      -> case eval (c, e) of [c_n, n] -> case eval (c_n, cond) of [c_nn, res] -> if (res) then
																												[c_nn, None]
																												else eval (c_nn, Repeat(e, cond))
																										   fi esac esac
		| Var    (var)          -> [c, lookup(s, var)]
		| Ref    (var)          -> [c, Ref(var)]
		| Const  (n)            -> [c, n]
		| Binop  (op, e1, e2)   -> case evalList (c, {e1, e2}) of [c_n, {v1, v2}] -> [c_n, evalOp(op, v1, v2)] esac
		| Ignore (e)            -> case eval (c, e) of [c_n, n] -> [c_n, None] esac
		| Scope  (d, e)         -> case evalList ([s.enterScope, w], d) of [c_n, n] ->
										case eval (c_n, e) of [[s_n, w_n], n] -> [[leaveScope(s_n), w_n], n]
								   esac esac
		| Call   (st, ex)       -> case lookup (s, st) of Fun(l, e) ->
										case evalList (c, ex) of [[s_0, w_n], n] ->
											local s_n = enterFunction(s_0);
											while size(l) do
												s_n := addName(s_n, l[0], n[0]);
												l   := l[1];
												n   := n[1]
											od;
											case eval([s_n, w_n], e) of [[s_n, w_n], res] -> [[leaveFunction(s_0, getGlobal(s_n)), w_n], res]
											esac esac esac
		| Local  (l)            -> [[addNames(s, l), w], None]
		| Fun    (st, l, e)     -> [[addFunction(s, st, l, e), w], None]
		| 0                     -> [c, {}]
		| _                     -> failure ("No such expression as %s.\n", expr.string)
	esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
