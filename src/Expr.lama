-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  fun addDefs(s, defs) {
    fun lambda(s, def) {
      case def of
        Local (xs) -> addNames(s, xs)|
        Fun (name, args, body) -> addFunction(s, name, args, body)
      esac
    }
    foldl(lambda, enterScope(s), defs)
  }
  fun addArgsToState(s, argNames, args) {
    fun lambda(s, [name, val]) {
      addName(s, name, val)
    }
    foldl(lambda, enterFunction(s), zip(argNames, args))
  }

  fun processPattern(c@[s, w], branches, val) {
    fun matchPattern(c@[s, w], [pattern, val]) {
      case pattern of 
        Sexp ("_", {}) -> c |
        Var (name) -> [addName (s, name) <- [name, val], w] |
        Sexp (name, lst) -> case val of
          Sexp (vTag, vArgs) ->
            if compare(name, vTag) == 0 && size(lst) == size(vArgs) then
              foldl (fun (c, [p, v]) {
                case c of 
                  None -> None | 
                  _ -> matchPattern (c, [p, v])
                esac
              }, c, zip(lst, vArgs))
            else None fi
        esac
      esac
    }
    local nC = None, body = None;
		while (size(branches) > 0 && compare(nC, None) == 0) do
			nC := matchPattern([enterScope(s), w], [branches[0][0], val]);
			body := branches[0][1];
			branches := branches[1]
	  od;
    case nC of
      None -> failure ("Match failure on %s\n", val.string) |
      _ -> case eval(nC, body) of [[s, w], v] -> 
				[[leaveScope(s), w], v]
			esac
    esac
  }

  case expr of
    Binop(op, l, r) -> case evalList(c, {l, r}) of 
      [c1, {lv, rv}] -> [c1, evalOp(op, lv, rv)] 
    esac |
    Var(x) -> [c, lookup(st, x)] |
    Ref (x) -> [c, Ref (x)] |
    Ignore (x) -> case eval (c, x) of 
      [c, _] -> [c, Bot] 
    esac |
    Const(n) -> [c, n] |
    Skip -> [c, Bot] |
    Assn (x, val) -> case evalList(c, {x, val}) of 
      [[st1, w1], {Ref (xx), vval}] -> [[st1 <- [xx, vval], w1], vval] |
      [c, {ElemRef (w, i), v}] -> 
        w[i] := v; 
        [c, v]
    esac |
    Seq (s, t) -> eval(eval(c, s)[0], t) |
    If (expr, trst, flst) ->
      case eval(c, expr) of
        [c, true] -> eval(c, trst) |
        [c, false] -> eval(c, flst)
      esac |
    wh@While(cond, body) -> case eval(c, cond) of
      [c, true] -> case eval(c, body) of [c, _] -> eval(c, wh) esac |
      [c, false] -> [c, Bot]
    esac |
    r@Repeat(body, cond) ->  case evalList(c, {body, cond}) of
      [c, _:true:_] -> [c, Bot] |
      [c, _:false:_] -> eval(c, r)
    esac |
    Scope (defs, expr) -> case addDefs(st, defs) of
      st -> case eval([st, w], expr) of
        [[st, w], val] -> [[leaveScope(st), w], val]
      esac
    esac |
    Call (name, args) -> case lookup(st, name) of
      Fun (argNames, body) -> case evalList(c, args) of 
        [[st1, w1], args] -> case body of
            External -> case evalBuiltin (name, args, w1) of [a, w1] -> [[st1, w1], a] esac |
            _ -> case addArgsToState(st1, argNames, args) of 
                st2 -> case eval([st2, w1], body) of 
                  [[st3, w1], val] -> [[leaveFunction(st1, getGlobal(st3)), w1], val]
                esac
          esac
        esac
      esac
    esac |
    String (str) -> [c, str] |
    Array (lst) -> case evalList(c, lst) of
      [c, eLst] -> [c, listArray(eLst)]
    esac |
    Elem  (l, i) -> case evalList(c, {l, i}) of
      [c, {lst, idx}] -> [c, lst[idx]]
    esac |
    ElemRef (l, i) -> case evalList(c, {l, i}) of
      [c, {lst, idx}] -> [c, ElemRef (lst, idx)]
    esac |
    Builtin (name, args) -> case evalList(c, args) of
      [[s, w], eArgs] -> case evalBuiltin(name, eArgs, w) of 
        [v, w] -> [[s, w], v]
      esac
    esac |
    Sexp (tag, lst) -> case evalList(c, lst) of
      [c, eLst] -> [c, Sexp (tag, eLst)]
    esac|
    Case (val, branches) -> case eval(c, val) of 
      [c, eVal] -> processPattern(c, branches, eVal)
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}