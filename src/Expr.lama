-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun addDefs (state, defs) {
  fun addDef (state, d) {
    case d of
      Local(args) -> addNames(state, args)
		| Fun(name, args, body) -> addFunction(state, name, args, body)
    esac
  }
  foldl (addDef, state, defs)
}

public fun isBuiltin(fname) {
  case fname of
    "stringval" -> true
  | "length" -> true
  | "read" -> true
  | "write" -> true
  | _ -> false
	esac
}

fun eval (c@[s, w@[inp, outp]], expr) {
  case expr of
    Assn (z0, v) ->
		  case eval(c, v) of [c, val] ->
			  case eval(c, z0) of
				  [[s, w], Ref (z)]     -> [[s <- [z, val], w], val]
				| [c, ElemRef (arr, i)] -> arr[i] := val; [c, val]
				esac
			esac
	| Scope (defs, expr) ->
      case addDefs(enterScope(s), defs) of s ->
        case eval([s, w], expr) of [[s, w], val] ->
          [[leaveScope(s), w], val]
        esac
      esac
	| Call(fname, args) ->
			case evalList(c, args) of [[s, w], evArgs] ->
				if isBuiltin(fname) then
   			  case evalBuiltin(fname, evArgs, w) of [val, w] ->
   				  [[s, w], val]
   				esac
			  else
				  case lookupFun(s, fname) of f@Fun(fArgs, body) ->
		    	  local funState = foldl(
		    		  fun (res, [k, v]) { addName(res, k, v) },
		    		  enterFunction(s),
		    		  reverse(zip(fArgs, evArgs))
		    	  );
		    	  case eval([funState, w], body) of [[ns, nw], val] ->
		    		  [[leaveFunction(s, getGlobal(ns)), nw], val]
		    	  esac
				  esac
				fi
			esac
  | Seq (head, tail) ->
    case evalList(c, {head, tail}) of [c, {val, val2}] ->
      [c, val2]
    esac
  | Skip -> [c, Void]
  | Read (x) -> case readWorld(w) of [a, nw] -> [[s <- [x,a], nw], Void] esac
  | If (cond, ifb, elseb) ->
    case eval(c, cond) of [nc, isCond] ->
      eval(nc, if isCond then ifb else elseb fi)
    esac
  | w@While (cond, body) ->
    case eval(c, cond) of [c, isCond] ->
      case isCond of
        true -> eval(eval(c, body)[0], w)
      | false -> [c, Void]
      esac
    esac
  | r@Repeat (body, cond) ->
	  case eval(c, body) of [c, _] ->
      case eval(c, cond) of [c, isCond] ->
				case isCond of
          true -> [c, Void]
        | false -> eval(c, r)
        esac
			esac
    esac
  | Var (x) -> [c, lookup(s, x)]
  | Ref (z) -> [c, Ref (z)]
  | Const (const) -> [c, const]
  | Binop (op, a, b) ->
    case evalList(c, {a, b}) of [c, {aa, bb}] ->
      [c, evalOp(op, aa, bb)]
    esac
  | Ignore (expr) -> case eval(c, expr) of [c, val] -> [c, Void] esac
	| String (str) -> [c, str]
	| Builtin (fname, args) ->
	    case evalList(c, args) of [[s, w], evArgs] ->
   			case evalBuiltin(fname, evArgs, w) of [val, nw] ->
   				[[s, nw], val]
   			esac
			esac
	| Elem (x, i) ->
	  case evalList(c, {x, i}) of [c, {xx, ii}] ->
		  [c, xx[ii]]
		esac
	| ElemRef (x, i) ->
	  case evalList(c, {x, i}) of [c, {xx, ii}] ->
		  [c, ElemRef(xx, ii)]
		esac
	| Array (exprs) ->
	  case evalList(c, exprs) of [c, evaluated] ->
		  [c, listArray(evaluated)]
		esac
  | wat -> failure("Can't parse command: %s\n", wat.string)
  esac    
}
public fun calculate(op, x, y) {
  case op of
    "*"  -> x * y
  | "+"  -> x + y
  | "-"  -> x - y
  | "/"  -> x / y
  | "%"  -> x % y
  | "<"  -> x < y
  | "<=" -> x <= y
  | "==" -> x == y
  | "!=" -> x != y
  | ">"  -> x > y
  | ">=" -> x >= y
  | "!!" -> x !! y
  | "&&" -> x && y
  esac
}

(* End *)


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([enterScope(emptyState ()), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}


