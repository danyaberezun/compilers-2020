-- Expression evaluator

import List;
import State;

public fun getOperationFromStr(str) {
	case str of "+" -> infix +
			| "-" -> infix -
			| "*" -> infix *
			| "/" -> infix /
			| "%" -> infix %
			| "==" -> infix ==
			| "<=" -> infix <=
			| ">=" -> infix >=
			| "!=" -> infix !=
			| ">" -> infix >
			| "<" -> infix <
			| "&&" -> infix &&
			| "!!" -> infix !!
	esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  --failure ("evalExpr not implemented\n")
  case expr of Var (x) -> st(x)
  			| Const(n) -> n
  			| Binop(op, left, right) -> getOperationFromStr(op) (evalExpr (st, left), evalExpr (st, right))
  	esac
}
