-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalSeq(c, exprs) {
  foldl (fun ([c, _], e) { eval (c, e) }, [c, Error], exprs)
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (tgt, val) -> 
      case evalList(c, {tgt, val}) of [[s, w], {tgt, val}] -> 
        case tgt of 
          Ref (tgt) -> [[s <- [tgt, val], w], val]
        | ElemRef (arr, idx) -> arr[idx] := val; [[s, w], val]
        esac
      esac
  | Seq (e1, e2) -> evalSeq (c, {e1, e2})
  | Skip -> [c, Unit]
  | If (cond, thn, els) ->
      case eval (c, cond) of
        [c, 0] -> eval (c, els)
      | [c, _] -> eval (c, thn)
      esac
  | whl@While (cond, body) ->
      case eval (c, cond) of
        [c, 0] -> [c, Unit]
      | [c, _] ->
        case evalList (c, {body, whl}) of
          [c, _] -> [c, Unit]
        esac
      esac
  | rpt@Repeat (body, cond) ->
      case evalSeq (c, {body, cond}) of
        [c, 0] -> eval (c, rpt)
      | [c, _] -> [c, Unit]
      esac
  | Var (id) -> [c, lookup (s, id)]
  | Ref (id) -> [c, Ref (id)]
  | Const (val) -> [c, val]
  | String (str) -> [c, str]
  | Array (xs) -> 
    case evalList (c, xs) of [c, xs] ->
      [c, listArray(xs)]
    esac
  | Elem (arr, idx) ->
    case evalList (c, {arr, idx}) of [c, {arr, idx}] ->
      [c, arr[idx]]
    esac
  | ElemRef (arr, idx) ->
    case evalList (c, {arr, idx}) of [c, {arr, idx}] ->
      [c, ElemRef (arr, idx)]
    esac
  | Binop (op, lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] -> [c, evalOp (op, lhs, rhs)]
      esac
  | Scope (defs, e) -> 
      case defs of
        {}   -> eval (c, e) -- LocalScope
      | defs -> {
          local ls = foldl(
            fun (s, def) {
              case def of
                Fun (name, params, body) -> addFunction (s, name, params, body)
              | Local (names) -> addNames (s, names)
              esac
            },
            enterScope (s),
            defs
          );
          case eval ([ls, w], e) of [[s, w], val] -> [[leaveScope (s), w], val] esac
        }
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, _] -> [c, Unit]
      esac
  | Call (name, args) -> 
      case lookupFun (s, name) of Fun (params, body) -> 
        case evalList (c, args) of [[s, w], args] ->
          case body of
            External -> case evalBuiltin(name, args, w) of [retval, w] ->
                [[s, w], retval]
              esac
          |  _ -> case eval ([foldl (fun (s, [name, value]) {
              addName(s, name, value)
            }, enterFunction(s), zip(params, args)), w], body) of [[s_, w], retval] ->
              [[leaveFunction(s, getGlobal(s_)), w], retval]
            esac
          esac
        esac
      esac
  | Builtin (name, args) -> 
    case evalList (c, args) of [[s, w], args] ->
      case evalBuiltin(name, args, w) of [retval, w] ->
        [[s, w], retval]
      esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}