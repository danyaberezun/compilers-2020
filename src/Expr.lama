-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (state, expr) {
  case expr of
    Var (var) -> return state (var)
  | Const (value) -> return value
  | Binop (op, expr1, expr2) ->
      local value1 = evalExpr (state, expr1);
      local value2 = evalExpr (state, expr2);
      case op of
        "*"  -> return value1 *  value2
      | "+"  -> return value1 +  value2
      | "-"  -> return value1 -  value2
      | "/"  -> return value1 /  value2
      | "%"  -> return value1 %  value2
      | "<"  -> return value1 <  value2
      | "<=" -> return value1 <= value2
      | ">"  -> return value1 >  value2
      | ">=" -> return value1 >= value2
      | "==" -> return value1 == value2
      | "!=" -> return value1 != value2
      esac
  esac
}
