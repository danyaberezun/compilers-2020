-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        If     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  -- failure("%s\n", expr.string);
  case expr of
    Assn (dest, exp) -> case evalList(c, {exp, dest}) of
      [[s, w], val:ref:_] -> [[s <- [ref, val], w], val]
    esac |
    Seq (exp1, exp2) -> case evalList(c, {exp1, exp2}) of
      [c, _:res:_] -> [c, res]
    esac |
    Skip -> [c, Void] |
    Read (name) -> case readWorld(w) of
      [val, w] -> [[s <- [name, val], w], Void]
    esac |
    Write (exp) -> case eval(c, exp) of
      [[s, w], val] -> [[s, writeWorld(val, w)], Void]
    esac |
    If (cond, exp1, exp2) -> case eval(c, cond) of
      [c, val] -> if val then eval(c, exp1) else eval(c, exp2) fi
    esac |
    While (cond, body) -> case eval(c, cond) of
      [c, val] -> if val then eval(eval(c, body)[0], expr) else [c, Void] fi
    esac |
    Repeat (body, cond) -> case evalList(c, {body, cond}) of
      [c, _:val:_] -> if val then [c, Void] else eval(c, expr) fi
    esac |
    Var (name) -> [c, s(name)] |
    Ref (name) -> [c, name] |
    Const (val) -> [c, val] |
    Binop (op, exp1, exp2) -> case evalList(c, {exp1, exp2}) of
      [c, val1:val2:_] -> [c, evalOp(op, val1, val2)]
    esac |
    Ignore (exp) -> [eval(c, exp)[0], Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
