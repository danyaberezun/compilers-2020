-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (state, expr) {
  case expr of
    Var (var) -> return state (var)
  | Const (value) -> return value
  | Binop (op, expr1, expr2) ->
      local value1 = evalExpr (state, expr1);
      local value2 = evalExpr (state, expr2);
      return evalBinop (op, value1, value2)
  esac
}

public fun evalBinop (op, value1, value2) {
  case op of
    "*"  -> return value1 *  value2
  | "+"  -> return value1 +  value2
  | "-"  -> return value1 -  value2
  | "/"  -> return value1 /  value2
  | "%"  -> return value1 %  value2
  | "<"  -> return value1 <  value2
  | "<=" -> return value1 <= value2
  | ">"  -> return value1 >  value2
  | ">=" -> return value1 >= value2
  | "==" -> return value1 == value2
  | "!=" -> return value1 != value2
  | "&&" -> return value1 && value2
  | "!!" -> return value1 !! value2
  esac
}
