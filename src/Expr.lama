-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
	case expr of
		Var (s1) -> st(s1)
	  | Const (x) -> x
	  | Binop (c, s1, s2) ->
		case c of
			"+"  -> (evalExpr(st, s1) + evalExpr(st, s2))
		  | "-"  -> (evalExpr(st, s1) - evalExpr(st, s2))
		  | "*"  -> (evalExpr(st, s1) * evalExpr(st, s2))
		  | "/"  -> (evalExpr(st, s1) / evalExpr(st, s2))
		  | "%"  -> (evalExpr(st, s1) % evalExpr(st, s2))
		  | "==" -> (evalExpr(st, s1) == evalExpr(st, s2))
		  | "!=" -> (evalExpr(st, s1) != evalExpr(st, s2))
		  | "<"  -> (evalExpr(st, s1) < evalExpr(st, s2))
		  | "<=" -> (evalExpr(st, s1) <= evalExpr(st, s2))
		  | ">"  -> (evalExpr(st, s1) > evalExpr(st, s2))
		  | ">=" -> (evalExpr(st, s1) >= evalExpr(st, s2))
		  | "&&" -> (evalExpr(st, s1) && evalExpr(st, s2))
		  | "!!" -> (evalExpr(st, s1) !! evalExpr(st, s2))
		esac
	esac
}
