-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
	-- printf("%s\n", expr.string);
	case expr of
		  Var (s1) -> st(s1)
		| Const (s1) -> s1
		| Binop (op, s1, s2) ->
			case op of
				  "*"  -> (evalExpr(st, s1) *  evalExpr(st, s2))
				| "/"  -> (evalExpr(st, s1) /  evalExpr(st, s2))
				| "%"  -> (evalExpr(st, s1) %  evalExpr(st, s2))
				| "+"  -> (evalExpr(st, s1) +  evalExpr(st, s2))
				| "-"  -> (evalExpr(st, s1) -  evalExpr(st, s2))
				| "==" -> (evalExpr(st, s1) == evalExpr(st, s2))
				| "!=" -> (evalExpr(st, s1) != evalExpr(st, s2))
				| "<=" -> (evalExpr(st, s1) <= evalExpr(st, s2))
				| "<"  -> (evalExpr(st, s1) <  evalExpr(st, s2))
				| ">=" -> (evalExpr(st, s1) >= evalExpr(st, s2))
				| ">"  -> (evalExpr(st, s1) >  evalExpr(st, s2))
				| "&&" -> (evalExpr(st, s1) && evalExpr(st, s2))
				| "!!" -> (evalExpr(st, s1) !! evalExpr(st, s2))
				| _    -> failure("Operation %s not found.\n", op)
		| _ -> failure("Expression %s not found.", expr)
		esac
	esac
(*
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  failure ("evalExpr not implemented\n")
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
*)
}
