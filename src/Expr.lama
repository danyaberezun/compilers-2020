-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Binop(op, l, r) -> (
      case op of
        "+"  -> infix + |
        "-"  -> infix - |
        "*"  -> infix * |
        "/"  -> infix / |
        "%"  -> infix % |
        "==" -> infix == |
        "!=" -> infix != |
        "<"  -> infix < |
        "<=" -> infix <= |
        ">"  -> infix > |
        ">=" -> infix >= |
        "&&" -> infix && |
        "!!" -> infix !!
      esac 
    )(evalExpr(st, l), evalExpr(st, r)) |
    Var(x) -> st(x) |
    Const(n) -> n
  esac
}
