-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (configuration@[st, world], expr) {
  case expr of
      Var    (x)               -> [configuration, st(x)]
    | Const  (n)               -> [configuration, n]
    | Ref    (x)               -> [configuration, Ref (x)]
    | Binop  (op, left, right) -> case evalList (configuration, {left, right}) of
                                    [configuration, {v, world}] -> [configuration, evalOp (op, v, world)]
                                  esac
    | Assn   (left, right)     -> case evalList (configuration, {left, right}) of
                                    [configuration@[st, world], {Ref (x), v}] -> [[st <- [x, v], world], v]
                                  esac
    | Seq    (s1, s2) 	       -> eval (eval (configuration, s1)[0], s2)
    | Skip         	           -> [configuration, None]
    | Read   (x)     	         -> case world of 
                                    [z : it, o] -> [[st <- [x, z], [it, o]], None]
                                  esac
    | Write  (expr) 	         -> case eval (configuration, expr) of
                                    [[st, [i, o]], v] -> [[st, [i, v : o]], None]
                                  esac
    | If     (exp, s1, s2)     -> case eval (configuration, exp) of
                                    [configuration, v] -> eval (configuration, if v then s1 else s2 fi)
                                  esac
    | While  (exp, s)          -> case eval (configuration, exp) of
                                    [configuration, v] -> if v then eval (eval (configuration, s)[0], While (exp, s)) else [configuration, None] fi
                                  esac
    | Repeat (s, exp)          -> case eval (eval (configuration, s)[0], exp) of
                                    [configuration, v] -> if v then [configuration, None] else eval (configuration, Repeat (s, exp)) fi
                                  esac
    | Ignore (exp)             -> [eval (configuration, exp)[0], None]
    | _                        -> failure("Statement %s not found. \n", expr)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
