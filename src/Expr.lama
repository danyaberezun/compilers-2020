-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const (c)        -> c
  |   Var (x)        -> st (x)
  | Binop (op, l, r) -> {
      local lv = evalExpr (st, l), rv = evalExpr (st, r); 

      case op of 
        "+"  -> lv + rv   | "-"  -> lv - rv   | "*"  -> lv * rv
      | "/"  -> lv / rv   | "%"  -> lv % rv   | "==" -> lv == rv
      | "!=" -> lv != rv  | "<"  -> lv < rv   | "<=" -> lv <= rv
      | ">"  -> lv > rv   | ">=" -> lv >= rv  | "&&" -> lv && rv
      | "!!" -> lv !! rv
      esac
    }
  esac
}
