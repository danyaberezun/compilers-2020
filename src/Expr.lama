-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Const (z)         -> [c, z]
  | Var   (x)         -> [c, s (x)]
  | Ref   (x)         -> [c, Ref (x)]
  | Binop (op, l, r)  -> 
    case evalList (c, {l, r}) of
      [c, {v, w}] -> [c, evalOp (op, v, w)]
    esac
  | Skip              -> [c, None]
  | Assn  (l, r)      ->
    case evalList (c, {l, r}) of
      [c@[s, w], {Ref (x), v}] -> [[s <- [x, v], w], v]
    esac
  | Read  (x)         -> case w of [z : it, o] -> [[s <- [x, z], [it, o]], None] esac
  | Write (expr)      ->
    case eval (c, expr) of
      [[s, [i, o]], v] -> [[s , [i, v : o]], None]
    esac
  | Seq   (s1, s2)    -> eval (eval (c, s1)[0], s2)
  | If    (e, s1, s2) -> 
    case eval (c, e) of
      [c, v] -> eval (c, if v then s1 else s2 fi)
    esac
  | While (e, st)     -> 
    case eval (c, e) of
      [c, v] -> if v then eval (eval (c, st)[0], While (e, st)) else [c, None] fi
    esac
  | Repeat (st, e)    ->
    case eval (eval (c, st)[0], e) of
      [c, v] -> if v then [c, None] else eval (c, Repeat (st, e)) fi
    esac
  | Ignor (e)       -> [eval (c, e)[0], None]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}