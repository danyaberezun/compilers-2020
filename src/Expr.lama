-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
  	  Const (n) -> [c, n]
  	| Var (x) -> [c, s(x)]
  	| Binop (op, l, r) -> case evalList (c, {l, r}) of
				[new, {v1, v2}] -> [new, evalOp (op, v1, v2)] 
			      esac
	| Assn (to, from) -> case evalList (c, {to, from}) of
				[new@[new_s, new_w], {Ref (place), v}] -> [[new_s <- [place, v], new_w], v]
			     esac
	| Seq (expr1, expr2) -> case eval (c, expr1) of
					[new, v] -> eval (new, expr2)
				esac
	| Skip -> [c, None]
	| Read (to) -> case readWorld (w) of
				[v, new_w] -> [[s <- [to, v], new_w], None]
		       esac
	| Write (e) -> case eval (c, e) of
					[new@[new_s, new_w], v] -> [[new_s, writeWorld (v, new_w)], None]
				esac
	| If (cond, expr1, expr2) -> case eval (c, cond) of
						[new_c, 0] -> eval (new_c, expr2)
						| [new_c, _ ] -> eval (new_c, expr1)
					  esac
	| While (cond, expr_) -> case eval (c, cond) of
						[new, 0] -> [new, None]
						| [new, _ ] -> case eval (new, expr_)  of
									[l, value] -> eval (l, expr)
								 esac
					   esac
	| Repeat (expr_, cond) -> eval (c, Seq (expr_, While (Binop ("==", cond, Const (0)), expr_))) 
	| Ref (x) -> [c, Ref (x)]
	| Ignore (expr_) -> case eval (c, expr_) of
					[new, v] -> [new, None]
				 esac 
esac

}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
