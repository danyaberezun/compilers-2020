-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w@[i, o]], expression) {
  -- printf("expr %s\n", expression.string);
  case expression of
    Assn   (expr1, expr2)         -> case evalList(c, {expr2, expr1}) of [[s, nw], v : ref : _] -> [[s <- [ref, v], nw], v] esac
    | Seq    (expr1, expr2)       -> case evalList(c, {expr1, expr2}) of [c, _ : r : _] -> [c, r] esac
    | Skip                        -> [c, Void]
    | Read   (str)                -> case readWorld(w) of [v, nw] -> [[s <- [str, v], nw], Void] esac
    | Write  (expr)               -> case eval(c, expr) of [[s, nw], v] ->  [[s, writeWorld (v, nw)], Void] esac
    | If     (expr, expr1, expr2) -> case eval(c, expr) of [nc, v] -> if v then eval(nc, expr1) else eval(nc, expr2) fi esac
    | While  (expr, exprb)        -> case eval(c, expr) of [nc, v] -> 
        if v then
          case eval(nc, exprb) of [nc, _] -> eval(nc, expression) esac 
        else 
          [c, Void] 
        fi 
      esac
    | Repeat (exprb, expr)        -> case evalList(c, {exprb, expr}) of [c, _ : v : _] -> if v then [c, Void] else eval(c, expression) fi esac
    | Var    (str)                -> [c, s(str)]
    | Ref    (str)                -> [c, str]
    | Const  (v)                  -> [c, v]
    | Binop  (str, expr1, expr2)  -> case evalList(c, {expr1, expr2}) of [c, lhs : rhs : _] -> [c, evalOp(str, lhs, rhs)] esac
    | Ignore (expr)               -> [eval(c, expr)[0], Void]
  esac
}

public fun showExpr(expr) {
  case expr of
    Seq (s1, s2) -> showExpr(s1) ++ showExpr(s2)
    | _ -> sprintf("%s\n", expr.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
