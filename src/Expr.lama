-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)


public fun evalExpr (st, expr) {
    case expr of
        Var (x) -> return st (x)
    |   Const (c) -> return c
    |   Binop (op, left, right) -> return calcBinOp(op, evalExpr(st, left), evalExpr(st, right))
    esac
}

public fun calcBinOp (op, left, right) {
    case op of
        "+" -> return left + right
    |   "-" -> return left - right
    |   "*" -> return left * right
    |   "/" -> return left / right
    |   "%" -> return left % right
    |   "==" -> return left == right
    |   "!=" -> return left != right
    |   "<" -> return left < right
    |   ">" -> return left > right
    |   ">=" -> return left >= right
    |   "<=" -> return left <= right
    |   "&&" -> return left && right
    |   "!!" -> return left !! right
    esac
}
