-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of [[s, w], {Ref (lhs), rhs}] ->
        [[s <- [lhs, rhs], w], rhs]
      esac
  | Seq (x, y) -> eval (eval (c, x)[0], y)
  | Skip -> [c, Bot]
  | Read (x) ->
    case readWorld(w) of [y, w] ->
      [[s <- [x, y], w], Bot]
    esac
  | Write (x) ->
    case eval (c, x) of [[s, w], x] ->
      [[s, writeWorld (x, w)], Bot]
    esac
  | If (cond, body1, body2) ->
    case eval (c, cond) of
      [c, true] -> eval (c, body1) |
      [c, false] -> eval (c, body2)
    esac
  | While (cond, body) -> 
    case eval (c, cond) of
      [c, true] -> eval (eval (c, body)[0], expr) |
      [c, false] -> [c, Bot]
    esac
  | Repeat (body, cond) ->
    case eval (eval (c, body)[0], cond) of
      [c, true] -> [ c, Bot ] |
      [c, false] -> eval (c, expr)
    esac
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, expr]
  | Const (x) -> [c, x]
  | Binop (op, lhs, rhs) ->
    case evalList (c, {lhs, rhs}) of [c, {lhs, rhs}] ->
      [c, evalOp(op, lhs, rhs)]
    esac
  | Ignore (x) -> [eval (c, x)[0], Bot]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
