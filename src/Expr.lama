-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  local evaluated = case expr of
      Var (name@_) -> st(name)
    | Const (val@_) -> val
    | Binop (op@_, expr1@_, expr2@_) -> case op of
        "*"  -> evalExpr(st, expr1) * evalExpr(st, expr2)
      | "+"  -> evalExpr(st, expr1) + evalExpr(st, expr2)
      | "-"  -> evalExpr(st, expr1) - evalExpr(st, expr2)
      | "/"  -> evalExpr(st, expr1) / evalExpr(st, expr2)
      | "%"  -> evalExpr(st, expr1) % evalExpr(st, expr2)
      | "==" -> evalExpr(st, expr1) == evalExpr(st, expr2)
      | "!=" -> evalExpr(st, expr1) != evalExpr(st, expr2)
      | "<"  -> evalExpr(st, expr1) < evalExpr(st, expr2)
      | "<=" -> evalExpr(st, expr1) <= evalExpr(st, expr2)
      | ">"  -> evalExpr(st, expr1) > evalExpr(st, expr2)
      | ">=" -> evalExpr(st, expr1) >= evalExpr(st, expr2)
      | "&&" -> evalExpr(st, expr1) && evalExpr(st, expr2)
      | "!!" -> evalExpr(st, expr1) !! evalExpr(st, expr2)
    esac
  esac;
  -- printf ("Expression ""%s"" evaluated to ""%s""\n", expr.string, evaluated.string);
  evaluated
}
