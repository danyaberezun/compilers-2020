-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Binop(op, l, r) -> case evalList(c, {l, r}) of [c1, {lv, rv}] -> [c1, evalOp(op, lv, rv)] esac |
    Var(x) -> [c, st(x)] |
    Ref (x) -> [c, Ref (x)] |
    Ignore (x) -> case eval (c, x) of [c, _] -> [c, Bot] esac |
    Const(n) -> [c, n] |
    Skip -> [c, Bot] |
    Assn (x, val) -> case evalList(c, {x, val}) of [[st1, w1], {Ref (xx), vval}] -> [[st1 <- [xx, vval], w1], vval] esac |
    Read (x) -> case readWorld(w) of [v, w1] -> [[st <- [x, v], w1], Bot] esac |
    Write (e) -> case eval(c, e) of [[st1, w1], a] -> [[st1, writeWorld(a, w1)], Bot] esac |
    Seq (s, t) -> eval(eval(c, s)[0], t) |
    If (expr, trst, flst) -> 
      case eval(c, expr) of 
        [c, true] -> eval(c, trst) |
        [c, false] -> eval(c, flst)
      esac |
    wh@While(cond, body) -> case eval(c, cond) of 
      [c, true] -> case eval(c, body) of [c, _] -> eval(c, wh) esac |
      [c, false] -> [c, Bot] 
    esac |
    r@Repeat(body, cond) ->  case evalList(c, {body, cond}) of 
      [c, _:true:_] -> [c, Bot] |
      [c, _:false:_] -> eval(c, r) 
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
