-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun parse_bin_operation(operation, left, right) {
	case operation of
		  "+"  -> (left +  right)
		| "-"  -> (left -  right)
		| "*"  -> (left *  right)
		| "/"  -> (left /  right)
		| "%"  -> (left %  right)
		| "==" -> (left == right)
		| "!=" -> (left != right)
		| "<"  -> (left <  right)
		| ">"  -> (left >  right)
		| "<=" -> (left <= right)
		| ">=" -> (left >= right)
		| "&&" -> (left && right)
		| "!!" -> (left !! right)
	esac
}

public fun evalExpr(statement, expression) {
	case expression of
		  Var(x) -> statement(x)
		| Const(x) -> x
		| Binop(op, left, right) -> parse_bin_operation(op, evalExpr(statement, left), evalExpr(statement, right))
	esac
}
