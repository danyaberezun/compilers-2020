-- Expression evaluator

import List;
import State;

-- The evaluator itself: takes a state and an expression, returns integer value
-- returns integer value


public fun binopTranslate (operand, x, y)
{
	case operand of
	  "+"  -> x  +  y
	| "-"  -> x  -  y
	| "*"  -> x  *  y
	| "/"  -> x  /  y
	| "%"  -> x  %  y
	| "==" -> x  == y
	| "!=" -> x  != y
	| "<"  -> x  <  y
	| "<=" -> x  <= y
	| ">"  -> x  >  y
	| ">=" -> x  >= y
	| "&&" -> x  && y
	| "!!" -> x  !! y
	esac
}


-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)


public fun evalExpr (st, expr) 
{
  case expr of
	  Var   (x)               -> st(x)
	| Const (n)               -> n
	| Binop (op, left, right) -> binopTranslate (op, evalExpr(st, left), evalExpr(st, right))
  esac
}