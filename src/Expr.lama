-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Call   (string, expr list)  |
--        Ignore (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
public fun asFunc(binop, x, y) {
  case binop of
        "+"  -> x +  y | "-"  -> x -  y | "*"  -> x *  y | "/"  -> x /  y | "%"  -> x %  y | "==" -> x == y
      | "!=" -> x != y | "<"  -> x <  y | "<=" -> x <= y | ">"  -> x >  y | ">=" -> x >= y | "&&" -> x && y
      | "!!" -> x !! y
  esac
}

fun define(s, def) {
  case def of
      Local (ns)    -> addNames(s, ns)
    | Fun (n, a, b) -> addFunction(s, n, a, b)
  esac
}

fun addNameA (s, [k, v]) {
  addName(s, k, v)
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn (e1, e2)     -> case evalList(c, {e1, e2}) of [c@[s, w], {Ref (x), v}] -> [[s <- [x, v], w], v] esac
  |    Seq (e1, e2)     -> case eval(c, e1) of [c, _] -> eval(c, e2) esac
  |   Skip              -> [c, Bot]
  |   Read (x)          -> case readWorld(w) of [z, w] -> [[s <- [x, z], w], Bot] esac
  |  Write (e)          -> case eval(c, e) of [c@[s, w], v] -> [[s, writeWorld(v, w)], Bot] esac
  |     If (ec, et, ee) -> case eval(c, ec) of [c, 0] -> eval(c, ee) | [c, i] -> eval(c, et) esac
  |  While (ec, ee)     -> case eval(c, ec) of [c, 0] -> [c, Bot] | [c, i] -> eval(eval(c, ee)[0], While (ec, ee)) esac
  | Repeat (ee, ec)     -> eval(c, Seq(ee, While(Binop("==", ec, Const (0)), ee)))
  |    Var (x)          -> [c, s.lookup(x)]
  |    Ref (x)          -> [c, Ref (x)]
  |  Const (i)          -> [c, i]
  |  Binop (x, e1, e2)  -> case evalList(c, {e1, e2}) of [c, {v1, v2}] -> [c, x.asFunc(v1, v2)] esac
  | Ignore (e)          -> [eval(c, e)[0], Bot]
  |  Scope (ds, e)      -> case eval([foldl (define, enterScope(s), ds), w], e) of [[s, w], res] -> [[leaveScope(s), w], res] esac
  | Call(f, exprs)      -> case s.lookup(f) of Fun (ns, b) -> case evalList(c, exprs) of [[s, w], vs] -> 
                                case eval([foldl(addNameA, enterFunction(s), zip(ns, vs)), w], b) of
                                  [[s2, w], res] -> [[leaveFunction(s, getGlobal(s2)), w], res]
                                esac 
                           esac esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}