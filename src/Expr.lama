-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        Repeat  (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
	case expr of
	  Const(n) -> [c, n]
	| Var(x) -> 
		case lookupVal(s, x) of Val(v) -> 
			[c, v] 
		esac
	| Ref(x) -> [c, Ref(x)]
	| Binop(op, l, r) -> 
		case evalList(c, {l, r}) of 
			[c1, {a, b}] -> [c1, evalOp(op, a, b)]
		esac
	| Skip -> [c, None]
	| Assn(l, r) -> 
		case evalList(c, {l, r}) of
		  [[s1, w1],  {Ref(x), a}] -> [[s1 <- [x, Val(a)], w1], a]
		| [c1, {ElemRef(x, i), a}] -> x[i] := a; [c1, a]
		esac
	| Seq(e1, e2) -> 
		case eval(c, e1) of
			[c1, v] -> eval(c1, e2)
		esac
	| If(cond, e1, e2) ->
		case eval(c, cond) of
			[c1, n] -> 
				if(n) then eval(c1, e1)
				else eval(c1, e2)
				fi
		esac
	| While(cond, e) ->
		case eval(c, cond) of 
			[c1, n] -> 
				if(n) then 
					case eval(c1, e) of
						[c2, x] -> eval(c2, While(cond, e))
					esac
				else [c1, None]
				fi
		esac
	| Repeat(e, cond) ->
		case eval(c, e) of
			[c1, x] -> 
				case eval(c1, cond) of
					[c2, n] ->
						if(n) then [c2, None]
						else eval(c2, Repeat(e, cond))
						fi
				esac
		esac
	| Ignore(e) -> 
		case eval(c, e) of
			[c1, v] -> [c1, None]
		esac
	| Scope(defs, e) ->
		case evalList([enterScope(s), w], defs) of [c1, x] ->
			case eval(c1, e) of [[s2, w2], y] ->
				[[leaveScope(s2), w2], y]
			esac
		esac
	| Local(vals) -> [[addNames(s, vals), w], None]
	| Fun(f, args, body) -> [[addFunction(s, f, args, body), w], None]
	| Call(f, exprs) ->
		case lookupFun(s, f) of Fun(args, body) ->
			case evalList(c, exprs) of [[s1, w1], vals] ->
				case body of 
				  External -> 
					case evalBuiltin(f, vals, w1) of [res, w2] ->
						[[s1, w2], res]
					esac
				| _ ->
					local s15 = enterFunction(s1); -- s15 читай как s_1,5
					while size(args) > 0 do
						s15 := addName(s15, args[0], Val(vals[0]));
						args := args[1];
						vals := vals[1]
					od;
					case eval([s15, w1], body) of [[s2, w2], x] ->
						[[leaveFunction(s1, getGlobal(s2)), w2], x]
					esac 
				esac
			esac
		esac
	| String (str) -> [c, str]
	| Array (exprs) -> 
		case evalList(c, exprs) of [c1, vals] ->
			[c1, listArray(vals)]
		esac
	| Elem (ea, ei) ->
		case evalList(c, {ea, ei}) of [c1, {a, i}] ->
			[c1, a[i]]
		esac
	| ElemRef (ea, ei) ->
		case evalList(c, {ea, ei}) of [c1, {a, i}] ->
			[c1, ElemRef(a, i)]
		esac
	| Builtin (f, args) ->
		case evalList(c, args) of [[s1, w1], vals] ->
			case evalBuiltin(f, vals, w1) of [res, w2] ->
				[[s1, w2], res]
			esac
		esac
	esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read", Fun ({}, External)).addName ("write", Fun (singleton ("a"), External)) , createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
