-- Expression evaluator

import List;
import State;


public fun opFromStr(str) {
  case str of "+"  -> infix +
            | "-"  -> infix -
            | "*"  -> infix *
            | "/"  -> infix /
            | "%"  -> infix %
            | "==" -> infix ==
            | "!=" -> infix !=
            | "<"  -> infix <
            | "<=" -> infix <=
            | ">"  -> infix >
            | ">=" -> infix >=
            | "&&" -> infix &&
            | "!!" -> infix !!
    esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
<<<<<<< A01-straight-line-int-sm

=======
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
>>>>>>> A01-straight-line-int-sm

public fun evalExpr (st, expr) {
  case expr of Var   (x)        -> st (x)
             | Const (n)        -> n
             | Binop (op, l, r) -> opFromStr (op) (evalExpr (st, l), evalExpr (st, r))
             esac
}
