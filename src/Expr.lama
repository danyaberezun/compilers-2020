-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of [[s, w], {Ref (lhs), rhs}] ->
        [[s <- [lhs, rhs], w], rhs]
      esac
  | Seq (x, y) -> eval (eval (c, x)[0], y)
  | Skip -> [c, Bot]
  | Read (x) ->
    case readWorld(w) of [y, w] ->
      [[s <- [x, y], w], Bot]
    esac
  | Write (x) ->
    case eval (c, x) of [[s, w], x] ->
      [[s, writeWorld (x, w)], Bot]
    esac
  | If (cond, body1, body2) ->
    case eval (c, cond) of
      [c, true] -> eval (c, body1) |
      [c, false] -> eval (c, body2)
    esac
  | While (cond, body) ->
    case eval (c, cond) of
      [c, true] -> eval (eval (c, body)[0], expr) |
      [c, false] -> [c, Bot]
    esac
  | Repeat (body, cond) ->
    case eval (eval (c, body)[0], cond) of
      [c, true] -> [ c, Bot ] |
      [c, false] -> eval (c, expr)
    esac
  | Var (x) -> [c, lookup(s, x)]
  | Ref (x) -> [c, expr]
  | Const (x) -> [c, x]
  | Binop (op, lhs, rhs) ->
    case evalList (c, {lhs, rhs}) of [c, {lhs, rhs}] ->
      [c, evalOp(op, lhs, rhs)]
    esac
  | Ignore (x) -> [eval (c, x)[0], Bot]
  | Scope (defs, x) ->
    case eval ([foldl(fun (s, def) {
      case def of
        Local (names) -> addNames(s, names)
      | Fun (name, params, body) -> addFunction(s, name, params, body)
      esac
    }, enterScope(s), defs), w], x) of [[s, w], x] ->
      [[leaveScope(s), w], x]
    esac
  | Call (name, args) ->
    case lookup (s, name) of Fun (params, body) ->
      case evalList (c, args) of [[s, w], args] ->
        case eval ([foldl (fun (s, [name, value]) {
          addName(s, name, value)
        }, enterFunction(s), zip(params, args)), w], body) of [[s_, w], retval] ->
          [[leaveFunction(s, getGlobal(s_)), w], retval]
        esac
      esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState(), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
