-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        If     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- P.S: added special value Bot in accordance to formal semantics.

-- assertion programming
fun unboxRef(expr) {
  case expr of
    Ref (name) -> name
  | x          -> failure (sprintf("Parser expected a reference, got %s instead", expr.string))
  esac
}
local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun eval (c@[s, w], expr) {
  case expr of
     Assn   (expr1, expr2)        ->
       case evalList(c, {expr1, expr2}) of
         [[s, w], {nameB, valB}] -> [[s <- [unboxRef(nameB), valB], w], valB]
       esac
   | Seq    (expr1, expr2)        -> case evalList(c, {expr1, expr2}) of [c, {_, v2}] -> [c, v2] esac
   | Skip                         -> [c, Bot]
   | Read   (nameB)               -> case readWorld(w) of
                                       [value, world] -> [[s <- [nameB, value], world], Bot]
                                     esac
   | Write  (expr)                -> case eval(c, expr) of
                                       [[s, w], valB] -> [[s, writeWorld(valB, w)], Bot]
                                     esac
   | If     (cond, expr1, expr2)  -> case eval(c, cond) of
                                       [c, condB] -> if (condB)
                                                     then eval(c, expr1)
                                                     else eval(c, expr2)
                                                     fi
                                     esac
   | While  (cond, body)          -> case eval(c, cond) of
                                       [c, condB] -> if (condB)
                                                     then eval(c, Seq(body, expr)) -- can be prooved to correspond to semantics
                                                     else [c, Bot]
                                                     fi
                                     esac
   | Repeat (body, cond)          -> eval (c, Seq(body, While (Binop("==", cond, Const (0)), body))) -- new semantics for repeat
   | Var    (name)                -> [c, s(name)]
   | Ref    (name)                -> [c, Ref(name)]
   | Const  (val)                 -> [c, val]
   | Binop  (str, expr1, expr2)   ->
       case evalList(c, {expr1, expr2}) of
         [c, {v1, v2}] -> [c, evalOp(str, v1, v2)]
       esac
   | Ignore (expr)                -> case eval(c, expr) of [c, _] -> [c, Bot] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, v] ->
              -- fprintf (stderr, "Expression ""%s"" evaluated to ""%s""\n", expr.string, v.string);
              c.snd.getOutput
  esac
}
