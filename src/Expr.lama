-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (string, expr)       |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Scope  (def list, expr)     |
--        Call   (string, expr list)  |
--        Ignore (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Local (string list)                |
--       Fun   (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Read (x)     -> case readWorld (w) of [val, w1] -> [[s <- [x, val], w1], Void] esac |
    Write (e)    -> case eval(c, e) of [[s, w], val] ->  [[s, writeWorld (val, w)], Void] esac |
    Assn (x, e)  -> case evalList(c, {e, x}) of [[s, w], val:ref:_] -> [[s <- [ref, val], w], val] esac |
    Skip -> [c, Void] |
    If (cond, e1, e2) -> case eval(c, cond) of 
        [c, val] -> if val then eval(c, e1) else eval(c, e2) fi
    esac | 
    While (cond, body) -> case eval(c, cond) of 
        [c, val] -> if val then case eval(c, body) of [c, _] -> eval(c, expr) esac
                    else [c, Void] 
                    fi
    esac | 
    Repeat (body, cond) -> case evalList(c, {body, cond}) of 
        [c, _:val:_] -> if val then [c, Void] else eval(c, expr) fi
    esac |
    Seq (e1, e2) -> case evalList(c, {e1, e2}) of [c, _:res:_] -> [c, res] esac |
    Var (x) -> [c, s.lookup(x)] |
    Ref (x) -> [c, x] |
    Const (val) -> [c, val] |
    Binop (op, lhs, rhs) -> case evalList(c, {lhs, rhs}) of 
        [c, lval:rval:_] -> [c, evalOp(op, lval, rval)]
    esac |
    Ignore (e) -> [eval(c, e).fst, Void] |
    Scope(defs, e) -> case evalList([s.enterScope, w], defs) of 
        [c, _] -> case eval(c, e) of
            [[s, w], val] -> [[s.leaveScope, w], val]
        esac
    esac |
    Local(vars) -> [[s.addNames(vars), w], Void] |
    Fun (f, args, body) -> [[s.addFunction(f, args, body), w], Void] |
    Call (f, exprs) -> case s.lookup(f) of 
        Fun(args, body) -> case evalList(c, exprs) of 
            [[s, w], vals] -> 
                local s2 = foldl(fun (s1, [arg, val]) {
                    s1.addName(arg, val)
                    }, s.enterFunction, zip(args, vals));
                case eval([s2, w], body) of 
                    [[s2, w], res] -> [[s.leaveFunction(s2.getGlobal), w], res]
                esac
        esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}