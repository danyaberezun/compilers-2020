-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

-- Single call should return a modified configuration and a value
fun eval (c@[state, world], stmt) {
  case stmt of
    Const (val) -> [c, val]
  | Var (name) -> [c, state (name)]
  | Ref (expr) ->
    case expr of
      # string -> [c, Ref (expr)]
    | _ ->
      case eval (c, expr) of
        [newC, name] -> [newC, Ref (name)]
      esac
    esac
  | Ignore (expr) -> case eval (c, expr) of [newC, _] -> [newC, Null] esac
  | Binop (op, expr1, expr2) ->
    case evalList (c, {expr1, expr2}) of
      [newC, {l, r}] -> [newC, evalOp (op, l, r)]
    esac
  | Skip -> [c, Null]
  | Assn (name, value) ->
    case evalList (c, {name, value}) of
      [[newState, newWorld], {Ref (x), val}] -> [[newState <- [x, val], newWorld], val]
    esac
  | Seq (stmt1, stmt2) ->
    case evalList (c, {stmt1, stmt2}) of
      [newC, {_, val}] -> [newC, val]
    esac
  | Read (name)        ->
    case readWorld (world) of
      [value, newWorld] -> [[state <- [name, value], newWorld], Null]
    esac
  | Write (expr)       ->
    case eval (c, expr) of
      [[new_state, newWorld], value] -> [[new_state, writeWorld (value, newWorld)], Null]
    esac
  | If (expr, stmt1, stmt2) ->
    case eval (c, expr) of
      [newC, val] ->
        if val then eval (newC, stmt1)
        else eval (newC, stmt2)
        fi
    esac
  | w@While (expr, stmt) ->
    case eval (c, expr) of
      [newC, val] ->
        if val then
          case eval (newC, stmt) of
            [newerC, _] -> eval (newerC, w)
          esac
        else [newC, Null]
        fi
    esac
  | r@Repeat (stmt, expr) ->
    case evalList (c, {stmt, expr}) of
      [newC, {_, val}] -> if val then [newC, Null] else eval (newC, r) fi
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
