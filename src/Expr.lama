-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalSeq(c, exprs) {
  foldl (fun ([c, _], e) { eval (c, e) }, [c, Error], exprs)
}

fun eval (c@[s, w], expr) {
  -- printf("eval called with: %s\n", expr.string);
  case expr of
    Assn (tgt, val) -> 
      case evalList(c, {tgt, val}) of
        [[s, w], {Ref (tgt), val}] -> [[s <- [tgt, val], w], val]
      esac
  | Seq (e1, e2) -> evalSeq (c, {e1, e2})
  | Skip -> [c, Unit]
  | Read (id) -> 
      case readWorld (w) of
        [val, w] -> [[s <- [id, val], w], Unit]
      esac
  | Write (e) ->
      case eval (c, e) of
        [[s, w], val] -> [[s, writeWorld (val, w)], Unit]
      esac
  | If (cond, thn, els) ->
      case eval (c, cond) of
        [c, 0] -> eval (c, els)
      | [c, _] -> eval (c, thn)
      esac
  | whl@While (cond, body) ->
      case eval (c, cond) of
        [c, 0] -> [c, Unit]
      | [c, _] ->
        case evalList (c, {body, whl}) of
          [c, _] -> [c, Unit]
        esac
      esac
  | rpt@Repeat (body, cond) ->
      case evalSeq (c, {body, cond}) of
        [c, 0] -> eval (c, rpt)
      | [c, _] -> [c, Unit]
      esac
  | Var (id) -> [c, s (id)]
  | Ref (id) -> [c, Ref (id)]
  | Const (val) -> [c, val]
  | Binop (op, lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [c, {lhs, rhs}] -> [c, evalOp (op, lhs, rhs)]
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, _] -> [c, Unit]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
