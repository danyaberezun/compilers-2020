-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun asFunc(binop, x, y) {
  case binop of
        "+"  -> x +  y | "-"  -> x -  y | "*"  -> x *  y | "/"  -> x /  y | "%"  -> x %  y | "==" -> x == y
      | "!=" -> x != y | "<"  -> x <  y | "<=" -> x <= y | ">"  -> x >  y | ">=" -> x >= y | "&&" -> x && y
      | "!!" -> x !! y
  esac
}

fun eval (c@[s, w], expr) {
  local x;
  -- printf("Evaluating %s\n", expr.string);
  x := case expr of
      Assn (e1, e2)     -> case evalList(c, {e1, e2}) of [c@[s, w], {Ref (x), v}] -> [[s <- [x, v], w], v] esac
  |    Seq (e1, e2)     -> case eval(c, e1) of [c, _] -> eval(c, e2) esac
  |   Skip              -> [c, Bot]
  |   Read (x)          -> case readWorld(w) of [z, w] -> [[s <- [x, z], w], Bot] esac
  |  Write (e)          -> case eval(c, e) of [c@[s, w], v] -> [[s, writeWorld(v, w)], Bot] esac
  |     If (ec, et, ee) -> case eval(c, ec) of [c, 0] -> eval(c, ee) | [c, i] -> eval(c, et) esac
  |  While (ec, ee)     -> case eval(c, ec) of [c, 0] -> [c, Bot] | [c, i] -> eval(eval(c, ee)[0], While (ec, ee)) esac
  | Repeat (ee, ec)     -> eval(c, Seq(ee, While(Binop("==", ec, Const (0)), ee)))
  |    Var (x)          -> [c, s(x)]
  |    Ref (x)          -> [c, Ref (x)]
  |  Const (i)          -> [c, i]
  |  Binop (x, e1, e2)  -> case evalList(c, {e1, e2}) of [c, {v1, v2}] -> [c, x.asFunc(v1, v2)] esac
  | Ignore (e)          -> [eval(c, e)[0], Bot]
  esac;
  -- printf("Res = %s\n\n", x[1].string);
  x
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
