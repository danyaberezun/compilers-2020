-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
public fun evalExpr (st, expr) {
	-- printf("%s\n", expr.string);
	case expr of
		  Var (s1) -> st(s1)
		| Const (s1) -> s1
		| Binop (op, s1, s2) ->
			case op of
				  "*"  -> (evalExpr(st, s1) *  evalExpr(st, s2))
				| "/"  -> (evalExpr(st, s1) /  evalExpr(st, s2))
				| "%"  -> (evalExpr(st, s1) %  evalExpr(st, s2))
				| "+"  -> (evalExpr(st, s1) +  evalExpr(st, s2))
				| "-"  -> (evalExpr(st, s1) -  evalExpr(st, s2))
				| "==" -> (evalExpr(st, s1) == evalExpr(st, s2))
				| "!=" -> (evalExpr(st, s1) != evalExpr(st, s2))
				| "<=" -> (evalExpr(st, s1) <= evalExpr(st, s2))
				| "<"  -> (evalExpr(st, s1) <  evalExpr(st, s2))
				| ">=" -> (evalExpr(st, s1) >= evalExpr(st, s2))
				| ">"  -> (evalExpr(st, s1) >  evalExpr(st, s2))
				| "&&" -> (evalExpr(st, s1) && evalExpr(st, s2))
				| "!!" -> (evalExpr(st, s1) !! evalExpr(st, s2))
		esac
	esac
}
