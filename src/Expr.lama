-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
local ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn   (expr, expr)         |
--        Seq    (expr, expr)         |
--        Skip                        |
--        Read   (string)             |
--        Write  (expr)               |
--        if     (expr, expr, expr)   |
--        While  (expr, expr)         |
--        Repeat (expr, expr)         |
--        Var    (string)             |
--        Ref    (string)             |
--        Const  (int)                |
--        Binop  (string, expr, expr) |
--        Ignore (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, val] -> [c, val : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
	case expr of 
		Const(x)		-> [c, x]		|
		Var(x)			-> [c, s(x)]		|
		Binop(op, l, r)	-> case evalList(c, {l, r}) of [n_c, {v1, v2}] -> [n_c, evalOp(op, v1, v2)] esac |
		Assn(to, from)		-> case evalList(c, {to, from}) of [n_c@[n_s, n_w], {Ref (place), value}] -> [[n_s <- [place, value], n_w], value] esac |
		Seq(exp1, exp2)	-> case eval(c, exp1) of [n_c, value] -> eval(n_c, exp2) esac |
		Skip			-> [c, None]		|
		Read(to)		-> case readWorld(w) of [value, n_w] -> [[s <- [to, value], n_w], None] esac |
		Write(from)		-> case eval(c, from) of [n_c@[n_s, n_w], val] -> [[n_s, writeWorld(val, n_w)], None] esac |
		If(cond, exp1, exp2)	-> case eval(c, cond) of 
						[n_c, 0]	-> eval(n_c, exp2) |
						[n_c, _ ]	-> eval(n_c, exp1) esac |
		While(cond, exp1)	-> case eval(c, cond) of
						[n_c, 0]	-> [n_c, None] |
						[n_c, _ ]	-> case eval(n_c, exp1) of [last_c, value] -> eval(last_c, expr) esac
						esac |
		Repeat(exp1, cond)	-> eval(c, Seq(exp1, While(Binop("==", cond, Const(0)), exp1))) |
		Ref(x)			-> [c, Ref(x)]		|
		Ignore(exp1)		-> case eval(c, exp1) of [n_c, value] -> [n_c, None] esac
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
