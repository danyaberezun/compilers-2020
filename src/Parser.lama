-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

fun makeOp(op) { 
  [s(op), fun(l, op, r) { Binop(op, l, r) }] 
}
fun makeOps(assoc, operations) { 
  [assoc, map(makeOp, operations)] 
}

local exprOps = {
  makeOps(Left, "!!":{}),
  makeOps(Left, "&&":{}),
  makeOps(Nona, {"==", "!=", "<=", "<" , ">=", ">" }),
  makeOps(Left, {"+", "-"}),
  makeOps(Left, {"*", "/", "%"})
};
-- Primary expression
-- local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
--                                    x=lident  {Var (x)}               |
--                                    inbr[s("("), exp, s(")")]),
local expp = memo $ eta expr(exprOps, primary),
      var = memo $ eta syntax (x=lident { Var (x) });

local 
  write = memo $ eta syntax (kWrite x=inbr[s("("),    expp, s(")")] { Write (x) }),
  read = memo $ eta syntax  (kRead  x=inbr[s("("), lident, s(")")] { Read  (x) }),
  assign = memo $ eta syntax (x=lident s[":="] e=expp { Assn (x, e) }),
  compose = memo $ eta syntax (s1=stmt0 s[";"] s2=stmt { Seq (s1, s2) }),
  wwhile = memo $ eta syntax (kWhile e=expp kDo b=stmt kOd { While (e, b) } ),
  iif = memo $ eta syntax (kIf e=iif0 { e }),
  iif0 = memo $ eta syntax (e=expp kThen b1=stmt b2=eelse { If(e, b1, b2) }),
  eelse = memo $ eta syntax (kFi { Skip } |
                             -kElse stmt -kFi |
                             -kElif iif0),
  rrepeat = memo $ eta syntax (kRepeat s=stmt kUntil e=expp { Repeat(s, e) }),
  ffor = memo $ eta syntax (kFor
                              init=stmt0 s[","] cond=expp s[","] loop=stmt0
                              kDo body=stmt kOd { Seq(init, While(cond, Seq(body, loop))) });

local stmt0 = memo $ eta syntax (
                                read |
                                wwhile |
                                rrepeat |
                                ffor |
                                iif |
                                assign |
                                write |
                                kSkip { Skip }
                                );
local stmt = memo $ eta syntax (compose | stmt0);

-- Public top-level parser



-- Public top-level parser
public parse = syntax (s=exp {s (Void)});

-- public parse = stmt;
