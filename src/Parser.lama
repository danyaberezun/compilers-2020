-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Ref    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
        loc=pos e=inbr[s("("), exp, s(")")]          {fun (a) {e (a)}}                                             |
        -- decimal constant
        loc=pos x=decimal                            {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}       |
        -- identifier
        x=lident                                     {fun (a) {
                                                        case a of
                                                          Ref  -> Ref (x)
                                                        | Void -> Ignore (Var (x))
                                                        | _    -> Var (x)
                                                        esac
                                                     }}                                                             |
        loc=pos kSkip                                {fun (a) {assertVoid (a, Skip, loc)}}                          |
        loc=pos kWrite x=inbr[s("("), exp, s(")")]   {fun (a) {assertVoid (a, Write (x (Val)), loc)}}               |
        loc=pos kRead x=inbr[s("("), lident, s(")")] {fun (a) {assertVoid (a, Read (x), loc)}}                      |
        loc=pos kWhile cond=exp kDo s1=exp kOd       {fun (a) {assertVoid (a, While (cond (Val), s1 (Void)), loc)}} |
        loc=pos kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd 
                                                    {fun (a) {assertVoid (a, 
                                                      Seq (s1 (Void),
                                                      While (e (Val), Seq (s3 (Void), s2 (Void)))), loc)}}          |
        loc=pos kRepeat s1=exp kUntil e=inbr[s("("), exp, s(")")]         {fun (a) {assertVoid (a, Repeat (s1 (Void), e (Val)), loc)}}   |
        loc=pos kIf e=exp kThen s1=exp s2=else_exp   {fun (a) {If (e (Val), s1 (a), s2 (a))}}),
      else_exp = memo $ eta syntax (
        loc=pos kFi                                  {fun (a) {assertVoid (a, Skip, loc)}}  |
        loc=pos kElse s=exp kFi                      {fun (a) {s (a)}} |
        loc=pos kElif e=exp kThen s1=exp s2=else_exp {fun (a) {If (e (Val), s1 (a), s2 (a))}}),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}} | basic);

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});