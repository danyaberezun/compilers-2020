-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
binop = fun (l, op, r){
	Binop(op, l, r)},
		
			oper = {[Left, [s("!!"), binop] : {}],
              [Left, [s("&&"), binop]: {}],
              [Left, [s("*") | s("/") | s("%"), binop] : {}],
              [Left, [s("+") | s("-"), binop] : {}],
              [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}]},
  exp = memo $ eta expr(oper, primary);
      
local stmt = memo $ eta syntax (
  x = kSkip {Skip} |
  x1 = lident s[":="] x2 = exp {Assn (x1, x2)} |
  s1 = stmt s[";"] s2 = stmt end {Seq (s1, s2)} |
  kRead x = inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite x = inbr[s("("), exp, s(")")] {Write (x)});

-- Public top-level parser
public parse = stmt;
             
