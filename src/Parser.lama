-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binop(l, op, r) {
	Binop(op, l, r)
}


-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({ 
						[Left, [s("!!") , binop] : {} ],
						[Left, [s("&&") , binop] : {} ], 
						[Nona, {	[s("==") , binop ],
									[s("!=") , binop ],
									[s("<=") , binop ],
									[s("<")  , binop ],
									[s(">=") , binop ],
									[s(">")  , binop ]
								}],
						[Left, { 	[s("+"),   binop ],
									[s("-"),   binop ]
								}],
						[Left, {	[s("*") ,  binop ],
									[s("/") ,  binop ],
									[s("%") ,  binop ]
								}] 
						}, primary);

local elifParser  = memo $ eta syntax(
				kElse x=stmt                                    { x } |
				kElif e=exp kThen x=stmt y=elifParser { If(e, x, y) } 
						);
						
local primaryStmt = memo $ eta syntax( 
				kWrite x=inbr[s("("), exp, s(")")]         { Write(x) } |
				kRead x=inbr[s("("), lident, s(")")]         {Read(x) } |
				x=lident s[":="] e=exp                   { Assn(x, e) } |
				kSkip									        { Skip} |
				kWhile e=exp kDo x=stmt kOd             { While(e, x) } |
				kIf e=exp kThen x=stmt y=elifParser kFi { If(e, x, y) } |
				kIf e=exp kThen x=stmt kFi           { If(e, x, Skip) } |
				kRepeat x=stmt kUntil e=exp             {Repeat(x, e) } |
				kFor x=stmt s[","] e=exp s[","] y=stmt kDo z=stmt kOd  {Seq(x, While(e, Seq(z, y)) ) }
						),
			 stmt = memo $ eta syntax(
						primaryStmt                                     | 
						x=primaryStmt s[";"] y=stmt         {Seq(x, y)}
						);

-- Public top-level parser
public parse = stmt;

