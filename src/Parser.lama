-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
    fun f(l, o, r) {
        Binop(o, l, r)
    }
    [s(op), f]
}


-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({
          [Left, binop("!!") : {}],
          [Left, binop("&&") : {}],
          [Nona, map(binop, {"==", "<=", ">=", "<", ">", "!="})],
          [Left, map(binop, {"+", "-"})],
          [Left, map(binop, {"*", "/", "%"})]
      }, primary)(id);

local stmt = memo $ eta syntax (
    kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
    kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
    kSkip {Skip} |
    x=lident s[":="] e=exp {Assn(x, e)} |
    x=stmt s[";"] y=stmt end {Seq(x, y)}
);

-- Public top-level parser
public parse = stmt;
             
