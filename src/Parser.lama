-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression


-- косяк: если поставить {obj}, то это будет не лист, а скоуп
-- (не забыть про это)
-- obj:{} - list с 1 объектом
-- singleton(obj) -> то же самое, почему я это только щас узнал
-- fun arrayList (a)
-- Converts an array to list (preserving the order of elements).

local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident {Var (x)}                |
                                   inbr[s("("), exp, s(")")]),

	binop = fun (l, op, r) {Binop(op, l, r)},  -- does the var names affect the runtime?

	ops = {[Left, [s("&&"), binop] : {}],
	  	   [Left, [s("!!"), binop] : {}],
	  	   [Nona, [s("<") | s(">") | s("<=") | s(">=") |  s("==") | s("!="), binop] : {}],
	  	   [Left, [s("+") | s("-"), binop] : {}],
	  	   [Left, [s("*") | s("/") | s("%"), binop] : {}]},

    exp = memo $ eta expr (ops, primary);


-- local stmt = memo $ eta syntax (
-- 	kRead x = inbr[s("("), lident, s(")")] {Read(x)}  |
-- 	kWrite x = inbr[s("("), exp, s(")")] {Write(x)}   |
-- 	x = lident s[":="] y = exp        {Assn(x, y)}    |
-- 	x1 = stmt s[";"] x2 = stmt end    {Seq(x1, x2)}   
-- 	);

local primary_stmt = memo $ eta syntax (
		kSkip {Skip} |
		kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
		kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
		x=lident s[":="] y=exp {Assn(x, y)} |
		kWhile condition=exp kDo s1=stmt kOd {While(condition, s1)} |
		kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq(s1, While(e, Seq(s3, s2)))} |
		kRepeat s1=stmt kUntil e=exp {Repeat(s1, e)} |
		kIf condition=exp kThen s1=stmt s2=else_stmt {If(condition, s1, s2)}),
	else_stmt = memo $ eta syntax (
			kFi {Skip} |
			kElse s=stmt kFi {s} |
			kElif e=exp kThen s1=stmt s2=else_stmt {If(e, s1, s2)}),
	stmt = memo $ eta syntax (
			primary_stmt |
			elem1=primary_stmt s[";"] elem2=stmt {Seq(elem1, elem2)}
		);

public parse = stmt;

