-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
                                   
      binop = fun (l, op, r) { Binop (op, l, r) },
      exp = memo $ eta expr ( 
            { 
              [Left, [s("!!"), binop] : {}],
              [Left, [s("&&"), binop]: {}],
              [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}],
              [Left, [s("+") | s("-"), binop] : {}],
              [Left, [s("*") | s("/") | s("%"), binop] : {}] 
            }, primary );

local simpleStmt = memo $ eta syntax (  

  kRead x=inbr[s("("), lident, s(")")] { Read (x) }               |
  kWrite ex=inbr[s("("), exp, s(")")] { Write (ex) }              | 
  x=lident s[":="] e=exp { Assn (x, e) }                          |
  kSkip { Skip }                                                  |
  kWhile ex=exp s=inbr[kDo, stmt, kOd] { While (ex, s) }          |
  -kIf ifParser -kFi                                              |
  kRepeat s=stmt kUntil e=exp { Repeat (s, e) }                   |
  kFor init=stmt s[","] cond=exp s[","] step=stmt body=inbr[kDo, stmt, kOd] { Seq(init, While(cond, Seq(body, step))) }
);

local elseParser = memo $ eta syntax ( -kElse s=stmt | empty { Skip } | -kElif ifParser );

local ifParser = memo $ eta syntax ( ex=exp kThen s1=stmt else_part=elseParser { If (ex, s1, else_part) } );

local stmt = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) } );

-- Public top-level parser
public parse = stmt;
