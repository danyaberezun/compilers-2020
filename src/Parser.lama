-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;      

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

        
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binopop = fun (l, op, r) {Binop (op, l, r)},
      ops = {[Left, [s ("!!"), binopop] : {}],
             [Left, [s ("&&"), binopop] : {}],
             [Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binopop] : {}],
             [Left, [s ("+") | s ("-"), binopop] : {}],
             [Left, [s ("*") | s ("/") | s ("%"), binopop] : {}]},
      exp = memo $ eta expr (ops, primary) (id);

local primary_stmt = memo $ eta syntax (
        kSkip                                                    {Skip}                                |      
        kWrite x=inbr[s("("), exp, s(")")]                       {Write (x)}                           |
        kRead  x=inbr[s("("), lident, s(")")]                    {Read (x)}                            |
        x=lident s[":="] y=exp                                   {Assn (x, y)}                         |
        kWhile cond=exp kDo s1=stmt kOd                          {While (cond, s1)}                    |
        kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq (s3, s2)))}   |
        kRepeat s=stmt kUntil e=exp                              {Repeat (s, e)}                       |
        kIf cond=exp kThen s1=stmt s2=else_stmt                  {If (cond, s1, s2)}),
      else_stmt = memo $ eta syntax (
        kFi                                     {Skip}           |
        kElse s=stmt kFi                        {s}              |
        kElif e=exp kThen s1=stmt s2=else_stmt  {If (e, s1, s2)}),
      stmt = memo $ eta syntax (
        primary_stmt |
        x1=primary_stmt s[";"] x2=stmt {Seq (x1, x2)});

-- Public top-level parser
public parse = stmt;
