-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

        
(*local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binopop = fun (l, op, r) {Binop (op, l, r)},
      ops = {[Left, [s ("!!"), binopop] : {}],
             [Left, [s ("&&"), binopop] : {}],
             [Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binopop] : {}],
             [Left, [s ("+") | s ("-"), binopop] : {}],
             [Left, [s ("*") | s ("/") | s ("%"), binopop] : {}]},
      exp = memo $ eta expr (ops, primary) (id);

local primary_stmt = memo $ eta syntax (
        kSkip                                                    {Skip}                                |      
        kWrite x=inbr[s("("), exp, s(")")]                       {Write (x)}                           |
        kRead  x=inbr[s("("), lident, s(")")]                    {Read (x)}                            |
        x=lident s[":="] y=exp                                   {Assn (x, y)}                         |
        kWhile cond=exp kDo s1=stmt kOd                          {While (cond, s1)}                    |
        kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq (s3, s2)))}   |
        kRepeat s=stmt kUntil e=exp                              {Repeat (s, e)}                       |
        kIf cond=exp kThen s1=stmt s2=else_stmt                  {If (cond, s1, s2)}),
      else_stmt = memo $ eta syntax (
        kFi                                     {Skip}           |
        kElse s=stmt kFi                        {s}              |
        kElif e=exp kThen s1=stmt s2=else_stmt  {If (e, s1, s2)}),
      stmt = memo $ eta syntax (
        primary_stmt |
        x1=primary_stmt s[";"] x2=stmt {Seq (x1, x2)});*)

-- Public top-level parser
public parse = stmt;
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
