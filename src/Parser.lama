-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local elifParser = memo $ eta syntax (
									kElse st = exp kFi                                {st}                                                           |
									kFi                                               {fun (a) {assertVoid(a, Skip, loc)}}                           |
									kElif x = exp kThen s1 = exp s2 = elifParser      {fun (a) {If (x(Val), s1(a), s2(a))}}
									);

local primary    = memo $ eta syntax (
                                    -- decimal constant
                                    loc = pos x = decimal                                   {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}  |

                                    -- identifier
                                    x = lident                                              {fun (a) {
                                                                                             case a of
                                                                                               Ref  -> Ref (x)
                                                                                             | Void -> Ignore (Var (x))
                                                                                             | _    -> Var (x)
                                                                                             esac     
																							}}                                                       |
									inbr[s ("("), exp, s (")")]                                                                                      |
									loc = pos kWrite v = inbr[s("("), exp, s(")")]          {fun (a) {assertVoid (a, Write(v(Val)), loc)}}           |
									loc = pos kRead  v = inbr[s("("), lident, s(")")]       {fun (a) {assertVoid (a, Read(v), loc)}}                 |
									loc = pos kSkip                                         {fun (a) {assertVoid (a, Skip, loc)}}                    |
									loc = pos kWhile x = exp kDo st = exp kOd               {fun (a) {assertVoid (a, While(x(Val), st(Void)), loc)}} |
									loc = pos kIf x = exp kThen s1 = exp s2 = elifParser    {fun (a) {If (x(Val), s1(a), s2(a))}}                    |
									loc = pos kRepeat st = exp 
												kUntil x = inbr[s("("), exp, s(")")]        {fun (a) {assertVoid (a, Repeat(st(Void), x(Val)), loc)}}|
									loc = pos kFor s1 = exp s[","] e = exp s[","] s2 = exp kDo
												s3 = exp kOd  {fun (a) {assertVoid (a, Seq(s1(Void), While(e(Val), Seq(s3(Void), s2(Void)))), loc)}}),

(* Assignment *)
                                      $(failure ("the rest of primary parsing in not implemented\n"))),
      scopeExpr = memo $ eta (syntax ($(failure ("scope expression parsing is not implemented\n")))),
(* End *)
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
