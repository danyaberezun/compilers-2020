-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident {fun (a) {
                                                case a of
                                                  Ref  -> Ref (x)
                                                | Void -> Ignore (Var (x))
                                                | _    -> Var (x)
                                                esac
                                              }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});

-- -- Primary expression
-- local simpleStmt = memo $ eta syntax (  

--   kRead x=inbr[s("("), lident, s(")")] { Read (x) }               |
--   kWrite ex=inbr[s("("), exp, s(")")] { Write (ex) }              | 
--   x=lident s[":="] e=exp { Assn (x, e) }                          |
--   kSkip { Skip }                                                  |
--   kWhile ex=exp s=inbr[kDo, stmt, kOd] { While (ex, s) }          |
--   -kIf ifParser -kFi                                              |
--   kRepeat s=stmt kUntil e=exp { Repeat (s, e) }                   |
--   kFor init=stmt s[","] cond=exp s[","] step=stmt body=inbr[kDo, stmt, kOd] { Seq(init, While(cond, Seq(body, step))) }
-- );

-- local elseParser = memo $ eta syntax ( -kElse s=stmt | empty { Skip } | -kElif ifParser );

-- local ifParser = memo $ eta syntax ( ex=exp kThen s1=stmt else_part=elseParser { If (ex, s1, else_part) } );

-- local stmt = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) } );
