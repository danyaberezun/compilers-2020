-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

fun myIf(cond, x, y)
{
	fun(a) { If(cond(Var), x(a), y(a))}
}

local elifParser  = memo $ eta syntax(
				kElse x=exp                                    { x } |
				kElif e=exp kThen x=exp y=elifParser { myIf(e, x, y) } 
						);

local primary  = memo $ eta syntax (
			-- decimal constant
			loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}	 |

			-- identifier
			x=lident                                          {fun (a) {
																case a of
																	Ref  -> Ref (x)
																	| Void -> Ignore (Var (x))
																	| _    -> Var (x)
																esac
																}} 																 |
			inbr[s ("("), exp, s (")")]					  		  																 |
			loc=pos kRead x=inbr[s("("), lident, s(")")]         	  { fun (a) { assertVoid(a, Read(x),       loc) }} 			 |
			loc=pos kWrite x=inbr[s("("), exp, s(")")]         		  { fun (a) { assertVoid(a, Write(x(Val)), loc) }} 			 |
			loc=pos kSkip									          { fun (a) { assertVoid(a, Skip, loc) }} 					 |
			loc=pos kWhile e=exp kDo x=exp kOd             			  { fun (a) { assertVoid(a, While(e(Val), x(Void)), loc) }}	 |
			loc=pos kIf e=exp kThen x=exp y=elifParser kFi 			  { myIf(e, x, y) } 										 |
			loc=pos kIf e=exp kThen x=exp kFi           			  { myIf(e, x, fun(a) { assertVoid(a, Skip, loc)})}			 |
			loc=pos kRepeat x=exp kUntil e=inbr[s("("), exp, s(")")]  { fun (a) { assertVoid(a, Repeat(x(Void), e(Val)), loc) }} |
			loc=pos kFor x=exp s[","] e=exp s[","] y=exp kDo z=exp kOd { fun (a) { assertVoid(a, Seq(x(Void), While(e(Val), Seq(z(Void), y(Void)))), loc) }}
			--$(failure ("the rest of primary parsing in not implemented\n"))
		),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
