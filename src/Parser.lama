-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x = decimal {Const (stringInt (x))} |
                                   x = lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({[Left,  [s("!!"), fun(l,op,r) {Binop(op, l, r)}] : {}],
							 [Left,  [s("&&"), fun(l,op,r) {Binop(op, l, r)}] : {}],
							 [Nona, {[s("<"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s(">"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("<="), fun(l,op,r) {Binop(op, l, r)}],
									 [s(">="), fun(l,op,r) {Binop(op, l, r)}],
									 [s("!="), fun(l,op,r) {Binop(op, l, r)}],
									 [s("=="), fun(l,op,r) {Binop(op, l, r)}]
									}],
							 [Left, {[s("+"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("-"),  fun(l,op,r) {Binop(op, l, r)}]
									}],
							 [Left, {[s("*"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("/"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("%"),  fun(l,op,r) {Binop(op, l, r)}]
									}]
							 }, primary) (id);

local stmt = memo $ eta syntax(
							   kWrite x = inbr[s("("), exp, s(")")]   {Write(x)}  |
							   kRead  v = inbr[s("("), lident, s(")")] {Read(v)}  |
							   v = lident s[":="] x = exp           {Assn(v, x)}  | 
							   s1 = stmt s[";"] s2 = stmt end      {Seq(s1, s2)}
							  );
   

-- Public top-level parser
public parse = stmt;

