-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
                                    inbr[s("("), exp, s(")")] |
                                    inbr[s("{"), scopeExpr, s("}")] |
                                    loc=pos kSkip {fun (a) { assertVoid(a, Skip, loc) }} |
                                    loc=pos kRead id=inbr[s("("), lident, s(")")] {fun (a) { assertVoid(a, Read (id), loc) }} |
                                    loc=pos kWrite e=inbr[s("("), exp, s(")")] {fun (a) { assertVoid(a, Write (e (Val)), loc) }} |
                                    -kIf ifNoKw |
                                    loc=pos kWhile cond=exp kDo body=scopeExpr kOd {fun (a) { assertVoid(a, While (cond (Val), body (Void)), loc) }} |
                                    loc=pos kFor init=scopeExpr s[","] cond=exp s[","] step=exp kDo body=scopeExpr kOd {fun (a) { 
                                      local whl = distributeScope(init (Void), fun (i) {
                                        Seq (i, While (cond (Val), Seq (body (Void), step (Void))))
                                      });
                                      assertVoid(a, whl, loc) 
                                    }} |
                                    loc=pos kRepeat body=scopeExpr kUntil cond=basic {fun (a) { 
                                      local rpt = distributeScope(body (Void), fun (b) {
                                        Repeat (b, cond (Val))
                                      });
                                      assertVoid(a, rpt, loc) 
                                    }}
                                    ),
      ifNoKw     = memo $ eta syntax (
                                    cond=exp kThen thn=scopeExpr els=(
                                      -kElse scopeExpr -kFi     |
                                      -kElif ifNoKw        |
                                      loc=pos kFi {fun (a) { assertVoid(a, Skip, loc) }}
                                    ) {fun (a) { If (cond (Val), thn (a), els (a)) }}
                                    ),
      defItem    = memo $ eta syntax (
                                    kFun fname=lident params=inbr[s("("), list0(lident), s(")")]
                                    body=inbr[s("{"), scopeExpr, s("}")] { Fun (fname, params, body (Weak)) } |
                                    kLocal defs=list[syntax(
                                        id=lident val=(-s["="] v=basic {v (Val)})? { [id, val] }
                                      )] s[";"] { Local (defs) }
                                    ),
      scopeExpr  = memo $ eta syntax (
                                    defItems=defItem* loc=pos e=exp? {fun (a) { 
                                      local ex = case e of
                                        None -> fun (a) { assertVoid(a, Skip, loc) }
                                      | Some (e) -> e
                                      esac;
                                      expandScope (defItems, ex (a)) 
                                    }}
                                    ),
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});

-- Use this for debugging:
-- public parse = syntax (s=scopeExpr {local ast = s (Void); printf("AST is:\n%s\n", ast.string); ast});
