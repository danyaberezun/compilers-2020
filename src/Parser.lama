-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun binop(l, op, r) {
	Binop(op, l, r)
}

	
-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({ 
						[Left, [s("!!") , binop] : {} ],
						[Left, [s("&&") , binop] : {} ], 
						[Nona, {	[s("==") , binop ],
									[s("!=") , binop ],
									[s("<=") , binop ],
									[s("<")  , binop ],
									[s(">=") , binop ],
									[s(">")  , binop ]
								}],
						[Left, { 	[s("+"), binop ],
									[s("-"), binop ]
								}],
						[Left, {	[s("*") , binop ],
									[s("/") , binop ],
									[s("%") , binop ]
								}] 
						}, primary);

--local stmt = memo $ eta (failure ("statement parsing not implemented\n"));
local stmt = memo $ eta syntax( 
						kWrite x=inbr[s("("), exp, s(")")] { Write(x) } |
						kRead x=inbr[s("("), lident, s(")")] {Read(x) } |
						x=lident s[":="] e=exp           { Assn(x, e) } |
						x=stmt s[";"] y=stmt end         { Seq(x, y) }
						);

-- Public top-level parser
public parse = stmt;
             
