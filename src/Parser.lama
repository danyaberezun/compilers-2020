-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binop = fun (l, op, r) {Binop(op, l, r)},
      ops = {[Left, [s("!!"), binop] : {}],
            [Left, [s("&&"), binop]: {}],
            [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}],
            [Left, [s("+") | s("-"), binop] : {}],
            [Left, [s("*") | s("/") | s("%"), binop] : {}]},
      exp = memo $ eta expr(ops, primary);

local stmt = memo $ eta syntax (
      kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
      kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
      x=lident s[":="] e=exp {Assn(x, e)} |
      s1=stmt s[";"] s2=stmt end {Seq(s1, s2)} |
      kSkip {Skip} |
      kIf e=exp kThen s1=seqq s2=ifTailParser {If (e, s1, s2)} |
      kWhile e=exp kDo s=seqq kOd {While (e, s)} |
      kRepeat s=seqq kUntil e=exp {Repeat (s, e)} |
      kFor e1=seqq s[","] e2=exp s[","] e3=seqq kDo s=seqq kOd {Seq (e1, While(e2, Seq(s, e3)))}
      ),

      ifTailParser = memo $ eta syntax(
      -kFi {Skip} |
      -kElse seqq -kFi |
      kElif e=exp kThen s1=seqq s2=ifTailParser {If (e, s1, s2)}
      ),

      seqq = memo $ eta syntax (stmt | s1=stmt s[";"] s2=seqq {Seq(s1, s2)});  
        
-- Public top-level parser
public parse = stmt;
             
