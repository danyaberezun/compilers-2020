-- Parser 
import Matcher;
import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      
      apply = fun (l, op, r) {Binop(op, l, r)},
      
      ops = {
      	      [Left, [s("!!"), apply] : {}],
      	      [Left, [s("&&"), apply] : {}],
      	      [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), apply] : {}],
      	      [Left, [s("+") | s("-"), apply] : {}],
      	      [Left, [s("*") | s("/") | s("%"), apply] : {}]
      	    },
      
      exp = memo $ eta expr(ops, primary);

local stmt = memo $ eta syntax(
	
	      kWrite x = inbr[s("("), exp, s(")")] {Write(x)} |
	      
	      kRead x = inbr[s("("), lident, s(")")] {Read(x)} |
	      
	      x = lident s[":="] y = exp {Assn(x, y)} |
	      
	      x = stmt s[";"] y = stmt end {Seq(x, y)} |
	      
	      kSkip {Skip});
   

-- Public top-level parser
public parse = stmt;
             
