-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),

      binOps = fun(l, op, r) {Binop(op, l, r)},
      ops = {
		[Left, [s ("!!"), binOps] : {}],
		[Left, [s ("&&"), binOps] : {}],
		[Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binOps] : {}],
		[Left, [s ("+") | s ("-"), binOps] : {}],
		[Left, [s ("*") | s ("/") | s ("%"), binOps] : {}]},
      exp = memo $ eta expr (ops, primary);

local stmt = memo $ eta syntax (
  	kWrite x=inbr[s("("), exp, s(")")]    {Write (x)}               |
  	kRead  x=inbr[s("("), lident, s(")")] {Read (x)}                |
  	x=lident s[":="] y=exp                {Assn (x, y)}             |
  	st1=stmt s[";"] st2=stmt end          {Seq (st1, st2)}          |
	kSkip {Skip} 					                |
	kIf cond=exp kThen st1=stmts st2=parselse  {If(cond, st1, st2)} |
	kWhile cond=exp st=inbr[kDo, stmts, kOd] {While (cond, st)}     |
	kRepeat s=stmts kUntil cond=exp  {Repeat (s, cond)}             |
	kFor st1=stmts s[","] cond=exp s[","] st2=stmts body=inbr[kDo, stmts, kOd] {Seq (st1, While(cond, Seq(body, st2)))});

local stmts = memo $ eta syntax (
	   stmt |
	   st1=stmt s[";"] st2=stmts {Seq(st1, st2)});

local parselse = memo $ eta syntax(
       -kFi {Skip}       |
       -kElse stmts -kFi |
       -kElif cond=exp kThen st1=stmts st2=parselse {If(cond, st1, st2)});
   

-- Public top-level parser
public parse = stmt;