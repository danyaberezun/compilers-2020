-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binOps = fun(l, op, r) {Binop(op, l, r)},
      ops = {
		[Left, [s ("!!"), binOps] : {}],
		[Left, [s ("&&"), binOps] : {}],
		[Nona, [s ("<") | s (">") | s ("<=") | s (">=") | s ("==") | s ("!="), binOps] : {}],
		[Left, [s ("+") | s ("-"), binOps] : {}],
		[Left, [s ("*") | s ("/") | s ("%"), binOps] : {}]},
      exp = memo $ eta expr (ops, primary) ;

local stmt = memo $ eta syntax (
  	kWrite x=inbr[s("("), exp, s(")")]    {Write (x)}     |
  	kRead  x=inbr[s("("), lident, s(")")] {Read (x)}      |
  	x=lident s[":="] y=exp                {Assn (x, y)}   |
  	st1=stmt s[";"] st2=stmt end          {Seq (st1, st2)}
);

-- Public top-level parser
public parse = stmt;