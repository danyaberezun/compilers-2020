-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }
  -- fprintf (stderr, "Expand scope defs: ""%s"" ", defs.string);

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

-- checkpoint debug parser
fun checkpoint(i) {
 syntax(token[""] { fprintf(stderr, "Checkpoint %s\n", i.string) })
}

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
                                    loc=pos kRead x=inbr[s("("), lident, s(")")]      {  fun(a) { assertVoid (a, Read  (x),      loc) } } |
                                    loc=pos kWrite y=inbr[s("("), exp, s(")")]        {  fun(a) { assertVoid (a, Write (y(Val)), loc) } } |
                                    loc=pos kSkip                                     {  fun(a) { assertVoid (a, Skip, loc)           } } |
                                    loc=pos kIf cond=exp kThen s1=exp s2=ifTailParser {  fun(a) { If (cond(Val), s1(a), s2(a))        } } |
                                    loc=pos kWhile cond=exp kDo s=scopeExpr kOd             {  fun(a) {assertVoid (a, While  (cond(Val), s(Void)), loc) } } |
                                    loc=pos kRepeat s=scopeExpr kUntil cond=primary      {  case s(Void) of
                                                            Scope(defs, s) -> fun(a) {assertVoid (a, Scope(defs, Repeat (s, cond(Val))), loc) }
                                                          esac } |
                                    loc=pos kFor e1=scopeExpr s[","] e2=exp s[","] e3=exp kDo s=scopeExpr kOd
                                       {  case e1(Void) of
                                           Scope(defs, e1) -> fun (a) { assertVoid(a, Scope(defs, Seq (e1, While(e2(Val), Seq(s(Void), e3(Void))))), loc) }
                                          esac } |
                                    -- nested expressions
                                    inbr[s("("), exp, s(")")] |
                                    -- nested scopes
                                    inbr[s("{"), scopeExpr, s("}")]
                                    ),
           ifTailParser = memo $ eta syntax(loc=pos -kFi              { fun(a) { case a of
                                                                                   Void -> Skip
                                                                                 | Weak -> Skip
                                                                                 | Ref  -> error ("'else' branch is needed for reference", loc)
                                                                                 | Val  -> error ("'else' branch is needed for value",     loc)
                                                                                  esac } } |
                                            loc=pos -kElse e=exp -kFi { fun(a) { e(a) } }  |
                                            kElif cond=exp kThen s1=exp s2=ifTailParser { fun(a) { If (cond(Val), s1(a), s2(a)) } }
                                            ),
      scopeExpr = syntax (-s[""] se=scopeExprAdv { fun (a) { se (a, {})} }),
      scopeExprAdv = memo $ eta (syntax ( d=decl se=scopeExprAdv {fun (a, decls) { se(a, d:decls)}}
                                        | expr=exp? { fun (a, decls) { expandScope(decls, case expr of Some(ee) -> ee (a) | None -> Skip esac) } }  )),
      decl = memo $ eta ( syntax ( loc=pos kLocal locals=list[declVar] s[";"] { Local(locals) }
                                 | loc=pos kFun name=lident
                                                args=inbr[s("("), list0(syntax(lident)), s(")")]
                                                body=inbr[s("{"), scopeExpr, s("}")]
                                                { Fun(name, args, body(Weak)) }
                                 )),
      declVar = memo $ eta (syntax (name=lident expr=(-s["="] basic)? { case expr of
                                                                              None     -> [name, None]
                                                                            | Some (e) -> [name, Some(e(Val))]
                                                                        esac
                                                                       })),
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
