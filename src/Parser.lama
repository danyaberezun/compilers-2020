-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"

fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (decimal @ fun (x) {Const (stringInt (x))} |
                                   lident  @ fun (x) {Var (x)}  |
                                   inbr[s("("), exp, s(")")]),
      binop = fun (l, op, r) {Binop(op,l,r)},
      ops = {[Left, [s ("!!"), binop] :{}],
             [Left, [s ("&&"), binop] : {}],
             [Nona, [s ("<") | s (">") | s (">=") |s ("<=") |s ("==") | s ("!="), binop] : {}],
             [Left, [s ("+") | s ("-"), binop] : {}],
             [Left, [s ("*") | s ("/") | s ("%"), binop] : {}]}, 
      exp = memo $ eta expr (ops, primary);

local stmt = memo $ eta syntax (
   kWrite x = inbr[s("("), exp, s(")")]    {Write(x)} |
   kRead  x = inbr[s("("), lident, s(")")] {Read(x)}  |
   x = lident s[":="] y = exp              {Assn(x,y)} |
   x1 = stmt s[";"] x2 = stmt end          {Seq(x1, x2)}| 
   kSkip {Skip}
   );
  

-- Public top-level parser
public parse = stmt;
