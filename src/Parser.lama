-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(l, op, r) {
  Binop (op, l, r)
}

fun prepare(str) {
  [s(str), binop]
}

local operators = {
  [Left, map(prepare, singleton ("!!"))],
  [Left, map(prepare, singleton ("&&"))],
  [Nona, map(prepare, {"==", "!=", "<", "<=", ">=", ">"})],
  [Left, map(prepare, {"+", "-"})],
  [Left, map(prepare, {"*", "/", "%"})]
};

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      
	  exp = memo $ eta (expr(operators, primary));

local simpleStatement = memo $ eta syntax (
  kSkip { Skip }         
  | x=lident s[":="] e=exp { Assn (x, e) } 
  | kRead x=inbr[s("("), lident, s(")")] { Read (x) } 
  | kWrite e=inbr[s("("), exp, s(")")] { Write (e) } 
);

local separator = singleton (
   [Left, singleton ([token (";"), fun (l, op, r) {Seq (l, r)}])]
);

local stmt = memo $ eta (expr(separator, simpleStatement));

-- Public top-level parser
public parse = stmt; 
             
