-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
    -- decimal constant
    loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}} |

    -- identifier
    x=lident {fun (a) {
        case a of
            Ref  -> Ref (x) |
            Void -> Ignore (Var (x)) |
            _    -> Var (x)
        esac
      }
    } |
    loc=pos kSkip {fun (a) {assertVoid (a, Skip, loc)}} |
    loc=pos kRead x=inbr[s("("), lident, s(")")] {fun (a) {assertVoid(a, Read (x), loc)}} |
    loc=pos kWrite x=inbr[s("("), exp, s(")")] {
      fun (a) {assertVoid(a, Write (x (Val)), loc)}
    } |
    loc=pos kWhile cond=exp kDo st=exp kOd {
      fun (a) {assertVoid(a, While (cond (Val), st (Void)), loc)}
    } |
    loc=pos kRepeat st=exp kUntil cond=basic {
      fun (a) {assertVoid(a, Repeat (st (Void), cond (Val)), loc)}
    } |
    loc=pos kIf cond=exp kThen s1=exp s2=elseBranch {
      fun (a) {If (cond (Val), s1(a), s2(a))}
    } |
    loc=pos kFor init=exp s[","] cond=exp s[","] step=exp kDo body=exp kOd {
      fun (a) {
        assertVoid(a, Seq (init (a), While (cond (Val), Seq (body (Void), step (Void)))), loc)
      }
    } |
    inbr[s("("), exp, s(")")])
  ,
  elseBranch = memo $ eta syntax (
      loc=pos kFi {fun (a) {assertVoid (a, Skip, loc)}} |
      -kElse exp -kFi |
      kElif cond=exp kThen s1=exp s2=elseBranch {
        fun (a) {If (cond (Val), s1 (a), s2 (a))}
      }
    ),
  basic = memo $ eta (expr ({
      [Right, singleton ([s (":="), fun (l, loc, r) {
          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
        }])],
      [Left , map (binop, singleton ("!!"))],
      [Left , map (binop, singleton ("&&"))],
      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
      [Left , map (binop, {"+", "-"})],
      [Left , map (binop, {"*", "/", "%"})]
    }, primary)),
  exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
