-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun opHelper(op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

local oprts = {
  [Left, opHelper("!!") : {}],
  [Left, opHelper("&&") : {}],
  [Nona, {opHelper("=="), opHelper("!="), opHelper("<"), opHelper("<="), opHelper(">"), opHelper(">=") }],
  [Left, {opHelper("+"), opHelper("-") }],
  [Left, {opHelper("*"), opHelper("/"), opHelper("%") }]
  };

-- Primary expression
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident  @ fun (x) {Var (x)} |
                            inbr (s ("("), exp, s (")"))),
      exp = memo $ eta expr (oprts, primary);

local ifHelper = memo $ eta syntax (x=exp kThen tr=seqStmt fls=(-kElse seqStmt -kFi | -kElif ifHelper | kFi {Skip}) {If (x, tr, fls)});

local stmt = memo $ eta syntax (x=kSkip {Skip} | 
                                x=lident s[":="] e=exp {Assn (x, e)} |
                                kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                                kWrite x=inbr[s("("), exp, s(")")] {Write (x)} |
                                kWhile x=exp kDo y=seqStmt kOd {While (x, y)} |
                                kFor i=stmt s[","] x=exp s[","] y=stmt kDo st=seqStmt kOd {Seq (i, While (x, Seq (st, y)))} |
                                kRepeat st=seqStmt kUntil x=exp {Repeat (st, x)} |
                                -kIf ifHelper
                                );

local seqStmt = memo $ eta syntax (s1=seqStmt s[";"] s2=stmt {Seq (s1, s2)} | stmt);
   

-- Public top-level parser
public parse = seqStmt;
