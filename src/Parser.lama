-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                      loc=pos kRead x=inbr[s("("), lident, s(")")] { fun (a) {assertVoid(a, Read(x(Ref)), loc)} } |
                                      loc=pos kWrite e=inbr[s("("), exp, s(")")] { fun(a) { assertVoid(a, Write(e(Val)), loc) } } |
                                      loc=pos kSkip {fun(a) {assertVoid(a, Skip, loc)} } |
                                      
                                      kIf c=exp kThen s=exp ot=elifStmt kFi {fun(a) {If(c(Val), s(a), ot(a))} } |
                                      loc=pos kIf c=exp kThen s = exp kFi {fun(a) {assertVoid(a, If(c(Val), s(Void), None), loc)}} |
                                      loc=pos kWhile c=exp kDo s=exp kOd {fun(a) { assertVoid(a, While(c(Val), s(Void)), loc)} }|
                                      loc=pos kFor i=exp s[","] c=exp s[","] s=exp kDo ot=exp kOd 
                                          {fun(a) { assertVoid(
                                                              a, 
                                                              Seq(i(Void), While(c(Val), Seq(ot(Void), s(Void)))), 
                                                              loc
                                                              ) 
                                                  } 
                                          }|
                                      loc=pos kRepeat s=exp kUntil c=exp { fun(a) { assertVoid(a, Rep(s(Void), c(Val)), loc) } }
      ),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});

local elifStmt = syntax (
  kElif e=exp kThen s=exp ot=elifStmt {fun(a) { If(e(Val), s(a), ot(a))} } |
  loc=pos kElif e=exp kThen s=exp {fun(a) { assertVoid(a, If(e(Val), s(Void), e(Void)), loc) }} |
  kElse s=exp { fun(a) {s(a)} }
);