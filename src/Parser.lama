-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binop = fun (l, op, r) {Binop(op, l, r)},
      ops = {[Left, [s("!!"), binop] : {}],
             [Left, [s("&&"), binop]: {}],
             [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}],
             [Left, [s("+") | s("-"), binop] : {}],
             [Left, [s("*") | s("/") | s("%"), binop] : {}]},
      exp = memo $ eta expr(ops, primary);
local stmt = memo $ eta syntax (
       kWrite x = inbr[s("("), exp, s(")")] {Write(x)} |
       kRead x = inbr[s("("), lident, s(")")] {Read(x)} |
       x = lident s[":="] y = exp {Assn(x, y)} |
       x = stmt s[";"] y = stmt end {Seq(x, y)} |
       kSkip {Skip}|
       kWhile e=exp kDo s=simpleStmt kOd {While (e, s)}|
       kRepeat s=simpleStmt kUntil e=exp {Repeat (s, e)}|
       kFor s1=simpleStmt s[","] e=exp s[","] s2=simpleStmt body=inbr[kDo, simpleStmt, kOd] {Seq(s1, While (e, Seq(body, s2)))}|
       kIf e=exp kThen s1=simpleStmt s2=parserIf {If (e, s1, s2)}
);

local parserIf = memo $ eta syntax (
      -kFi           {Skip} |
      -kElse simpleStmt -kFi      |
       kElif cond=exp kThen s1=simpleStmt s2=parserIf {If (cond, s1, s2)}
);
local simpleStmt = memo $ eta syntax (stmt |
       s1=stmt s[";"] s2=simpleStmt {Seq (s1, s2)});
   

-- Public top-level parser
public parse = stmt;
