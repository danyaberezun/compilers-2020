-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
                                   
      binop = fun (l, op, r) { Binop (op, l, r) },
      exp = memo $ eta expr ( 
            { 
              [Left, [s("!!"), binop] : {}],
              [Left, [s("&&"), binop]: {}],
              [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}],
              [Left, [s("+") | s("-"), binop] : {}],
              [Left, [s("*") | s("/") | s("%"), binop] : {}] 
            }, primary );

local stmt = memo $ eta syntax  (  
                                  kRead x=inbr[s("("), lident, s(")")] { Read (x) }  |
                                  kWrite ex=inbr[s("("), exp, s(")")] { Write (ex) } | 
                                  x=lident s[":="] e=exp { Assn (x, e) }             |
                                  s1=stmt s[";"] s2=stmt end { Seq (s1, s2) }        |
                                  kSkip { Skip }
                                );

-- local stmt = memo $ eta syntax ( s1=simpleStmt s[";"] s2=stmt end { Seq (s1, s2) } );

-- Public top-level parser
public parse = stmt;
             
