-- Parsering 

import Ostap;
import Lexer;
import List;
import Fun;


fun inbr (l, p, r) {
  syntax (-l p -r)
}


local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binop = fun (l, op, r) {Binop(op, l, r)},
      ops = {[Left, [s("!!"), binop] : {}],
             [Left, [s("&&"), binop]: {}],
             [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binop] : {}],
             [Left, [s("+") | s("-"), binop] : {}],
             [Left, [s("*") | s("/") | s("%"), binop] : {}]},
      exp = memo $ eta expr(ops, primary);
local stmt = memo $ eta syntax (
       kWrite x = inbr[s("("), exp, s(")")] {Write(x)} |
       kRead x = inbr[s("("), lident, s(")")] {Read(x)} |
       x = lident s[":="] y = exp {Assn(x, y)} |
       x = stmt s[";"] y = stmt end {Seq(x, y)} |
       kSkip {Skip});
   


public parse = stmt;
             
