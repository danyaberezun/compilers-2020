-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x = decimal {Const (stringInt (x))} |
                                   x = lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr({[Left,  [s("!!"), fun(l,op,r) {Binop(op, l, r)}] : {}],
							 [Left,  [s("&&"), fun(l,op,r) {Binop(op, l, r)}] : {}],
							 [Nona, {[s("<"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s(">"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("<="), fun(l,op,r) {Binop(op, l, r)}],
									 [s(">="), fun(l,op,r) {Binop(op, l, r)}],
									 [s("!="), fun(l,op,r) {Binop(op, l, r)}],
									 [s("=="), fun(l,op,r) {Binop(op, l, r)}]
									}],
							 [Left, {[s("+"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("-"),  fun(l,op,r) {Binop(op, l, r)}]
									}],
							 [Left, {[s("*"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("/"),  fun(l,op,r) {Binop(op, l, r)}],
									 [s("%"),  fun(l,op,r) {Binop(op, l, r)}]
									}]
							 }, primary) (id);

local el = memo $ eta syntax(
						kElse st = stmt kFi                                     {st}  |
						kFi                                                   {Skip}  |
						kElif x = exp kThen s1 = stmt s2 = el        {If(x, s1, s2)}
						);

local prStmt = memo $ eta syntax(
							   kWrite x = inbr[s("("), exp, s(")")]       {Write(x)}  |
							   kRead  v = inbr[s("("), lident, s(")")]     {Read(v)}  |
							   v = lident s[":="] x = exp               {Assn(v, x)}  |
							   kSkip                                          {Skip}  |
							   kWhile x = exp kDo s = stmt kOd         {While(x, s)}  |
							   kIf x = exp kThen s1 = stmt s2 = el   {If(x, s1, s2)}  |
							   kRepeat s = stmt kUntil x = exp        {Repeat(s, x)}  |
							   kFor s1 = stmt s[","] e = exp s[","] s2 = stmt kDo
								s3 = stmt kOd       {Seq(s1, While(e, Seq(s3, s2)))}
							   ),
				stmt = memo $ eta syntax(
							   s = prStmt                                        {s}  |
							   s1 = prStmt s[";"] s2 = stmt            {Seq(s1, s2)}
							   );
   

-- Public top-level parser
public parse = stmt;

