-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local primary    = memo $ eta syntax (
                                      -- array constant
                                      loc=pos x=inbr[s("["), list0(syntax (e=exp {e(Val)})), s("]")] {fun (a) {assertValue (a, Array (x), loc)}}    |

                                      -- string constant
                                      loc=pos x=strlit                                               {fun (a) {assertValue (a, String (x), loc)}}   |

                                      -- character literal
                                      loc=pos x=chrlit                                               {fun (a) {assertValue (a, Const (x), loc)}}    |

                                      -- decimal constant
                                      loc=pos x=decimal                                              {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=(lident | s["_"]) args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} |
(* Assignment *)
  inbr[s("("), exp, s(")")] |
  explicitScope |
  loc=pos kSkip { fun (a) {
    assertVoid (a, Skip, loc)
  }} |
  loc=pos kWhile x=basic kDo y=scopeExpr kOd { fun (a) {
    assertVoid (a, While (x (Val), y (Void)), loc)
  }} |
  loc=pos kFor init=scopeExpr s[","] cond=basic s[","] incr=basic kDo body=scopeExpr kOd { fun (a) {
    distributeScope(init (Void), fun (init) {
      assertVoid (a, Seq (init, While (cond (Val), Seq (body (Void), incr (Void)))), loc)
    })
  }} |
  loc=pos kRepeat body=scopeExpr kUntil cond=basic { fun (a) {
    distributeScope(body (Void), fun (body) {
      assertVoid (a, Repeat (body, cond (Val)), loc)
    })
  }} |
  loc=pos kIf cond=basic kThen body=exp kFi { fun (a) {
    assertVoid (a, If (cond (Val), body (a), Skip), loc)
  }} |
  loc=pos kIf cond=basic kThen body=exp alt=ifElif kFi { fun (a) {
    If (cond (Val), body (a), alt (a))
  }} |
  loc=pos tag=uident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? { fun (a) {
    assertValue (a, Sexp (tag, case args of
      None -> {}
    | Some(args) -> args
    esac), loc)
  }} |
  loc=pos kCase x=basic kOf branches=list0By[syntax (pattern=primary s["->"] body=exp {[pattern(Val), body]}), s("|")] kEsac { fun (a) {
    Case (x(Val), foldr (fun (branches, [pattern, body]) {
      [pattern, body(a)]:branches
    }, {}, branches +++ singleton([Var("_"), fun (a) {
      assertValue (a, Builtin ("matchfailure", {}), loc)
    }])))
  }}
),

  ifElif = memo $ eta syntax (
    -kElse exp |
    kElif cond=basic kThen body=exp alt=ifElif { fun (a) {
      If (cond (Val), body (a), alt (a))
    }}
  ),

  explicitScope = memo $ eta syntax (
    -s["{"] scopeExpr -s["}"]
  ),

(* End *)
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     postfix)),
      postfix    = memo $ eta syntax (loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))} |
                                                            -s["."] kLength {Length} |
                                                            -s["."] kString {String}
                                                           )* {fun (a) {foldl (fun (e, p) {
                                                                                 case p of
                                                                                   Length    -> fun (a) {assertValue (a, Builtin ("length", singleton (e (Val))), loc)}
                                                                                 | String    -> fun (a) {assertValue (a, Builtin ("stringval", singleton (e (Val))), loc)}
                                                                                 | Index (i) ->
                                                                                     fun (a) {
                                                                                       case a of
                                                                                         Ref -> ElemRef (e (Val), i)
                                                                                       | _   -> assertValue (a, Elem (e (Val), i), loc)
                                                                                       esac
                                                                                     }
                                                                                 esac
                                                                               }, e, ps) (a)
                                                              }}
                                     ),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e)
                                                                        esac
                                                                      } (case e of
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kLocal ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Local (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
