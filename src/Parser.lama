-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"

fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      binoper = fun (l, op, r) {Binop(op, l, r)},
      ops = {[Left, [s("!!"), binoper] : {}],
             [Left, [s("&&"), binoper]: {}],
             [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binoper] : {}],
             [Left, [s("+") | s("-"), binoper] : {}],
             [Left, [s("*") | s("/") | s("%"), binoper] : {}]},
      exp = memo $ eta expr(ops, primary);

local stmt = memo $ eta syntax (
       kWrite x = inbr[s("("), exp, s(")")] {Write(x)} |
       kRead x = inbr[s("("), lident, s(")")] {Read(x)} |
       x = lident s[":="] y = exp {Assn(x, y)} |
       x = stmt s[";"] y = stmt end {Seq(x, y)} |
       kSkip {Skip} |
	   kIf cond=exp kThen s1=smth s2=ifParser  {If (cond, s1, s2)} |
	   kWhile cond=exp kDo s=smth kOd  {While (cond, s)}   |
	   kRepeat s=smth kUntil cond=exp  {Repeat (s, cond)}  |
	   kFor s1=smth s[","] e=exp s[","] s2=smth kDo body=smth kOd {Seq (s1, While(e, Seq(body, s2)))});

local ifParser = memo $ eta syntax(
	   -kFi {Skip} |
       -kElse smth -kFi |
       -kElif cond=exp kThen s1=smth s2=ifParser {If (cond, s1, s2)});
local smth = memo $ eta syntax (
	   stmt |
	   s1=stmt s[";"] s2=smth {Seq(s1, s2)});

-- Public top-level parser
public parse = stmt;