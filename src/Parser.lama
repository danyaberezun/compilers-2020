-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

local elsePart = memo $ eta syntax (
				loc=pos kFi {fun (attr) {(*printf ("%s %s\n", attr.string, Skip.string);*)assertVoid (attr, Skip, loc)}} |
				kElse statement=exp kFi {fun (attr) {(*printf ("%s %s\n", attr.string, statement.string);*)statement(attr)}} |
				kElif condition=exp kThen statement1=exp statement2=elsePart {fun (a) {(*printf ("%s %s\n", a.string, If (condition, statement1, statement2).string);*)If (condition(Val), statement1(a), statement2(a))}}
				);

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {(*printf ("%s %s\n", a.string, Const (stringInt (x)).string);*)assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
											(*printf ("%s %s\n", a.string, x.string);*)
                                                                                                          case args of
											                    None -> case a of
                                                                                                                      Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                    esac
											                    | Some (args) -> assertValue (a, Call (x, args))
                                                                                                          esac
(* Assignment *)
                                                                                      }} |
				    inbr[s ("("), exp, s (")")]                          |
				    inbr[s ("{"), scopeExpr, s ("}")]                    |
                                    loc=pos kRead x=inbr[s("("), lident, s(")")] {fun (attr) {(*printf ("%s %s\n", attr.string, Read (x).string);*) assertVoid (attr, Read (x), loc)}}           |
                                    loc=pos kWrite e=inbr[s("("), exp, s(")")] {fun (attr) {(*printf ("%s %s\n", attr.string, Write (e).string);*) assertVoid (attr, Write (e(Val)), loc)}}       |
                                    loc=pos kSkip {fun (attr) {(*printf ("%s %s\n", attr.string, Skip.string);*)assertVoid (attr, Skip, loc)}}                                         |
	                           --  loc=pos kIf condition=exp kThen statement1=exp kFi {If (condition, statement1, Skip)}   |
                                    loc=pos kIf condition=exp kThen statement1=exp statement2=elsePart {fun (attr) 
					{(*printf ("%s %s\n", attr.string, If (condition, statement1, statement2).string);*)If (condition(Val), statement1(attr), statement2(attr))}} |
                                    loc=pos kWhile condition=exp kDo statement=scopeExpr kOd 
					{fun (attr) {(*printf ("%s %s\n", attr.string, While (condition, statement).string);*)assertVoid (attr, While (condition(Val), statement(Void)), loc)}}                           |
                                    loc=pos kRepeat statement=scopeExpr kUntil condition=primary 
					{fun (attr) {(*printf ("%s %s\n", attr.string, Repeat (statement, condition).string);*)
							case statement(Void) of
								Scope (declarations, expression) -> assertVoid (attr, Scope (declarations, Repeat (expression, condition(Val))), loc)
							esac }}                              |
                                    loc=pos kFor declaration=scopeExpr s[","] condition=exp s[","] change=exp kDo statement=scopeExpr kOd 
				{fun (attr) {(*printf ("%s %s\n", attr.string, Seq (declaration, While (condition, Seq (statement, change))).string);*)
				case declaration(Void) of
					Scope (declarations, expression) -> assertVoid (attr, Scope (declarations, Seq (expression, While (condition(Val), Seq (statement(Void), change(Void))))), loc)
				esac }} ),
				    local_tail = memo $ eta syntax (
								x=lident { singleton([x, None]) } |
								x=lident s[","] tail=local_tail { ([x, None]):{} +++ tail } |
								x=lident s["="] value=basic { [x, Some(value(Val))]:{} } |
								x=lident s["="] value=basic s[","] tail=local_tail { [x, Some(value(Val))]:{} +++ tail }
								),
				    def = memo $ eta syntax (
								kLocal def_part=local_tail s[";"]  { Local (def_part) } |
								kFun name=lident arguments=inbr[s("("), list0 (lident) , s(")")] body=inbr[s("{"), scopeExpr, s("}")] {Fun (name, arguments, body(Weak))}
								),
				    scopeExpr = memo $ eta syntax (
								definitions=rep[def] e=exp {fun (attr) {(*printf ("%s", definitions.string);*)expandScope (definitions, e(attr))}} |
								definitions=rep[def] {fun (attr) {(*printf ("%s", definitions.string);*)expandScope (definitions, Skip)}} |
								e=exp {fun (attr) {(*printf ("%s", e.string);*)expandScope ({}, e(attr))}} 
								),
(* End *)
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {(*printf ("%s %s\n", a.string, Assn (l, r).string);*)assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {(*printf (" %s %s\n", a.string, Seq (s1 , s2).string);*)Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
