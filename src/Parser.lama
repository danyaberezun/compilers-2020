-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = {
        
        fun textOp (l, op, r) {
          Binop (op, l, r)
        }
        local ops = map (
          fun ([assoc, opReprs]) {
            [assoc, map (
              fun (opRepr) { [s(opRepr), textOp] },
              opReprs
            )]
          },
          {
            [Left, "!!" : {}],
            [Left, "&&" : {}],
            [Nona, {"==", "!=", "<", "<=", ">", ">="}],
            [Left, {"+", "-"}],
            [Left, {"*", "/", "%"}]
          }
        );

        memo $ eta expr (ops, primary) (id) -- TODO: change? 
      };

local simpleStmt = memo $ eta syntax (
  kRead id=inbr[s("("), lident, s(")")] { Read (id) } |
  kWrite e=inbr[s("("), exp, s(")")] { Write (e) }    |
  kSkip { Skip }                                      |
  id=lident s[":="] e=exp { Assn (id, e) }            
);

local stmt = memo $ eta syntax (
  s1=simpleStmt s[";"] s2=stmt { Seq (s1, s2) } |
  simpleStmt
);
   
-- Public top-level parser
public parse = stmt;
             
