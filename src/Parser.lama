-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

infixl |- before : (type, val) {
  fun (a) { 
    case type of 
      Void (loc) -> assertVoid(a, val, loc)
    | Val (loc)  -> assertValue(a, val, loc)
    | Ref (loc)  -> failure ("NIMP")
    esac
  }
}

local primary  = memo $ eta syntax ( loc=pos x=decimal                            { Val (loc) |- Const (stringInt (x)) }
                                   | x=lident                                     {fun (a) {
                                                                                     case a of
                                                                                       Ref  -> Ref (x)
                                                                                     | Void -> Ignore (Var (x))
                                                                                     | _    -> Var (x)
                                                                                     esac
                                                                                   }
                                                                                  }
                                   | inbr[s ("("), exp, s (")")]                                         
                                   | loc=pos kSkip                                { Void (loc) |- Skip                         }         
                                   | loc=pos kRead x=inbr[s("("), lident, s(")")] { Void (loc) |- Read (x)                     } 
                                   | loc=pos kWrite e=inbr[s("("), exp,   s(")")] { Void (loc) |- Write (e(Val))               } 
                                   | loc=pos kWhile e=exp kDo st=exp kOd          { Void (loc) |- While (e(Val), st(Void))     }
                                   | loc=pos kIf e=exp kThen s1=exp s2=elseStmt kFi       
                                                                                  { fun (a) { If (e(Val), s1(a), s2(a)) }      }
                                   | loc=pos kRepeat st=exp kUntil e=primary      { Void (loc) |- Repeat (st(Void), e(Val))    }
                                   | loc=pos kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd                  
                                                                                  { Void (loc) |- Seq (s1(Void), 
                                                                                                       While (e(Val), 
                                                                                                              Seq (s3(Void), 
                                                                                                                   s2(Void)))) }
                                   ),

      elseStmt = memo $ eta syntax ( loc=pos kElif e=exp kThen s1=exp s2=elseStmt { fun (a) { If (e(Val), s1(a), s2 (a)) } }
                                   | loc=pos kElse s=exp                          { eta (s)                                }
                                   | loc=pos empty                                { Void (loc) |- Skip                     }
                                   ),
                                   
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="), fun (l, loc, r) { Val (loc) |- Assn (l (Ref), r (Val)) } ])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
