-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun addDefinitionLineToScope (defLine, expr, exprConstructor) {
  case expr of
    Scope (defs, body) ->
      case expandScope (singleton(defLine), Skip) of
        Scope ({d}, inits) -> Scope (d:defs, Seq(inits, exprConstructor (body)))
      esac
  esac
}

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args), loc)
                                                                                                            esac
                                                                                                         }} |
(* Assignment *)
                                    -- read
                                    loc=pos kRead s["("] name=lident s[")"] {fun (a) {assertVoid (a, Read (name), loc)}} |
                                    -- write
                                    loc=pos kWrite s["("] value=exp s[")"] {fun (a) {assertVoid (a, Write (value (Val)), loc)}} |
                                    -- skip
                                    loc=pos kSkip {fun (a) {assertVoid (a, Skip, loc)}} |
                                    -- if statement
                                    ifParser |
                                    -- while
                                    loc=pos kWhile cond=exp kDo body=scopeExpr kOd {
                                      fun (a) {
                                        assertVoid (a, While (cond (Val), body (Void)), loc)
                                      }
                                    } |
                                    -- for
                                    loc=pos kFor maybeDefLine=varDefLineParser? init=exp s[","] cond=basic s[","] act=basic kDo body=scopeExpr kOd {
                                      fun (a) {
                                        local forConstructor = fun (e) {
                                          Seq (init (Void), While (cond (Val), Seq (e, act (Void))))
                                        };
                                        assertVoid (
                                          a,
                                          case maybeDefLine of
                                            Some (defLine) ->
                                              addDefinitionLineToScope (defLine, body (Void), forConstructor)
                                          | None ->
                                            distributeScope (body (Void), forConstructor)
                                          esac
                                          ,
                                          loc
                                        )
                                      }
                                    } |
                                    -- repeat
                                    loc=pos kRepeat body=scopeExpr kUntil cond=basic {
                                      fun (a) {
                                        assertVoid (
                                          a,
                                          distributeScope (
                                            body (Void),
                                            fun (e) {
                                              Repeat (e, cond (Val))
                                            }
                                          ),
                                          loc
                                        )
                                      }
                                    } |
                                    inbr[s("("), exp, s(")")] |
                                    scopeExprInBr),
      ifParser = memo $ eta syntax (kIf body=ifBody {body}),
      ifBody   = memo $ eta syntax (cond=exp kThen thn=exp els=ifCont {fun (a) {If (cond (Val), thn (a), els (a))}}),
      ifCont   = memo $ eta syntax (kFi {fun (a) {Skip}} |
                                    kElif body=ifBody {body} |
                                    kElse body=exp kFi {body}),
      scopeExpr = memo $ eta (syntax (loc=pos defs=defParser* maybeBody=exp? {
       fun (a) {
         case maybeBody of
           Some (body) -> expandScope (defs, body (a))
         | None        -> assertVoid (a, Scope({}, Skip), loc)
         esac
       }
      })),
      scopeExprInBr = memo $ eta (syntax(inbr[s("{"), scopeExpr, s("}")])),
      defParser = memo $ eta (syntax (varDefLineParser | funDefParser)),
      varDefLineParser = memo $ eta (syntax (kLocal defs=list[varDefParser] s[";"] { Local (defs) })),
      varDefParser = memo $ eta (syntax (name=lident maybeInit=initParser? {
        case maybeInit of
          Some (init) -> [name, Some (init (Val))]
        | None -> [name, None]
        esac
      })),
      initParser = memo $ eta (syntax (-s["="] basic)),
      funDefParser = memo $ eta (syntax (
        kFun name=lident args=inbr[s("("), list0(lident), s(")")] body=scopeExprInBr {
          Fun (name, args, body (Weak))
        }
      )),
(* End *)
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
