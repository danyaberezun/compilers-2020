-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}
local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)
-- fprintf(stderr, "State machine code: %s\n", code.string);

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    loc=pos kRead x=inbr[s("("), lident, s(")")]      {  fun(a) { assertVoid (a, Read  (x),      loc) } } |
                                    loc=pos kWrite y=inbr[s("("), exp, s(")")]        {  fun(a) { assertVoid (a, Write (y(Val)), loc) } } |
                                    loc=pos kSkip                                     {  fun(a) { assertVoid (a, Skip, loc)           } } |
                                    loc=pos kIf cond=exp kThen s1=exp s2=ifTailParser {  fun(a) { If (cond(Val), s1(a), s2(a))        } } |
                                    loc=pos kWhile cond=exp kDo s=exp kOd             {  fun(a) {assertVoid (a, While  (cond(Val), s(Void)), loc) } } |
                                    loc=pos kRepeat s=exp kUntil cond=primary         {  fun(a) {assertVoid (a, Repeat (s(Void), cond(Val)), loc) } } |
                                    loc=pos kFor e1=exp s[","] e2=exp s[","] e3=exp kDo s=exp kOd
                                       { fun (a) { assertVoid(a, Seq (e1(Void), While(e2(Val), Seq(s(Void), e3(Void)))), loc) } } |
                                    -- nested expressions
                                    inbr[s("("), exp, s(")")]
                                    ),
           ifTailParser = memo $ eta syntax(loc=pos -kFi              { fun(a) { case a of
                                                                                   Void -> Skip
                                                                                 | Ref -> error ("'else' branch is needed for reference", loc)
                                                                                 | Val -> error ("'else' branch is needed for value",     loc)
                                                                                  esac } } |
                                            loc=pos -kElse e=exp -kFi { fun(a) { e(a) } }  |
                                            kElif cond=exp kThen s1=exp s2=ifTailParser { fun(a) { If (cond(Val), s1(a), s2(a)) } }
                                            ),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
