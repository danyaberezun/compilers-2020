-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;


-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression

-- косяк: если поставить {obj}, то это будет не лист, а скоуп
-- (не забыть про это)
-- obj:{} - list с 1 объектом
-- singleton(obj) -> то же самое, почему я это только щас узнал
-- fun arrayList (a)
-- Converts an array to list (preserving the order of elements).

local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident {Var (x)}                |
                                   inbr[s("("), exp, s(")")]),

	binop = fun (l, op, r) {Binop(op, l, r)},  -- does the var names affect the runtime?

	ops = {[Left, [s("&&"), binop] : {}],
	  	   [Left, [s("!!"), binop] : {}],
	  	   [Nona, [s("<") | s(">") | s("<=") | s(">=") |  s("==") | s("!="), binop] : {}],
	  	   [Left, [s("+") | s("-"), binop] : {}],
	  	   [Left, [s("*") | s("/") | s("%"), binop] : {}]},

    exp = memo $ eta expr (ops, primary);


local stmt = memo $ eta syntax (
	kRead x = inbr[s("("), lident, s(")")] {Read(x)}  |
	kWrite x = inbr[s("("), exp, s(")")] {Write(x)}   |
	x = lident s[":="] y = exp        {Assn(x, y)}    |
	x1 = stmt s[";"] x2 = stmt end    {Seq(x1, x2)}   
	);
   

-- -- Public top-level parser
public parse = stmt;
