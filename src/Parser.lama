-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), expr, s(")")]),
      mult = memo $ eta syntax (primary | l=mult op=(s["*"] | s["/"] | s["%"]) r=primary{Binop(op, l, r)}),
      sum = memo $ eta syntax (mult | l=sum op=(s["+"] | s["-"]) r=mult{Binop(op, l, r)}),
      comp = memo $ eta syntax (sum | l=sum op=(s["<"] | s["<="] | s[">"] | s[">="] | s["=="] | s["!="]) r=sum{Binop(op, l, r)}),
      conj = memo $ eta syntax (comp | l=conj op=s["&&"] r=comp{Binop(op, l, r)}),
      disj = memo $ eta syntax (conj | l=disj op=s["!!"] r=conj{Binop(op, l, r)}),
      expr = memo $ eta syntax (disj);

local stmt = memo $ eta syntax(
	kRead  x=inbr[s["("], lident, s[")"]] { Read(x)} |
	kWrite x=inbr[s["("], expr, s[")"]] {Write(x)} |
	x=lident s[":="] e=expr{Assn(x, e)} |
	s1=stmt s[";"] s2=stmt end {Seq(s1, s2)}
	);
   

-- Public top-level parser
public parse = stmt;
             
