-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression

fun binOpop(l, op, r) {
  Binop (op, l, r)
}

local oper = {[Left, [s("!!"), binOpop] : {}],
             	[Left, [s("&&"), binOpop]: {}],
             	[Nona, [s("==") | s("!=") | s("<") | s(">") | s(">=") | s("<="), binOpop] : {}],
             	[Left, [s("+") | s("-"), binOpop] : {}],
             	[Left, [s("*") | s("/") | s("%"), binOpop] : {}]
};

local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr(oper, primary);

local stmt = memo $ eta syntax (
		kWrite x = inbr[s("("), exp, s(")")] {Write(x)}  |
		kRead x = inbr[s("("), lident, s(")")] {Read(x)} |
		x = lident s[":="] y = exp {Assn(x, y)}          |
		x1 = stmt s[";"] y1 = stmt end {Seq(x1, y1)}     
);
   

-- Public top-level parser
public parse = stmt;
             
