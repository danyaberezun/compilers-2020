-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

fun getart (atr) {
  case atr of
    P (atr, def) -> atr
  | _ -> atr
  esac
}

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case getart (atr) of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case getart (atr) of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, 
                            case a of
                              P (a, defs) -> Binop (op, l (P (Val, defs)), r (P (Val, defs)))
                            | _ -> Binop (op, l (Val), r (Val))
                            esac, loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

fun list0w (item) {
  list0By (item, s (rWhiteSpace))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

fun in (el, list) {
  case list of
    h : t -> if compare (el, h) == 0 then 1 else in (el, t) fi
  | {}    -> 0
  esac
}

fun undup (list) {
  case list of
    h : t -> if in (h, t) then undup (t) else h : (undup (t)) fi
  | {}    -> {} 
  esac
}

fun foo (list, val) {
  case list of
    h : t -> h (val) : foo (t, val)
  | {} -> {}
  esac
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

fun expatt (pa, a) {
  case pa of
    P (_, defs) -> P (a, defs)
  | _ -> a
  esac
}
 
local primary    = memo $ eta syntax (
  -- array constant
  loc=pos x=inbr[s("["), list0(exp), s("]")] {fun (a) {assertValue (a, Array (foo(x, expatt (a, Val))), loc)}}    |

  -- S-expression
  loc=pos name=uident x=inbr[s("("), list(exp) , s(")")]?
    {fun (a) {assertValue (a, Sexp (name, case x of None -> {} | Some (x) -> foo (x, expatt (a, Val)) esac), loc)}} |
  
  -- string constant
  loc=pos x=strlit                                               {fun (a) {assertValue (a, String (x), loc)}}   |
  
  -- character literal
  loc=pos x=chrlit                                               {fun (a) {assertValue (a, Const (x), loc)}}    |
  
  -- decimal constant
  loc=pos x=decimal                                              {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

  -- identifier
  x=lident args=inbr[s("("), list0(exp), s(")")]? {fun (a) { --printf("%s, %s\n", a.string, x);
                                                                        case args of
                                                                          None -> case a of
                                                                                    Ref  -> Ref (x)
                                                                                  | Void -> Ignore (Var (x))
                                                                                  | P (art, def) ->
                                                                                    case art of
                                                                                      Ref -> Ref (
                                                                                        if in (Local (("pattern_" ++ x) :{}), def) 
                                                                                        then ("pattern_" ++ x)
                                                                                        else x
                                                                                        fi)                                                                  
                                                                                    | Void -> Ignore (Var (
                                                                                        if in (Local (("pattern_" ++ x) :{}), def) 
                                                                                        then ("pattern_" ++ x)
                                                                                        else x
                                                                                        fi 
                                                                                    ))
                                                                                    | _ -> Var (
                                                                                        if in (Local (("pattern_" ++ x) :{}), def) 
                                                                                        then ("pattern_" ++ x)
                                                                                        else x
                                                                                        fi   
                                                                                    )
                                                                                    esac
                                                                                  | _    -> Var (x)
                                                                                  esac
                                                                        | Some (args) -> 
                                                                          assertValue (a, Call (x, foo (args, expatt (a, Val))))
                                                                        esac
                                                                      }} |
(* Assignment *)
  loc=pos e=inbr[s("("), exp, s(")")]          {fun (a) {e (a)}}                                              |
  loc=pos e=inbr[s("{"), scopeExpr, s("}")]    {fun (a) {e (a)}}                                              |
  loc=pos kSkip                                {fun (a) {assertVoid (a, Skip, loc)}}                          |
  loc=pos kWhile cond=exp kDo s1=scopeExpr kOd       {fun (a) {assertVoid (a, While (cond (expatt (a, Val)), s1 (expatt (a, Void))), loc)}} |
  loc=pos kFor s1=scopeExpr s[","] e=exp s[","] s2=exp kDo s3=exp kOd 
                                               {fun (a) {
                                                case s1 (Void) of
                                                  Scope (defs, expr) -> 
                                                    assertVoid (a, Scope (defs, 
                                                                       Seq (expr, While (e (expatt (a, Val)), Seq (s3 (expatt (a, Void)), s2 (expatt (a, Void)))))
                                                      ), loc)
                                                | expr               ->
                                                    assertVoid (a, Seq (expr, While (e (expatt (a, Val)), Seq (s3 (expatt (a, Void)), s2 (expatt (a, Void))))), loc)
                                                esac
                                               }}          |
  loc=pos kRepeat s1=scopeExpr kUntil e=inbr[s("("), exp, s(")")]
                                               {fun (a) {
                                                 case s1 (expatt (a, Void)) of
                                                  Scope (defs, expr) ->
                                                    assertVoid (a, Scope (defs, Repeat (expr, e (expatt (a, Val)))), loc)
                                                 | expr ->
                                                    assertVoid (a, Repeat (expr, e (expatt (a, Val))), loc)
                                                 esac}}   |
  loc=pos kIf e=exp kThen s1=exp s2=else_exp   {fun (a) {If (e (expatt (a, Val)), s1 (a), s2 (a))}} | 
  loc=pos kCase e=exp kOf patts=pat kEsac      {fun (a) {
    case patts (a) of [defs, ps] -> Scope (undup (defs), Case (e (expatt (a, Val)), ps)) esac
    }}),
  pat = memo $ eta syntax (
    sexpr=sexp_patt s["->"] e=exp s["|"] pt=pat {fun (a) {
      case sexpr of 
        [def, p] ->
        case pt (a) of
          [defs, ps] -> [def +++ defs, [p, e(P (a, def))] : ps]
        esac
      esac
      (*case pt (a) of
        [defs, ps] -> case sexpr of [def, p] -> [def +++ defs, [p, e(P (a, def))] : ps] esac
      esac*)}} |
    sexpr=sexp_patt s["->"] e=exp {fun (a) {
      case sexpr of
        [def, p] ->  [def, [p, e(P (a, def))] : {}]
      esac
    }}),
  sexp_patt= memo $ eta syntax (
    s["_"] {[{}, Blank]}    |
    x=lident {[Local (("pattern_" ++ x) : {}) : {}, Ref ("pattern_" ++ x)]} |
    x=uident args=inbr[s("("), list(sexp_patt), s(")")]? {
      case args of
        None        -> [{}, Sexp (x, {})]
      | Some (args) -> 
        case unzip (deepFlatten (args)) of
          [deffs, args] -> [flatten (deffs), Sexp (x, args)]
        esac
      esac
    }
  ),
      else_exp = memo $ eta syntax (
  loc=pos kFi                                  {fun (a) {assertVoid (a, Skip, loc)}}  |
  loc=pos kElse s=exp kFi                      {fun (a) {s (a)}} |
  loc=pos kElif e=exp kThen s1=exp s2=else_exp {fun (a) {If (e (expatt (a, Val)), s1 (a), s2 (a))}}),
(* End *)
      basic      = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                          fun (l, loc, r) {
                                                            fun (a) {assertValue (a, Assn (l (expatt(a, Ref)), r (expatt (a,Val))), loc)}
                                                          }])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     postfix)),
      postfix    = memo $ eta syntax (loc=pos e=primary ps=(i=inbr[s("["), exp, s("]")] {Index (i (Val))} |
                                                            -s["."] kLength {Length} |
                                                            -s["."] kString {String}
                                                           )* {fun (a) {foldl (fun (e, p) {                                                                            
                                                                                 case p of                                                                                   
                                                                                   Length    -> fun (a) {assertValue (a, Builtin ("length", singleton (e (expatt(a, Val)))), loc)}
                                                                                 | String    -> fun (a) {assertValue (a, Builtin ("stringval", singleton (e (expatt(a, Val)))), loc)}
                                                                                 | Index (i) ->
                                                                                     fun (a) {
                                                                                       case a of
                                                                                         Ref -> ElemRef (e (expatt(a, Val)), i)
                                                                                       | _   -> assertValue (a, Elem (e (expatt (a, Val)), i), loc)
                                                                                       esac
                                                                                     }
                                                                                 esac                                                                            
                                                                               }, e, ps) (a)
                                                              }}
                                     ),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e) 
                                                                        esac
                                                                      } (case e of 
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kLocal ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Local (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),                                    
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {
        Seq (s1 (case a of P (a, defs) -> P (Void, defs) | _ -> Void esac), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});

local p =
  case parseString (parse |> bypass (end),
   "fun sum (x) {  case x of A (x) -> case x of A (x) -> x esac esac} (sum (A(A(5))))") of Succ (p) -> 
    p
  esac;

printf("%s\n", p.string)