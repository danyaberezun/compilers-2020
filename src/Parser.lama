-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"

fun inbr (l, p, r) {
  syntax (-l p -r)
}


fun mybinop(l, op, r) {
  Binop (op, l, r)
}


local operTable = {
  [Left, [s ("!!"), mybinop] : {}],
  [Left, [s ("&&"), mybinop] : {}],
  [Nona, [s ("==") | s ("!=") | s ("<") | s ("<=") | s (">") | s (">="), mybinop] : {}],
  [Left, [s ("+") | s ("-"), mybinop] : {}],
  [Left, [s ("*") | s ("/") | s ("%"), mybinop] : {}]
};


-- Primary expression

local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (operTable, primary);

local ifOtherPars = memo $ eta syntax(-kFi           {Skip} |
                                      -kElse seqstmt -kFi   |
                                      -kElif cond=exp kThen s1=seqstmt s2=ifOtherPars {If (cond, s1, s2)}
                                     );

local stmt = memo $ eta syntax (
  x=kSkip                                          {Skip} |
  x=lident s[":="] y=exp                    {Assn (x, y)} |
  s1=stmt s[";"] s2=stmt end               {Seq (s1, s2)} |
  kRead x=inbr[s("("), lident, s(")")]         {Read (x)} |
  kWrite x=inbr[s("("), exp, s(")")]          {Write (x)} |
  kIf cond=exp kThen s1=seqstmt s2=ifOtherPars  {If (cond, s1, s2)} |
  kWhile e=exp kDo s=seqstmt kOd             {While(e,s)} |
  kRepeat s=seqstmt kUntil cond=exp   {Repeat (s, cond)}  |
  kFor s1=seqstmt s[","] e=exp s[","] s2=seqstmt body=inbr[kDo, seqstmt, kOd] {Seq(s1,While(e,Seq(body,s2)))}
 );

local seqstmt = memo $ eta syntax (stmt | s1=stmt s[";"] s2=seqstmt {Seq(s1, s2)});


-- Public top-level parser
public parse = stmt;
