-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (val, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Local (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Local (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

infixl |- before : (type, val) {
  fun (a) { 
    case type of 
      Void (loc) -> assertVoid(a, val, loc)
    | Val (loc)  -> assertValue(a, val, loc)
    | Ref (loc)  -> failure ("NIMP")
    esac
  }
}

fun getOr(a, b) {
  case a of Some (a) -> a | None -> b esac
}

infixl <* before : (f, x) {
  case f of
    Some (f) -> Some (f (x))
  | None -> None
  esac
}

-- fun collectExprFromListOfDefs(lst) {
--   foldr (fun ([defs, expr], def))
-- }

local primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                            case args of
                                                                                                              None -> case a of
                                                                                                                        Ref  -> Ref (x)
                                                                                                                      | Void -> Ignore (Var (x))
                                                                                                                      | _    -> Var (x)
                                                                                                                      esac
                                                                                                            | Some (args) -> assertValue (a, Call (x, args))
                                                                                                            esac
                                                                                                         }} 
                                                                                                                
                                      | loc=pos kSkip                                                 { Void (loc) |- Skip                         }      
                                      | loc=pos kRead x=inbr[s("("), lident, s(")")]                  { Void (loc) |- Read (x)                     } 
                                      | loc=pos kWrite e=inbr[s("("), exp,   s(")")]                  { Void (loc) |- Write (e(Val))               } 
                                      | loc=pos kWhile e=exp kDo st=scopeExpr kOd                     { Void (loc) |- While (e(Val), st(Void))     }

                                      | loc=pos kRepeat st=scopeExpr kUntil c=primary                 { Void (loc) |- distributeScope(st(Void), fun (body) { Repeat(body, c(Val)) }) }
                                      | loc=pos kIf e=exp kThen s1=exp s2=elseStmt kFi                { fun (a) { If (e(Val), s1(a), s2(a)) }      }
                                      | loc=pos kFor i=scopeExpr s[","] c=exp s[","] d=exp kDo b=scopeExpr kOd 
                                                                                                      { Void (loc) |- distributeScope(i(Void), 
                                                                                                              fun(init) { Seq (init, While (c(Val), Seq (b(Void), d(Void)))) })
                                                                                                      }
                                      | inbr[s("("),       exp, s(")")]
                                      | inbr[s("{"), scopeExpr, s("}")]


(* Assignment *)
                                      ),
      scopeExpr = memo $ eta syntax ( defs=rep0[defExpr] e=exp { fun (a) {expandScope (defs, e(a))} } 
                                    | defs=rep0[defExpr]       { Void(loc) |- Skip }
                                    ),

      defExpr = memo $ eta (syntax  ( loc=pos kLocal ls=list[defVar] s[";"]                               { Local (ls)                 }
                                    | loc=pos kFun fn=lident args=inbr[s("("), list0(lident), s(")")]
                                                             body=inbr[s("{"),     scopeExpr, s("}")]     { Fun (fn, args, body(Weak)) }
                                    )
                           ),
      
      defVar = memo $ eta (syntax (loc=pos n=lident e=(-s["="] basic)?  { [n, e <* Val] })),

      elseStmt = memo $ eta syntax ( loc=pos kElif e=exp kThen s1=exp s2=elseStmt { fun (a) { If (e(Val), s1(a), s2 (a)) } }
                                   | loc=pos kElse s=exp                          { eta (s)                                }
                                   | loc=pos empty                                { Void (loc) |- Skip                     }
                                   ),
(* End *)
      basic    = memo $ eta (expr (  {[Right, singleton ([s (":="), fun (l, loc, r) { Val (loc) |- Assn (l (Ref), r (Val)) } ])],
                                      [Left , map (binop, singleton ("!!"))],
                                      [Left , map (binop, singleton ("&&"))],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});