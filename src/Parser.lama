-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
<<<<<<< HEAD
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
=======

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
>>>>>>> A03-straight-line-parser
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
<<<<<<< HEAD
local primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                            lident  @ fun (x) {Var (x)} |
                            inbr (s ("("), exp, s (")"))),
      exp = memo $ eta (failure ("expression parsing not implemented\n"));

local stmt = memo $ eta (failure ("statement parsing not implemented\n"));
   

-- Public top-level parser
public parse = stmt;
=======
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({	
	[Left, [s ("!!"), fun (l, op, r) {Binop(op, l, r)} ]:{}],
	[Left, [s ("&&"), fun (l, op, r) {Binop(op, l, r)} ]:{}],
	[Nona, { [s ("=="), fun (l, op, r) {Binop(op, l, r)}],
		[s ("!="), fun (l, op, r) {Binop(op, l, r)}],
		[s ("<="), fun (l, op, r) {Binop(op, l, r)}],
		[s ("<"), fun (l, op, r) {Binop(op, l, r)}],
		[s (">="), fun (l, op, r) {Binop(op, l, r)}],
		[s (">"), fun (l, op, r) {Binop(op, l, r)}] }],
	[Left, { [s ("+"), fun (l, op, r) {Binop(op, l, r)}],
	         [s ("-"), fun (l, op, r) {Binop(op, l, r)}] }],
	[Left, { [s ("*"), fun (l, op, r) {Binop(op, l, r)}],
		 [s ("/"), fun (l, op, r) {Binop(op, l, r)}],
		 [s ("%"), fun (l, op, r) {Binop(op, l, r)}] 
		}] }, primary);

local s_stmt = memo $ eta syntax (
	kSkip {Skip} |
	kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
	kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
	x=lident s[":="] e=exp {Assn(x, e)}
    );
local stmt = memo $ eta syntax (
		s_stmt |
		s1=s_stmt s[";"] s2=stmt{Seq(s1, s2)}
		);   

-- Public top-level parser
public parse = stmt;
             
>>>>>>> A03-straight-line-parser
