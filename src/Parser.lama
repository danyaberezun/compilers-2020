-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}


local elseBranch = memo $ eta syntax (
				kFi {fun (attr) {assertVoid(attr, Skip, loc)}}	|
				kElse statement=exp kFi {fun (attr) {statement(attr)}}|
				kElif condition=exp kThen statement1=exp statement2=elseBranch {fun (a) {If (condition(Val), statement1(a), statement2(a))}}
				);
				
-- Primary expression
local primary = memo $ eta syntax
			(loc = pos x = decimal {fun(a){assertValue(a, Const(stringInt(x)), loc)}}	|
			x = lident {fun(a) {case a of
						Ref 	-> Ref(x) |
						Void	-> Ignore(Var(x)) |
						_	-> Var(x) 
						esac
					}} |
			inbr[s ("("), exp, s (")")]                          |
			loc = pos kRead x=inbr[s("("), lident, s(")")] {fun(attr) {assertVoid(attr, Read (x), loc)}}	|
			loc = pos kWrite e=inbr[s("("), exp, s(")")] {fun(attr) {assertVoid(attr, Write (e(Val)), loc)}}	|
			loc = pos kSkip {fun(attr) {assertVoid(attr, Skip, loc)}} 						|
			loc = pos kIf condition=exp kThen statement1=exp statement2=elseBranch {fun(attr) {If (condition(Val), statement1(attr), statement2(attr))}} |
			loc = pos kWhile condition=exp kDo statement=exp kOd {fun(attr) {assertVoid(attr, While (condition(Val), statement(Void)), loc)}}  |
			loc = pos kRepeat statement=exp kUntil condition=exp {fun(attr) {assertVoid(attr, Repeat (statement(Void), condition(Val)), loc)}} |
			loc = pos kFor declaration=exp s[","] condition=exp s[","] change=exp kDo statement=exp kOd {fun(attr) {assertVoid(attr, Seq (declaration(Void), While (condition(Val), Seq (statement(Void), change(Void)))), loc)}} ),
	basic = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                	fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)} }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
	exp = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
