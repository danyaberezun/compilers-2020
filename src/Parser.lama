-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun makeOp(op) { 
  [s(op), fun(l, op, r) { Binop(op, l, r) }] 
}
fun makeOps(assoc, operations) { 
  [assoc, map(makeOp, operations)] 
}

local exprOps = {
  makeOps(Left, "!!":{}),
  makeOps(Left, "&&":{}),
  makeOps(Nona, {"==", "!=", "<=", "<" , ">=", ">" }),
  makeOps(Left, {"+", "-"}),
  makeOps(Left, {"*", "/", "%"})
};
-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr(exprOps, primary),
      var = memo $ eta syntax (x=lident { Var (x) });

local write = memo $ eta syntax (kWrite x=inbr[s("("),    exp, s(")")] { Write (x) }),
      read = memo $ eta syntax  (kRead  x=inbr[s("("), lident, s(")")] { Read  (x) }),
      assign = memo $ eta syntax (x=lident s[":="] e=exp { Assn (x, e) }),
      compose = memo $ eta syntax (s1=stmt s[";"] s2=stmt end { Seq(s1, s2) });

-- local stmt = memo $ eta (failure ("statement parsing not implemented\n"));
local stmt = memo $ eta syntax (compose |
                                read |
                                assign |
                                write |
                                kSkip { Skip }
                                );

-- Public top-level parser

public parse = stmt;
