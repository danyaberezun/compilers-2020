-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun opHelper(op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

local oprts = {
  [Left, opHelper("!!") : {}],
  [Left, opHelper("&&") : {}],
  [Nona, {opHelper("=="), opHelper("!="), opHelper("<"), opHelper("<="), opHelper(">"), opHelper(">=") }],
  [Left, {opHelper("+"), opHelper("-") }],
  [Left, {opHelper("*"), opHelper("/"), opHelper("%") }]
  };

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (oprts, primary) (id);

local stmt = memo $ eta syntax (x=kSkip {Skip} | 
                                x=lident s[":="] e=exp {Assn (x, e)} |
                                kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
                                kWrite x=inbr[s("("), exp, s(")")] {Write (x)} |
                                s1=stmt s[";"] s2=stmt end {Seq (s1, s2)});
   

-- Public top-level parser
public parse = stmt;
             
