-- Parser

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun operator_descriptor (str) {
  [s (str), fun (l, op, r) {Binop (op, l, r)}]
}
local operators = {
  [Left, singleton (
    operator_descriptor ("!!")
  )],
  [Left, singleton (
    operator_descriptor ("&&")
  )],
  [Nona, {
    operator_descriptor ("=="),
    operator_descriptor ("!="),
    operator_descriptor ("<="),
    operator_descriptor ("<"),
    operator_descriptor (">="),
    operator_descriptor (">")
  }],
  [Left, {
    operator_descriptor ("+"),
    operator_descriptor ("-")
  }],
  [Left, {
    operator_descriptor ("*"),
    operator_descriptor ("/"),
    operator_descriptor ("%")
  }]
};

-- Primary expression
local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident  {Var (x)}               |
                                   inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (operators, primary));

local stmt1 = memo $ eta syntax (
    kRead s["("] x=lident s[")"] {Read (x)}
  | kWrite s["("] e=exp s[")"] {Write (e)}
  | x=lident s[":="] e=exp {Assn (x, e)}
  );

local semicolon_operator = singleton (
  [Left, singleton (
    [token (";"), fun (l, op, r) {Seq (l, r)}]
  )]
);
local stmt = memo $ eta (expr (semicolon_operator, stmt1));

-- Public top-level parser
public parse = stmt;
