-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression


-- косяк: если поставить {obj}, то это будет не лист, а скоуп
-- (не забыть про это)
-- obj:{} - list с 1 объектом
-- singleton(obj) -> то же самое, почему я это только щас узнал
-- fun arrayList (a)
-- Converts an array to list (preserving the order of elements).

-- local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
--                                    x=lident {Var (x)}                |
--                                    inbr[s("("), exp, s(")")]),

-- 	binop = fun (l, op, r) {Binop(op, l, r)},  -- does the var names affect the runtime?

-- 	ops = {[Left, [s("&&"), binop] : {}],
-- 	  	   [Left, [s("!!"), binop] : {}],
-- 	  	   [Nona, [s("<") | s(">") | s("<=") | s(">=") |  s("==") | s("!="), binop] : {}],
-- 	  	   [Left, [s("+") | s("-"), binop] : {}],
-- 	  	   [Left, [s("*") | s("/") | s("%"), binop] : {}]},

--     exp = memo $ eta expr (ops, primary);


-- local stmt = memo $ eta syntax (
-- 	kRead x = inbr[s("("), lident, s(")")] {Read(x)}  |
-- 	kWrite x = inbr[s("("), exp, s(")")] {Write(x)}   |
-- 	x = lident s[":="] y = exp        {Assn(x, y)}    |
-- 	x1 = stmt s[";"] x2 = stmt end    {Seq(x1, x2)}   
-- 	);

-- local primary_stmt = memo $ eta syntax (
-- 		kSkip {Skip} |
-- 		kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
-- 		kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
-- 		x=lident s[":="] y=exp {Assn(x, y)} |
-- 		kWhile condition=exp kDo s1=stmt kOd {While(condition, s1)} |
-- 		kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq(s1, While(e, Seq(s3, s2)))} |
-- 		kRepeat s1=stmt kUntil e=exp {Repeat(s1, e)} |
-- 		kIf condition=exp kThen s1=stmt s2=else_stmt {If(condition, s1, s2)}),
-- 	else_stmt = memo $ eta syntax (
-- 			kFi {Skip} |
-- 			kElse s=stmt kFi {s} |
-- 			kElif e=exp kThen s1=stmt s2=else_stmt {If(e, s1, s2)}),
-- 	stmt = memo $ eta syntax (
-- 			primary_stmt |
-- 			elem1=primary_stmt s[";"] elem2=stmt {Seq(elem1, elem2)}
-- 		);

-- public parse = stmt;
	

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val -> error ("value expected", loc)
  | Ref -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    -- $(failure ("the rest of primary parsing in not implemented\n"))),

	    loc=pos lexpr=inbr[s("("), exp, s(")")] {fun(arg) {lexpr(arg)}} |
	    loc=pos x=decimal {fun(arg) {assertValue(arg, Const(stringInt(x)), loc)}} |
	 	x=lident {fun(arg) {case arg of
	 							Ref-> Ref(x)
	 							| Void-> Ignore(Var(x))
	 							| _-> Var(x)
	 						esac}} |
	 	loc=pos kSkip {fun(arg) {assertVoid(arg, Skip, loc)}} |
	 	loc=pos kWrite x=inbr[s("("), exp, s(")")] {fun(arg) {assertVoid(arg, Write(x(Val)), loc)}} |
	 	loc=pos kRead x=inbr[s("("), lident, s(")")] {fun(arg) {assertVoid(arg, Read(x), loc)}} |
	 	loc=pos kWhile condition=exp kDo s1=exp kOd {fun(arg) {assertVoid(arg, While(condition(Val), s1(Void)), loc)}} |
	 	loc=pos kIf expression=exp kThen s1=exp s2= else_exp {fun(arg){If(expression(Val), s1(arg), s2(arg))}} |
	 	loc=pos kFor s1=exp s[","] expression=exp s[","] s2=exp s3=exp kOd {
	 	fun(arg) {
	 	assertVoid(arg, Seq(s1(Void), While(expression(Val), Seq(s3(Void), s2(Void)))), loc)
	 }
	 } |
	 	loc=pos kRepeat s1=exp kUntil expression=inbr[s("("), exp, s(")")] {fun(arg){assertVoid(arg, Repeat(s1(Void), expression(Val)), loc)}}
	 	),
		
		else_exp= memo $ eta syntax (
		 	loc=pos kElif expression=exp kThen s1=exp s2=else_exp {fun(arg){If(expression(Val), s1(arg), s2(arg))}} |
		 	loc=pos kElse s=exp kFi {fun(arg){s(arg)}} |
		 	loc=pos kFi {fun(arg){assertVoid(arg, Skip, loc)}}
		 ),


      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),

      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});
--      exp      = memo $ eta syntax (s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}}|basic);
      

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});

