-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  -- failure ("Stmt eval not implemented\n")
	case stmt of
  			Assn(str, str2) -> return [ c[0] <- [str, evalExpr(c[0], str2)], c[1]]
  			| Seq(stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  			| Skip -> return c
      		| Read  (str) -> local rwor; rwor:= readWorld(c[1]); return [c[0] <- [str, rwor[0]], rwor[1]]
    		| Write (str) -> return [c[0], writeWorld(evalExpr(c[0], str), c[1])]
  	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}