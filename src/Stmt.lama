-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  case stmt of
    Seq (head, tail) -> eval(evalCommand(c, head), tail)
    | head -> evalCommand(c, head)
  esac
}

fun evalCommand(c, head) {
  return 
    case c of
      [state, world] -> 
        case head of
          Read(x) ->
            case readWorld(world) of
              [a, newWorld] ->   [state <- [x, a], newWorld]
            esac
        | Assn (z, expr) -> [state <- [z, evalExpr(state, expr)], world]
        | Write (expr) ->   [state, writeWorld(evalExpr(state, expr), world)]
        | w@While (expr, stmt) -> 
          case evalExpr(state, expr) of
            true ->  eval(eval(c, stmt), w)
          | false -> c
          esac
        | If (expr, ifb, elseb) -> eval(c, case evalExpr(state, expr) of
                                          true -> ifb
                                        | false -> elseb
                                        esac)
        | r@Repeat(stmt, expr) -> {
            local newC = eval(c, stmt);
            case newC of
              [newState, newWorld] ->
                case evalExpr(newState, expr) of
                  true -> newC
                | false -> eval(newC, r)
                esac
            esac
          }
        | Seq (a, b) -> eval(c, head)
        | Skip -> c
        | wat -> failure("Can't parse command: %s\n", wat.string)
        esac
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
