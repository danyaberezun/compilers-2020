-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
  case c of [state, world] ->
    case stmt of
      | Read (x)     -> 
            case readWorld (world) of 
                   [ a, new_world ] -> [ state <- [x, a], new_world] 
         esac
      | Write (expr) -> [state, writeWorld( evalExpr (state, expr)  , world)]
      | Assn (x, e)  -> [(state <- [x, evalExpr (state, e)]), world]
      | Seq (s1, s2) -> eval (eval (c, s1), s2)
      | Skip(s1)     -> c
      esac
    esac 
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
