-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Read (s) -> local ss; ss := readWorld (c[1]); [c[0] <- [s, ss[0], ss[1]]]
  | Write (expr) -> [c[0], writeWorld(evalExpr (c[0], expr), c[1])]
  | Assn (s, expr) -> [c[0] <- [s, evalExpr (c[0], expr)], c[1]]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
