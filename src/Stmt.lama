-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)


fun eval (c, stmt) 
{
  case stmt of
    Assn (x, expr)    -> return [ c[0] <- [x, evalExpr(c[0], expr)], c[1]]
  | Seq (st1, st2)     -> return eval(eval(c, st1), st2)
  | Skip               -> return c
  | Read (x)           ->
                          local result;
                          result := readWorld(c[1]);
                          return [c[0] <- [x, result[0]], result[1]]
  | Write (expr)       -> return [c[0], writeWorld(evalExpr(c[0], expr), c[1])]  
  | If (expr, s1, s2)  -> if (evalExpr(c[0], expr)) then eval (c, s1) else eval(c, s2) fi
  | While (expr, s)    -> if (evalExpr(c[0], expr)) then eval (c, Seq(s, stmt)) else eval(c, Skip) fi
  | Repeat (s, expr)   -> local c1 = eval(c, s);
                          if (evalExpr(c1[0], expr)) then eval (c1, Skip) else eval(c1, Repeat(s, expr)) fi
  esac
}

-- Evaluates a program with a given input and returns an output


public fun evalStmt (input, stmt) 
{
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}


