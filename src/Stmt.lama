-- Statement evaluator.

import State;
import Expr;
import World;
import List;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
  case stmt of
    Skip -> c
	  | Assn(x, e)  -> 	[c[0] <- [x, evalExpr(c[0], e)], c[1]]
    | Seq(s1, s2) -> 	eval(eval(c, s1), s2)
		| Read(x)	  -> 	local res = readWorld(c[1]);
							[c[0] <- [x, res[0]], res[1]]
    | Write(x)    -> 	[c[0], writeWorld(evalExpr(c[0], x), c[1])]
    | If (expr, s1, s2) -> if (evalExpr(c[0], expr)) then eval (c, s1) else eval (c, s2) fi
    | Repeat (s, expr) -> local c1 = eval (c, s);
               if (evalExpr(c1[0], expr)) then eval (c1, Skip) else eval (c1, Repeat(s, expr)) fi
    | While (expr, s) -> if (evalExpr(c[0], expr)) then eval (c, Seq(s, stmt)) else eval (c, Skip) fi
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}