-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
    case c of [state, [in, out]] ->
        case stmt of
             Skip -> c
            |Read (el) -> case in of elemo : i -> [state <- [el, elemo], [i, out]] esac
            |Write (expr) -> [state, [in, expression (state, expr) : out]]
            |Assn (el, expr) -> [state <- [el, expression (state, expr)], [in, out]]
            |Seq (s1, s2) -> eval (eval (c, s1), s2)
            |If (expr, s1, s2) -> if (expression (c[0], expr)) then eval (c, s1) else eval (c, s2) fi
            |Repeat (s, expr) -> local c_new = eval (c, s);
                                 if (expression (c_new[0], expr)) then eval (c_new, Skip) else eval (c_new, Repeat(s, expr)) fi
            |While (expr, s) -> if (expression (c[0], expr)) then eval (c, Seq(s, stmt)) else eval (c, Skip) fi
            
        esac
    esac      
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}