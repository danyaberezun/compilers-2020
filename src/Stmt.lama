-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[map, world@[input, output]], stmt) {
case stmt of 
	Assn (x, e) -> [map <- [x, evalExpr (map, e)], world]
	| Seq (s1, s2) -> eval (eval (c, s1), s2)
	| Read (x) -> [map <- [x, fst (readWorld (world))], snd (readWorld (world))] 
	| Write (e) -> [map, writeWorld (evalExpr (map, e), world)]
	| Skip -> [map, world]
esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
