-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  
  case stmt of

		  Assn(x, e)  -> 	[c[0] <- [x, evalExpr(c[0], e)], c[1]]
		
		| Write(x)    -> 	[c[0], writeWorld(evalExpr(c[0], x), c[1])]
		
		| Read(x)	  -> 	local res = readWorld(c[1]);
							[c[0] <- [x, res[0]], res[1]]
		
		| Seq(s1, s2) -> 	eval(eval(c, s1), s2)

		| Skip 		  -> 	c

		| If(e, s1, s2) -> 	if evalExpr(c[0], e) != 0 then eval(c, s1) else eval(c, s2) fi

		| While(e, s) -> 	if evalExpr(c[0], e) == 0 then c else eval(eval(c, s), stmt) fi

		| Repeat(s, e)->	local new_c = eval(c, s);
							if evalExpr(new_c[0], e) then eval(new_c, Skip) else eval(new_c, Repeat(s, e)) fi


	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
