-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  -- example of 'stmt' s-expression:
  -- Seq (Read ("x"), Seq (Read ("y"), Seq (Assn ("z", Binop ("*", Binop ("*", Var ("x"), Var ("y")), Const (3))), Write (Var ("z")))))


  -- evaluates single statement "stmt" in context "c"
  -- returns new context "c"
  fun evalSingleStmt (c, stmt) {
    -- printf ("Statement to eval: ""%s""\n", stmt.string);
    case stmt of
        Read (name@_) -> local res = readWorld(c[1]); -- pair (value * world)
                         [c[0] <- [name, res[0]], res[1]]
      | Write (expr@_) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
      | Assn (name@_, expr@_) -> [c[0] <- [name, evalExpr(c[0], expr)], c[1]]
      | Skip -> c
    esac
  }

  case stmt of
      Seq (next_stmt@_, continuation@_) -> local cc = evalSingleStmt(c, next_stmt);
                                           eval(cc, continuation)
    | next_stmt@_ -> evalSingleStmt(c, next_stmt)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
