-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c@[st, w], stmt) {

  case stmt of
    Assn (x, expr)      ->  [ st <- [x, evalExpr(st, expr)], w ]
  | Seq (stmt1, stmt2)  ->  eval( eval(c, stmt1), stmt2 )
  | Read (x)            ->  local new_w = readWorld(w); [ st <- [ x, new_w[0] ], new_w[1] ]
  | Skip                ->  c
  | Write (expr)        ->  [ st, writeWorld( evalExpr(st, expr), w ) ]
  | While (expr, s)     ->  case evalExpr(st, expr) of 
                              0 -> [ st, w ]
                            | _ -> eval( eval(c, s), stmt )
                            esac
  | If (expr, s1, s2)   ->  case evalExpr(st, expr) of 
                              0 -> eval(c, s2)
                            | _ -> eval(c, s1)
                            esac
  | Repeat (stmt, expr) ->  case eval(c, stmt) of 
                              [new_st, new_w] -> case evalExpr(new_st, expr) of
                                                    0 -> eval([new_st, new_w], Repeat(stmt, expr))
                                                  | _ -> [ new_st, new_w ]
                                                  esac
                            esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
