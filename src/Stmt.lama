-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c@[st, w], stmt) {

  case stmt of
    Assn (x, expr)      -> [ st <- [x, evalExpr(st, expr)], w ]
  | Seq (stmt1, stmt2)  -> eval( eval(c, stmt1), stmt2 )
  | Read (x)            -> local new_w = readWorld(w);
                           [ st <- [ x, new_w[0] ], new_w[1] ]
  | Skip                -> c
  | Write (expr)        -> [ st, writeWorld( evalExpr(st, expr), w ) ]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
