-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
local s = c[0];
    local w = c[1];
    case stmt of
        Seq (stmt1, stmt2) -> return eval (eval (c, stmt1), stmt2)
    |   Assn (x, expr) -> return [s <- [x, evalExpr (s, expr)], w]
    |   Read (x) -> local read = readWorld (w);
                    local val = read[0];
                    local new_w = read[1];
                    return [s <- [x, val], new_w]
    |   Write (e) -> return [s, writeWorld (evalExpr (s, e), w)]
    |   Skip -> return c
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
