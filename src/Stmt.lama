-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)


fun eval (c, stmt) {
    case c of [st, [in, out]] ->
        case stmt of
             Skip -> c
            |Read(elem) -> case in of elemo : i -> [st <- [elem, elemo], [i, out]] esac
            |Write(expr) -> [st, [in, evalExpr(st, expr) : out]]
            |Assn(elem, expr) -> [st <- [elem, evalExpr(st, expr)], [in, out]]
            |Seq(s1, s2) -> eval(eval(c, s1), s2)
            | If(e, s1, s2) ->  if evalExpr(c[0], e) != 0 then eval(c, s1) else eval(c, s2) fi
            | While(e, s) ->    if evalExpr(c[0], e) == 0 then c else eval(eval(c, s), stmt) fi
            | Repeat(s, e)->    local new_c = eval(c, s);
                            if evalExpr(new_c[0], e) then eval(new_c, Skip) else eval(new_c, Repeat(s, e)) fi

        esac
    esac      
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}