-- Statement evaluator.

import State;
import Expr;
import World;

fun eval(c, stmt){
	case c of [st, [in, out]] ->
        case stmt of
             Skip -> c
            |Read(elem) -> case in of elemo : i -> [st <- [elem, elemo], [i, out]] esac
            |Write(expr) -> [st, [in, evalExpr(st, expr) : out]]
            |Assn(elem, expr) -> [st <- [elem, evalExpr(st, expr)], [in, out]]
            |Seq(s1, s2) -> eval(eval(c, s1), s2)
        esac
    esac      
}

public fun evalStmt(input, stmt){
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
