-- Statement evaluator.

import State;
import Expr;
import World;
import List;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, [i,o]], stmt) {
case stmt of
      Skip -> c
    | Read(x) -> local result = readWorld(c[1]); 
                                [c[0] <- [x, result[0]], result[1]]
    | Write(expr) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
    | Seq(s1, s2) -> eval(eval(c, s1), s2)
    | Assn(x, expr) -> [(st <- [x, evalExpr(st, expr)]), [i,o]]
esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
