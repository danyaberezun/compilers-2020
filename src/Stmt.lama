-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        If     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  -- example of 'stmt' s-expression:
  -- Seq (Read ("x"), Seq (Read ("y"), Seq (Assn ("z", Binop ("*", Binop ("*", Var ("x"), Var ("y")), Const (3))), Write (Var ("z")))))


  -- evaluates single statement "stmt" in context "c"
  -- returns new context "c"
  fun evalSingleStmt (c, stmt) {
    -- local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)
    -- fprintf (stderr, "Statement to eval: ""%s""\n", stmt.string);
    case stmt of
        Read (name) -> local res = readWorld(c[1]); -- pair (value * world)
                       [c[0] <- [name, res[0]], res[1]]
      | Write (expr) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
      | Assn (name, expr) -> [c[0] <- [name, evalExpr(c[0], expr)], c[1]]
      | Skip -> c
      | If (expr, s1, s2) -> if (evalExpr(c[0], expr)) then eval (c, s1) else eval (c, s2) fi
      | While (expr, s) -> if (evalExpr(c[0], expr)) then eval (c, Seq(s, stmt)) else eval (c, Skip) fi
      | Repeat (s, expr) -> local c1 = eval (c, s);
                            if (evalExpr(c1[0], expr)) then eval (c1, Skip) else eval (c1, Repeat(s, expr)) fi
    esac
  }

  case stmt of
      Seq (next_stmt, continuation) -> local cc = eval(c, next_stmt);
                                           eval(cc, continuation)
    | next_stmt -> evalSingleStmt(c, next_stmt)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
