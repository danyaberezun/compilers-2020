-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
  case c of [st, world@[input, output]] ->
    case stmt of
         Skip -> c
       | Read (var) -> case input of 
            v : rest -> [st <- [var, v], [rest, output]] 
          esac
       | Write (expr) -> [st, [input, evalExpr(st, expr) : output]]
       | Assn (var, expr) -> [(st <- [var, evalExpr(st, expr)]), [input, output]]
       | Seq (s1, s2) -> eval (eval (c, s1), s2)
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
