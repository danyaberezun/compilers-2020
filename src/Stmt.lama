
import State;
import Expr;
import World;
import List;

fun eval (c, stmt) {
	case c of [st, [i, o]] ->
		case stmt of
			Assn (x , expr) -> [(st <- [x, evalExpr (st, expr)]), [i, o]]
			| Seq (s1, s2) -> eval (eval(c, s1), s2)
			| Skip -> c
			| Read (x) -> case i of el : ni -> [(st <- [x, el]), [ni, o]] esac
			| Write (expr) -> [st, [i, evalExpr (st, expr) : o]]
			| If (expr, s1, s2)-> if (evalExpr(st, expr)) then eval(c, s1) else eval(c, s2) fi
			| While (expr, s) -> if (evalExpr(st,expr)) then eval(c,Seq(s,stmt)) else eval(c,Skip) fi
			| Repeat (s, expr) -> local c_new = eval (c,s);
					if (evalExpr(c_new[0], expr)) then eval (c_new, Skip) else eval (c_new, Repeat(s, expr)) fi
		esac
	esac
}


public fun evalStmt (input, stmt) {
	eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
