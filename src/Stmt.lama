-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        If     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  local s = c.fst, w = c.snd;
  case stmt of
   Assn (str, expr) -> [s <- [str, evalExpr (s, expr)], w]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip -> c
  | Read (str) -> 
    local v_w = readWorld (w); 
    [s <- [str, v_w.fst], v_w.snd]
  | Write (expr) -> [s, writeWorld (evalExpr (s, expr), w)]
  | If (expr, stmt1, stmt2) -> 
  	case evalExpr (s, expr) of
     0 -> eval (c, stmt2)
    | _ -> eval (c, stmt1)
    esac
  | While (expr, stmt) ->
   	case evalExpr (s, expr) of
      0 -> c
    | _ -> eval (eval (c, stmt), While (expr, stmt))
    esac
  | Repeat (stmt, expr) -> 
  	local c_ = eval (c, stmt);
    case evalExpr (c_.fst, expr) of
      0 -> eval (c_, Repeat (stmt, expr))
    | _ -> c_
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}