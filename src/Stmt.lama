-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (name, value) -> [evalAndAssign (state, name, value), world]
  | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
  | Skip               -> c
  | Read (name)        -> case readWorld (world) of
                            [value, newWorld] -> [state <- [name, value], newWorld]
			              esac
  | Write (expr)       -> [state, writeWorld (evalExpr (state, expr), world)]
  | If (expr, stmt1, stmt2) ->
    if evalExpr (state, expr)
    then eval (c, stmt1)
    else eval (c, stmt2)
    fi
  | w@While (expr, stmt) ->
    if evalExpr (state, expr) then eval(eval(c, stmt), w)
    else c
    fi
  | r@Repeat (stmt, expr) ->
    case eval (c, stmt) of
      c_@[state_, _] ->
        if evalExpr (state_, expr) then c_
        else eval(c_, r)
        fi
    esac
  esac
}

fun evalAndAssign (state, name, value) {
  state <- [name, evalExpr (state, value)]
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
