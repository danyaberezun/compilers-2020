import State;
import Expr;
import World;


fun eval (c@[state, world], stmt) {
  case stmt of
     Assn (x, expr)   -> [state <- [x, evalExpr(state, expr)], world]
  |   Seq (s1, s2) -> eval (eval (c, s1), s2)
  |  Skip          -> c
  |  Read (x)      -> case readWorld (world) of [v, world] -> [state <- [x, v], world] esac
  | Write (expr)      -> [state, writeWorld(evalExpr(state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
