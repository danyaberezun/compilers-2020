-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |



-- Evaluates a program with a given input and returns an output
--public fun evalStmt (input, stmt) {
  fun eval (c@[state, world], stmt) {
  case stmt of
     Skip          -> c
  |  Read (x)      -> case readWorld (world) of [v, world] -> [state <- [x, v], world] esac
  | Write (e)      -> [state, writeWorld(evalExpr(state, e), world)]
  |  Assn (x, e)   -> [state <- [x, evalExpr(state, e)], world]
  |   Seq (e1, e2) -> eval (eval (c, e1), e2)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
