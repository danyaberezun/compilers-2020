-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[s, w], stmt) {
  case stmt of
    Skip -> c |
    Assn(x, val) -> [s <- [x, evalExpr(s, val)], w] |
    Read(x) -> 
      local tmp;
      tmp := readWorld(w);
      [s <- [x, tmp[0]], tmp[1]] |
    Write(e) -> [s, writeWorld(evalExpr(s, e), w)] |
    Seq(s, t) -> eval(eval(c, s), t)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
