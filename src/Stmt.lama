-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
	-- printf("%s %s\n", c.string, stmt.string);
	case c of
		[st, w] ->
			case stmt of
				  Seq (s1, s2)   -> eval(eval(c, s1), s2)
				| Read (v)       -> local a = readWorld(w); [st <- [v, a[0]], a[1]]
				| Write (e)      -> [st, writeWorld(evalExpr(st, e), w)]
				| Assn (v, e)    -> [st <- [v, evalExpr(st, e)], w]
				| If (e, s1, s2) -> if evalExpr(st, e) != 0 then eval(c, s1) else eval(c, s2) fi
				| While (e, s)   -> if evalExpr(st, e) != 0 then eval(eval(c, s), stmt) else c fi
				| Skip           -> c
				| Repeat (s, e)  -> local cc = eval(c, s); if evalExpr(cc[0], e) != 0 then cc else eval(cc, stmt) fi
				| _              -> printf("Statement %s not found.\n", stmt)
			esac
	esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
