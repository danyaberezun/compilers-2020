-- Statement evaluator.

import List;
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |


fun eval (condition, statement) {
	case condition of [state, [in, out]] -> 
		case statement of
			  Skip -> condition
			| Read(elem) -> case in of el : inn -> [state <- [elem, el], [inn, out]] esac
			| Write(elem) -> [state, [in, evalExpr(state, elem) : out]]
			| Assn(elem, e) -> [(state <- [elem, evalExpr(state, e)]), [in, out]]
			| Seq(s1, s2) -> eval(eval(condition, s1), s2)
			| If (elem, s1, s2) -> case evalExpr(state, elem) of
										0 -> eval(condition, s2)
										| _ -> eval(condition, s1)
								   esac
			| While (expr, s) -> case evalExpr(state, expr) of
										  0 -> condition
										| _ -> eval(eval(condition, s), While(expr, s))
								  esac
			| Repeat (s1, elem) -> case eval(condition, s1) of
										condition@[state, _] -> case evalExpr(state, elem) of
																	0 -> eval(condition, Repeat(s1, elem))
																	| _ -> condition
																esac
								   esac
		esac
	esac
}

-- Evaluates a program with a given input and returns an output

public fun evalStmt (input, stmt) {
	eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
