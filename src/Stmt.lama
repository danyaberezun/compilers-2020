-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
             
fun eval (c, stmt) {
  case c of [st, [in, out]] ->
    case stmt of
       Assn(elem, expr) -> [st <- [elem, evalExpr(st, expr)], [in, out]]
      |Seq(s1, s2) -> eval(eval(c, s1), s2)
      |Skip -> c
      |Read(elem) -> case in of elemo : i -> [st <- [elem, elemo], [i, out]] esac
      |Write(expr) -> [st, [in, evalExpr(st, expr) : out]]
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
