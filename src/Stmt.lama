-- Statement evaluator.

import State;
import Expr;
import World;
import List;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[state, world@[input, output]], stmt) {
  case stmt of 
    Assn (x, expr) -> [state <- [x, expression (state, expr)], world]
    | Seq (s1, s2) -> eval (eval(c, s1), s2 )
    | Read (x) -> [state <- [x, fst (readWorld (world))], snd (readWorld (world))]
    | Write (expr) -> [state, writeWorld (expression (state, expr), world)]
    | Skip -> c
	| If (expr, s1, s2) -> if (expression (c[0], expr)) then eval (c, s1) else eval (c, s2) fi
    | Repeat (s, expr) -> local c_new = eval (c, s);
						  if (expression (c_new[0], expr)) then eval (c_new, Skip) else eval (c_new	, Repeat (s, expr)) fi
    | While (expr, s) -> if (expression (c[0], expr)) then eval (c, Seq(s, stmt)) else eval (c, Skip) fi
            
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}