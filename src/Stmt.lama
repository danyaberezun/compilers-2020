-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c, stmt) {
  case c of [s, w] ->
    case stmt of
      Read (x)     -> case readWorld (w) of [v, w1] -> [s <- [x, v], w1] esac
    | Write (e)    -> [s, writeWorld (evalExpr (s, e), w)]
    | Assn (x, e)  -> [s <- [x, evalExpr (s, e)], w]
    | Seq (s1, s2) -> eval (eval (c, s1), s2)
    | Skip         -> [s, w]
    | If (cond, thn, els) -> case evalExpr (s, cond) of
                               0 -> eval (c, els)
                             | _ -> eval (c, thn)
                             esac
    | whl @ While (cond, body) -> case evalExpr (s, cond) of
                                    0 -> [s, w]
                                  | _ -> eval (eval (c, body), whl)
                                  esac
    | rpt @ Repeat (body, cond) -> {
      case eval (c, body) of c1 @ [s1, w1] ->
        case evalExpr (s1, cond) of
          0 -> eval (c1, rpt)
        | _ -> c1
        esac
      esac
    }
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
