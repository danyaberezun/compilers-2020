-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun evalWhile(c@[state, _], expr, stmt, cond) {
  if cond(evalExpr (state, expr)) then evalWhile (eval (c, stmt), expr, stmt, cond) else c fi
}

local whileFalse = fun (x) {x == 0}, whileTrue  = fun (x) {x};

fun eval (c@[state, world], stmt) {
  case stmt of
      Skip           -> c
  |   Read (x)       -> case readWorld (world) of [v, world] -> [state <- [x, v], world] esac
  |  Write (e)       -> [state, writeWorld(evalExpr(state, e), world)]
  |   Assn (x, e)    -> [state <- [x, evalExpr(state, e)], world]
  |    Seq (e1, e2)  -> eval (eval (c, e1), e2)
  |     If (i, t, e) -> eval (c, if evalExpr (state, i) != 0 then t else e fi)
  |  While (e, s)    -> evalWhile (c,           e, s, whileTrue)
  | Repeat (s, e)    -> evalWhile (eval (c, s), e, s, whileFalse)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
