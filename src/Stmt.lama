-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
	case stmt of
		  Seq (s1, s2) -> return eval(eval(c, s1), s2)
		| Skip -> return c
		| Read (x) -> local a;
				a := readWorld(c[1]);
				 return [c[0] <- [x, a[0]], a[1]]
		| Write(expr) -> return [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
		| Assn (string, expr) -> return [c[0] <- [string, evalExpr(c[0], expr)], c[1]]
	esac
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
