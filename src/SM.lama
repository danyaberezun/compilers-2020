-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of
    [s, st, world@[input, output]] -> case insns of
       {} -> c
       | BINOP (op) : irest -> case s of 
          rhs : lhs : rest -> eval ([evalBinop (op, lhs, rhs) : rest, st, world], irest) 
        esac
       | CONST (n) : irest -> eval ([n : s, st, world], irest)
       | READ : irest -> case input of 
          lhs : it -> eval ([lhs : s, st, [it, output]], irest) 
        esac
       | WRITE : irest -> case s of 
          var : rest -> eval ([rest, st, [input, var : output]], irest) 
        esac
       | LD (var) : irest -> eval ([st (var) : s, st, world], irest)
       | ST (var) : irest -> case s of 
          var2 : rest -> eval ([s, (st <- [var, var2]), world], irest) 
        esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
     Const (numb)        -> singleton(CONST (numb))
   | Var (var)          -> singleton(LD (var))
   | Binop (op, lhs, rhs) -> compileExpr(lhs) +++ compileExpr(rhs) +++ singleton(BINOP (op))
   esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
     Assn (var, expr) -> compileExpr(expr) +++ singleton(ST (var))
   | Read (var) -> {READ, ST (var)}
   | Write (expr) -> compileExpr(expr) +++ singleton(WRITE)
   | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
   esac
}
