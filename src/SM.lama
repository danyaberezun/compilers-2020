
-- Stack maSchine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl (evalInstruction, c, insns)
}


fun evalInstruction ([stack, state, world], instruction) {
  case instruction of
    CONST (val)  -> [val:stack, state, world]
  | LD (name)    -> [state(name):stack, state, world]
  | ST (name)    -> case stack of
                      x:stackTail -> [stackTail, state <- [name, x], world]
                    esac
  | BINOP (op)   -> case stack of
                      x:y:stackTail -> [evalOp (op, y, x):stackTail, state, world]
                    esac
  | READ         -> case readWorld (world) of
                     [value, newWorld] -> [value:stack, state, newWorld]
                    esac
  | WRITE        -> case stack of
                     value:stackTail -> [stackTail, state, writeWorld (value, world)]
                    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (val)             -> singleton (CONST (val))
  | Var (name)              -> singleton (LD (name))
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ singleton (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr)   -> compileExpr (expr) +++ singleton (ST (name))
  | Seq  (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                -> {}
  | Read (name)         -> {READ, ST (name)}
  | Write (expr)        -> compileExpr (expr) +++ singleton (WRITE)
  esac
}
