-- Stack machine.

import List;
import World;
import State;
import Expr;
import Util;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {}             -> c
  | i : is         -> case c of [stack, state, w] ->
      case i of
        CONST (n)  -> [n : stack, state, w]
      | BINOP (op) -> case stack of v1 : v2 : vs -> [opFun (op) (v1, v2) : vs, state, w] esac
      | LD (x)     -> [state (x) : stack, state, w]
      | ST (x)     -> case stack of v : vs -> [vs, state <- [x, v], w] esac
      | READ       -> case readWorld (w) of [v, w1] -> [v : stack, state, w1] esac
      | WRITE      -> case stack of v : vs -> [vs, state, writeWorld (v, w)] esac
      esac.eval (is)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)          -> LD (x)
  | Const (n)        -> CONST (n)
  | Binop (op, l, r) -> {compileExpr (r), compileExpr (l), BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileImpl (stmt) { 
    case stmt of
      Read (x)     -> {READ, ST (x)}
    | Write (e)    -> {compileExpr (e), WRITE}
    | Assn (x, e)  -> {compileExpr (e), ST (x)}
    | Seq (s1, s2) -> {compileImpl (s1), compileImpl (s2)}
    esac
  }
  flatten (compileImpl (stmt))
}
