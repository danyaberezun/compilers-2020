-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  	case insns of
		 {} -> [st, state, w]
		|READ      : s -> local world_ = readWorld(w); eval([world_[0] : st, state, world_[1]], s)
		|WRITE     : s -> eval([st[1], state, writeWorld(st[0], w)], s)
		|LD(x)     : s -> eval([state(x) : st, state, w], s)
		|ST(x)     : s -> eval([st[1], state <- [x, st[0]], w], s)
		|BINOP(op) : s -> eval([binop(op, st[1][0], st[0]) : st[1][1], state, w], s)
		|CONST(n)  : s -> eval([n : st, state, w], s)
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	case expr of
		Var(x) -> singleton(LD(x))
		|Const(n) -> singleton(CONST(n))
		|Binop (op, lim1, lim2) -> compileExpr(lim1) +++ compileExpr(lim2) +++ singleton(BINOP(op))
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	case stmt of
		Read(x) -> singleton(READ) +++ singleton(ST(x))
		|Write(x) -> compileExpr(x) +++ singleton(WRITE)
     		|Assn(x, e) -> compileExpr(e) +++ singleton(ST(x))
    		|Seq(st1,st2) ->compileSM(st1) +++ compileSM(st2)
    		|Skip -> {}
}
