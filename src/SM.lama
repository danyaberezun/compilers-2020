-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.

public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
--fun eval (c, insns) {
--  failure ("SM eval not implemented\n")
--}

fun eval(c@[st, s, w], insns) {
  case insns of
	{} -> c
	 | head : rest_prog -> case head of
					   READ -> eval ([fst (readWorld (w)) : st, s, snd (readWorld (w))], rest_prog)
					| WRITE -> case st of
								fir : st -> eval ([st, s, writeWorld (fir, w)], rest_prog)
							   esac
					| BINOP (op) -> case st of 
								sec : fir : st -> eval ([evalOp (op, fir, sec) : st, s, w], rest_prog)
							      esac
					| LD (x) -> eval ([s (x) : st, s, w], rest_prog)
					| ST (x) -> case st of
								fir : st -> eval ([st, s <- [x, fir], w], rest_prog)
							    esac
					| CONST (n) -> eval ([n : st, s, w], rest_prog)
					
				esac
esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
  case expr of
    Var(x) -> singleton(LD(x))
  | Const(n) -> singleton(CONST(n))
  | Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (st, expr) -> compileExpr(expr) +++ singleton(ST(st))
  | Read(s) -> { READ, ST(s) }
  | Write(expr) -> compileExpr(expr) +++ singleton(WRITE)
  | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  esac
}
