-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (configuration, commands) {
  case commands of
    {} -> return configuration
  | command:commands -> return eval (eval1 (configuration, command), commands)
  esac
}

fun eval1 (configuration, command) {
  local stack = configuration[0];
  local state = configuration[1];
  local world = configuration[2];
  case command of
    BINOP (op) ->
      case stack of value2:value1:stack2 ->
        local value = evalBinop (op, value1, value2);
        return [value:stack2, state, world]
      esac
  | CONST (value) -> return [value:stack, state, world]
  | READ ->
      case readWorld (world) of
        [value, world2] -> return [value:stack, state, world2]
      esac
  | WRITE ->
      case stack of value:stack2 ->
        local world2 = writeWorld (value, world);
        return [stack2, state, world2]
      esac
  | LD (var) -> [state (var) : stack, state, world]
  | ST (var) ->
    case stack of value:stack2 ->
      [stack2, state <- [var, value], world]
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (var) -> singleton (LD (var))
  | Const (value) -> singleton (CONST (value))
  | Binop (op, expr1, expr2) -> compileExpr (expr1) +++ compileExpr (expr2) +++ singleton (BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | Read (var) -> {READ, ST (var)}
  | Write (expr) -> compileExpr (expr) +++ singleton (WRITE)
  | Assn (var, expr) -> compileExpr (expr) +++ singleton (ST (var))
  esac
}
