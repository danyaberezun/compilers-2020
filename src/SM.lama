-- Stack machine.
import Ostap;
import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun compznz (x, znz) {
  case znz of
    "z" -> x == 0
  | "nz" -> x != 0
  esac
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, hd(list) : acc, tl(list))
      fi
    }

    inner (n, {}, list)
  }


  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w@[i, o]], insns) { (*printf("%s", insns.string);*)
    case insns of
      {} -> c
    | BINOP (b)      : p -> 
      case st of x : y : ss ->
        eval ([evalOp (b, y, x) : ss, cst, s, w], p) 
      esac
    | CONST (n)      : p -> eval ([n : st, cst, s, w], p)
    | READ           : p -> 
      case i of x : it -> 
        eval ([x : st, cst, s, [it, o]], p)
      esac
    | WRITE          : p -> 
      case st of x : ss ->
        eval ([ss, cst, s, [i, x : o]], p) 
      esac
    | LD    (x)      : p -> (*printf("%s, %s", st.string, lookup (s, x).string);*) eval ([lookup (s, x) : st, cst, s, w], p)
    | ST    (x)      : p -> 
      case st of y : ss ->
        assign (s, x, y); eval ([ss, cst, s, w], p) 
      esac
    | LABEL (l)      : p -> eval (c, p)
    | DUP            : p -> eval (c, p)
    | JMP   (l)      : p -> eval (c, fromLabel (env, l))
    | CJMP  (znz, l) : p -> 
      case st of x : ss ->
        if compznz (x, znz) 
        then  eval ([ss, cst, s, w], fromLabel(env, l))
        else  eval ([ss, cst, s, w], p)
        fi
      esac
    | LDA (x)        : p -> eval ([Ref (x) : st, cst, s, w], p)
    | STI            : p -> 
      case st of v : Ref (x) : ss ->
        assign (s, x, v); eval ([v : ss, cst, s, w], p)
      esac
    | DROP           : p -> 
      case st of
        x : ss -> eval ([ss, cst, s, w], p)
      esac
    | END            : p ->
      case cst of
        {}            -> c
      | [sl, q] : cst -> eval ([st, cst, sl, w], q)
      esac
    | BEGIN (_, na, nl) : p ->
      case take (st, na) of
        [st, sl] ->
        local s = makeState (na, nl);
        foldl (fun (i, arg) {assign (s, Arg (i), arg); i+1}, 0, sl);
         eval ([st, cst, s, w], p)
      esac
    | CALL (f, _)    : p    -> eval ([st, [s, p] : cst, s, w], fromLabel(env, f))
    | GLOBAL (x)     : p    -> assign (s, Glb (x), 0); eval ([st, cst, s, w], p)
    | BUILTIN (f, n) : p    -> 
      case take (st, n) of 
        [st, a] -> (*printf("%s, %s", a.string, st.string);*) case evalBuiltin (f, a , w) of [v, w] -> eval ([v : st, cst, s, w], p) esac
      esac
    | STA : p -> case st of v : id : arr : st -> arr[id] := v; eval ([v : st, cst, s, w], p) esac
    | ELEM : p -> case st of id : arr : st -> eval([arr[id] : st, cst, s, w], p) esac
    | ARRAY (n) : p -> case take (st, n) of [st, a] -> eval ([listArray (a) : st, cst, s, w], p) esac
    | STRING (x) : p -> eval ([x : st, cst, s, w], p)
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {

  fun last (l) {
    case l of
      {}     -> [{}]
    | x : {} -> [{}, x]
    | x : t  -> case last (t) of [a, b] -> [x : a, b] esac
    esac
  }

  fun cSM_list (exprs, env) {
    case exprs of
      {}        -> [{}, env]
    | e : exprs -> 
      case cSM (e, env) of
        [ins, env] -> 
        case cSM_list (exprs, env) of
          [inss, env] -> [ins : inss, env]
        esac
      esac
    esac
  }

  fun addDef ([env, funs, glbs], def) {
    case def of
      Fun (name, args, body) ->
      case genFunLabel (env, name) of
        [fLabel, env] -> [addFun (env, name, fLabel, size (args)),
                          [fLabel, args, body] : funs,
                          glbs]
      esac
    | Local (ds)      -> [addVars (env, ds), funs,
                           {if isGlobal (env) then
                             map (fun (x) {GLOBAL (x)}, ds)
                           else {} fi, glbs}]
    esac
  }

  fun cSM (stmt, env) {
    case stmt of
      Var   (x)            -> [LD (lookupVar (env, x)) : {}, env]
    | Const (n)            -> [CONST (n) : {}, env]
    | Binop (b, e1, e2)    -> 
      case cSM (e1, env) of
        [ins1, env] -> 
        case cSM (e2, env) of
          [ins2, env] -> [ins1 +++ ins2 +++ (BINOP (b) : {}), env]
        esac
      esac
    | Ref   (x)            -> [LDA (lookupVar (env, x)) : {}, env]
    | Ignor (x)            -> 
      case cSM (x, env) of
        [ins, env] -> [ins +++ (DROP : {}), env]
      esac
    | Assn  (x, expr)      ->
      case x of
        ElemRef (earr, eid) ->
        case cSM_list ({earr, eid, expr}, env) of
          [inss, env] -> [inss +++ (STA : {}), env]
        esac
      | _ ->
        case cSM_list ({x, expr}, env) of
          [inss, env] -> [inss +++ (STI : {}), env]
        esac
      esac
    | Read  (x)            -> [{READ, ST (lookupVar (env, x))}, env]
    | Write (expr)         -> 
      case cSM (expr, env) of
        [ins, env] -> [ins +++ (WRITE : {}), env]
      esac
    | Skip                 -> [{}, env]
    | Seq   (s1, s2)       -> 
      case cSM (s1, env) of
        [ins, env] ->
          case cSM (s2, env) of
            [ins1, env] -> [ins +++ ins1, env]
          esac
      esac
    | If    (expr, s1, s2) -> 
      case env.genLabels(2) of
        [ls2, lfi, env] ->
          case cSM (s1, env) of
            [ins, env] ->
              case cSM (s2, env) of
                [ins1, env] -> 
                case cSM (expr, env) of
                  [ins2, env]->
                  [ins2                    +++
                  (CJMP ("z", ls2) : {})   +++ 
                  (case last (ins) of
                      [ins, LABEL (l)] -> 
                      ins               +++ 
                      {JMP (l), DUP, LABEL (ls2)} +++
                      ins1              +++ 
                      (LABEL (l) : {})
                    | _                -> 
                      ins +++
                      {JMP (lfi), DUP, LABEL (ls2)} +++ 
                      ins1              +++ 
                      (LABEL (lfi) : {})
                  esac), env]
                esac
              esac
          esac
      esac 
    | While (expr, s) ->
      case env.genLabels(2) of
        [l1, l2, env] ->
          case cSM (s, env) of
            [ins, env] -> 
            case cSM (expr, env) of
              [ins1, env] ->
            [{JMP (l2), LABEL (l1)} +++
            ins                     +++
            (LABEL (l2) : {})       +++
            ins1                    +++
            (CJMP ("nz", l1) : {}), env]
            esac
          esac
      esac
    | Repeat (s, expr) ->
      case env.genLabel of
        [l, env] ->
          case cSM (s, env) of
            [ins, env] ->
            case cSM (expr, env) of
              [ins1, env] ->
              [(LABEL (l) : {})  +++
              ins                +++
              ins1               +++
              (CJMP ("z", l) : {}), env]
            esac
          esac
      esac
    | Call (f, args)   ->
      case (cSM_list (args, env)) of
        [inss, env] -> 
        case f of 
          "read" -> [inss +++ (BUILTIN ("read", 0) : {}), env] 
        | "write" -> [inss +++ (BUILTIN ("write", 1) : {}), env] 
        | _ -> 
          case lookupFun (env, f) of
            Fun (fLabel, n) -> [deepFlatten (inss +++ (CALL (fLabel, n) : {})), env]
          esac 
        esac 
      esac
    | Scope (defs, expr)  ->
      case foldl (addDef, [beginScope (env), {}, {}], defs) of
        [env, funs, glbs] -> 
        case cSM (expr,
                  foldl (fun (env, [fLabel, args, body]) {
                            rememberFun (env, fLabel, args, body)
                          }, env, funs)) of [ins, env] -> [{glbs, ins}, endScope (env)]
        esac
      esac
    | String (x) -> [STRING (x) : {}, env]
    | Array (els) -> 
      case cSM_list (els, env) of
        [inss, env] -> [inss +++ (ARRAY (els.length) : {}), env]
      esac
    | Elem (earr, eid) -> 
      case cSM_list ({earr, eid}, env) of
        [inss, env] -> [inss +++ (ELEM : {}), env]
      esac
    | Builtin (f, eargs) -> 
      case cSM_list (eargs, env) of
        [inss, env] -> [inss +++ (BUILTIN (f, eargs.length) : {}), env]
      esac
  esac
  }

  fun cFun (env, main) {
    fun iter (env, acc, funSeq) {
      case funSeq of
        {} -> case getFuns (env) of
                [{}, env] -> acc
              | [fs, env] -> iter (env, acc, fs)
        esac
      | Fun (f, args, body, state) : fs ->
        case cSM (body, addArgs (beginFun (env, state), args)) of
          [inss, env] -> iter (
            env,
            {acc, LABEL (f), BEGIN (f, size (args), getLocals (env)), inss, END},
            fs
          )
        esac
      esac
    }
    iter(env, main, {})
  }
  
  case cSM (stmt, initCompEnv ()) of
    [inss, env] -> printf ("%s, %s", inss.string, getFuns(env).string);
    deepFlatten (
      cFun (env, {LABEL ("main"), BEGIN ("main", 0, getLocals (env)), inss, END}) 
    )
  esac
}
(* End *)

local i =
case parseString (
  parse |> bypass (end),
  "fun test2 (b) {}"
--"local x; x := read (); write (x)"
) of Succ (p) -> p esac;
local in = compileSM (i);

printf ("%s\n", i.string);
printf ("%s\n",  showSM (in).string);
printf ("%s\n", evalSM (5:{}, in).string)
