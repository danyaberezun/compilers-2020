-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of
    [stack, state, world] -> 
  	case insns of
  	  READ:tail ->
        case readWorld(world) of
          [a, newWorld] -> eval([a:stack, state, newWorld], tail)
        esac
		| LD(x):tail -> eval([state(x):stack, state, world], tail)
		| CONST(c):tail -> eval([c:stack, state, world], tail)
		| BINOP(op):tail ->
			case stack of
			  y:x:stack_tail -> {
					local res = calculate(op, x, y);
					eval([res:stack_tail, state, world], tail)
        }
			| _ -> failure("Not enough arguments in stack for binop!")
			esac
		| ST(x):tail ->
		  case stack of
			  val:stack_tail -> eval([stack_tail, state <- [x, val], world], tail)
			esac
		| Var(x):tail ->
		  eval([state(x):stack, state, world], tail)
		| WRITE:tail ->
		  case stack of
			  val:stack_tail -> {
          eval([stack_tail, state, writeWorld(val, world)], tail)
        }
			| _ -> failure("Not enough arguments in stack for write!")
			esac
		| WRITE ->
		  case stack of
			  val:stack_tail -> {
          eval([stack_tail, state, writeWorld(val, world)], {})
        }
			| _ -> failure("Not enough arguments in stack for write!")
			esac
  	| {} -> c
  	| _ -> failure("Can't match insns... %s", insns.string)
  	esac
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

fun cexpr (expr) {
  case expr of
    Binop (op, a, b) -> cexpr(a) +++ cexpr(b) +++ (BINOP(op):{})
    | Var(x) -> LD(x):{}
    | Const(c) -> CONST(c):{}
  esac
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  cexpr(expr)
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Seq (head, tail) -> toInstr(head) +++ compileSM(tail)
    | head -> toInstr(head)
  esac
}

-- Returns list from one instruction
public fun toInstr (head) {
  case head of
    Read(x) -> READ:ST(x):{}
    | Assn (z, expr) -> compileExpr(expr) +++ (ST(z):{})
    | Write (expr) -> compileExpr(expr) +++ (WRITE:{})
  esac
}
