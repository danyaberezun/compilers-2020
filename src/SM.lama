
-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  local stack = c[0], s = c[1], w = c[2];
  if insns.size == 0 
  then return c
  fi;
  case insns.hd of
    READ -> 
      local v_w = readWorld (w);
      eval (env, [v_w[0]:stack, s, v_w[1]], insns.tl)
  | WRITE -> 
      local v = stack.hd, tale = stack.tl;
      return eval (env, [tale, s, writeWorld (v, w)], insns.tl)
  | BINOP (str) -> 
      local y = stack.hd, x = stack.tl.hd, tale = stack.tl.tl;
      eval (env, [evalBinop (str, x, y):tale, s, w], insns.tl)
  | LD (x) -> eval (env, [s (x):stack, s, w], insns.tl)
  | ST (x) -> 
      local v = stack.hd, tale = stack.tl;
      eval (env, [tale, s <- [x, v], w], insns.tl)
  | CONST (n) -> eval (env, [n:stack, s, w], insns.tl)
  | LABEL (s) -> eval (env, c, insns.tl)
  | JMP (l) -> eval (env, c, fromLabel (env, l))
  | CJMP (v, l) -> 
    case [v, stack.hd] of
      ["z", 0] -> eval (env, c, fromLabel (env, l))
    | ["z", _] -> eval (env, c, insns.tl)
    | ["nz", 0] -> eval (env, c, insns.tl)
    | ["nz", _] -> eval (env, c, fromLabel (env, l)) 
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]


}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (str) -> singleton (LD (str))
  | Const (val) -> singleton (CONST (val))
  | Binop (str, expr1, expr2) -> compileExpr (expr1) +++ compileExpr (expr2) +++ singleton (BINOP (str))
  esac
}

local cnt = 0;

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (str, expr) -> compileExpr (expr) +++ singleton (ST (str))
  | Read (str) -> singleton (READ) +++ singleton (ST (str))
  | Write (expr) -> compileExpr (expr) +++ singleton (WRITE)
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  | If (expr, stmt1, stmt2) -> 
      local l1 = sprintf ("l%d", cnt), l2 = sprintf ("l%d", cnt + 1);
      cnt := cnt + 2;
      compileExpr (expr) +++ singleton (CJMP ("nz", l1)) +++ compileSM (stmt2) +++ 
      singleton (JMP (l2)) +++ singleton (LABEL (l1)) +++ compileSM (stmt1) +++ singleton (LABEL (l2))
  | While (expr, stmt) -> 
      local l1 = sprintf ("l%d", cnt), l2 = sprintf ("l%d", cnt + 1);
      cnt := cnt + 2;
      singleton (JMP (l2)) +++ singleton (LABEL (l1)) +++ compileSM (stmt) +++ 
      singleton (LABEL (l2)) +++ compileExpr (expr) +++ singleton (CJMP ("nz", l1))
  | Repeat (stmt, expr) -> 
      local l = sprintf ("l%d", cnt);
      cnt := cnt + 1;
      singleton (LABEL (l)) +++ compileSM (stmt) +++ compileExpr (expr) +++ singleton (CJMP ("z", l))
  | Skip -> {}
  esac
}
