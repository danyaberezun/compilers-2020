-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c, insns) {
  case c of
    [s, st, w@[i, o]] -> case insns of
        {} -> c
      | Binop (op) : p -> case s of x : y : ss -> eval ([apply (op, y, x) : ss, st, w], p) esac
      | Const (n) : p -> eval ([n : s, st, w], p)
      | Read      : p -> case i of x : it -> eval ([x : s, st, [it, o]], p) esac
      | Write     : p -> case s of x : ss -> eval ([ss, st, [i, x : o]], p) esac
      | LD    (x) : p -> eval ([st (x) : s, st, w], p)
      | ST    (x) : p -> case s of y : ss -> eval ([s, (st <- [x, y]), w], p) esac
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var   (x)         -> singleton (LD (x))
  | Const (n)         -> singleton (expr)
  | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ singleton (Binop (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
	    Assn (val, expr)   -> compileExpr(expr) +++ singleton( ST(val) )
	  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
	  | Skip               -> {}
	  | Read (val)         -> { READ, ST(val) }
	  | Write (expr)       -> compileExpr(expr) +++ singleton( WRITE )
	  esac
}
