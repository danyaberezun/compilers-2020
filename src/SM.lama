-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c@[s, st, w@[i,o]], insns) {
 -- failure ("SM eval not implemented\n")
      case insns of
       {} -> c |
       READ: p -> case i of x : it -> eval([x : s, st, [it, o]], p) esac |
       WRITE: p -> case s of x : ss -> eval([ss, st, [i, x : o]], p) esac |
       BINOP(b): p -> case s of x : y: ss -> eval([evalOp(b, y, x): ss, st, w], p) esac |
       LD(x): p -> eval([st(x) : s, st, w], p) |
       ST(x): p -> case s of y : ss -> eval([s, (st <- [x,y]), w], p) esac |
       CONST (n): p -> eval([n : s, st, w], p) 
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
     Var(x) -> singleton(LD(x)) |
     Const(n) -> singleton(CONST(n)) |
     Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ singleton(BINOP(op))
  esac
}
  


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
     Assn(x, expr) -> compileExpr(expr) +++ singleton(ST(x)) |
     Read(x) -> {READ, ST(x)} |
     Write(expr) -> compileExpr(expr) +++ singleton(WRITE) |
     Seq(s1,s2) -> compileSM(s1) +++ compileSM(s2) |
     Skip -> {}
  esac
}