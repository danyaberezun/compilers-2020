-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
-- previous impl ref:
--   https://github.com/kry127/compilers-2020/blob/20caaa88d46ee3caa895b8f3e9faeb6b4878f184/src/SM.lama#L65
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

    fun applyOp(op, v1, v2) {
        case op of
                "*"  -> v1 * v2
              | "+"  -> v1 + v2
              | "-"  -> v1 - v2
              | "/"  -> if (v2) then v1 / v2 else 0 fi
              | "%"  -> if (v2) then v1 % v2 else 0 fi
              | "==" -> v1 == v2
              | "!=" -> v1 != v2
              | "<"  -> v1 < v2
              | "<=" -> v1 <= v2
              | ">"  -> v1 > v2
              | ">=" -> v1 >= v2
              | "&&" -> v1 && v2
              | "!!" -> v1 !! v2
        esac
    }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    -- implementation was borrowed from lection 04.12.2020
    -- and from previous version:
    -- https://github.com/kry127/compilers-2020/blob/A07-scopes-functions-int-dev/src/SM.lama
    case insns of
      {}                       -> c
    | JMP  (l) : _             -> eval (c, fromLabel (env, l))
    | CJMP (znz, l) : insns ->
        case st of
          n : st -> if (case znz of "z" -> n == 0 | _ -> n != 0 esac)
                    then eval ([st, cst, s, w], fromLabel (env, l))
                    else eval ([st, cst, s, w], insns)
                    fi
        esac
    | CALL (f, _) : insns      -> eval ([st, [s, insns] : cst, s, w], fromLabel (env, f))
    | END : _                  ->
        case cst of
          [s, insns] : cst -> eval ([st, cst, s, w], insns)
        | {}               -> c
        esac
    | instruction : continuation ->
        eval (
          case instruction of
            READ            -> case readWorld (w) of [v, w]     -> [v : st, cst, s, w]                 esac
          | WRITE           -> case st            of v : st     -> [st, cst, s, writeWorld(v, w)]      esac
          | BINOP (op)      -> case st            of y : x : st -> [applyOp (op, x, y) :st, cst, s, w] esac
          | CONST (val)     -> [val              : st, cst, s, w]
          | LD    (name)    -> [lookup (s, name) : st, cst, s, w]
          | LDA   (name)    -> [Ref (name)       : st, cst, s, w]
          | DUP             -> [st.hd            : st, cst, s, w]
          | DROP            -> [st.tl                , cst, s, w]
          | ST    (name)    -> case st of n : _               -> assign (s, name, n); [    st, cst, s, w] esac
          | STI             -> case st of n : Ref (name) : st -> assign (s, name, n); [n : st, cst, s, w] esac
          | LABEL (_)       -> c
          | BEGIN (_, argc, localc)
                            -> case take (st, argc) of
                                 [st, argv] ->
                                   local s = makeState (argc, localc);
                                   foldl (fun (i, arg) {assign (s, Arg (i), arg); i + 1}, 0, argv);
                                   [st, cst, s, w]
                               esac
          | GLOBAL (x)      -> assign (s, Glb (x), 0); [st, cst, s, w]
          | x : _ -> failure (sprintf("SM interpreter doesn't know instruction %s\n", x.string))
          esac,
          continuation
        )
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}


-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  -- converts end label to SM code
    fun maybeJump(maybeLabel) {
      case maybeLabel of Some(l) -> singletonBuffer(JMP(l)) | _ -> emptyBuffer() esac
    }

  -- Compiles sequence of expressions and concat their code
  -- Returns [env, SMCode]
  fun compileExprList (env, exprs, endLabel) {
    case exprs of
      {e}    -> compileExpr (env, e, endLabel)
    | e : ex -> case genLabels(env, 1) of
              [l1, ev] -> case compileExpr (ev, e, Some(l1)) of
                [ev1, code1] -> case compileExprList (ev1, ex, endLabel) of
                    [ev2, code2] -> [ev2, code1 <+> singletonBuffer(LABEL(l1)) <+> code2]
                  esac
            esac
        esac
    esac
  }

  -- Compiles an expression
  -- reference to prev impl: https://github.com/kry127/compilers-2020/blob/20caaa88d46ee3caa895b8f3e9faeb6b4878f184/src/SM.lama#L175
  -- Returns [env, SMCode]
  fun compileExpr (env, stmt, endLabel) {
    -- printf ("Statement to compile to SM: ""%s""\n", stmt.string);
    case stmt of
        Assn (name, expr) -> case compileExpr(env, name, None) of
          [ev, sm] -> case compileExpr(ev, expr, None) of
            [ev2, sm2] -> [ev2, sm <+> sm2 <+ STI <+> maybeJump(endLabel)]
          esac
        esac
      | Seq (expr1, expr2) -> case compileExpr(env, expr1, None) of
          [ev, sm] -> case compileExpr(ev, expr2, endLabel) of
            [ev2, sm2] -> [ev2, sm <+> sm2]
          esac
        esac
      | Skip              -> [env, maybeJump(endLabel)]
      | Read (name) -> [env, singletonBuffer(READ) <+ ST (lookupVar(env, name)) <+> maybeJump(endLabel)]
      | Write (expr) -> case compileExpr(env, expr, None) of
           [ev, sm] -> [ev, sm <+ WRITE <+> maybeJump(endLabel)]
         esac
      | If (cond, s1, s2) -> case endLabel of
             Some(l2) -> case genLabels(env, 1) of
               [l1, ev] -> case compileExpr(ev, cond, None) of
                 [ev1, sm_expr] -> case compileExpr(ev1, s1, Some(l2)) of
                   [ev2, sm1] -> case compileExpr(ev2, s2, Some(l2)) of
                     [ev3, sm2] -> [ev3, sm_expr <+ CJMP(Z, l1)
                                         <+> sm1 <+ LABEL(l1) <+> sm2]
                     esac
                   esac
                 esac
               esac
           | None     -> case genLabels(env, 2) of
               [l1, l2, ev] -> case compileExpr(ev, cond, None) of
                 [ev1, sm_expr] -> case compileExpr(ev1, s1, Some(l2)) of
                   [ev2, sm1] -> case compileExpr(ev2, s2, Some(l2)) of
                     [ev3, sm2] -> [ev3, sm_expr <+ CJMP(Z, l1)
                                         <+> sm1 <+ LABEL(l1) <+> sm2 <+ LABEL(l2)]
                   esac
                 esac
               esac
             esac
           esac
      | While (cond, s)   -> case genLabels(env, 2) of
               [l1, l2, ev] -> case compileExpr(ev, cond, None) of
                  [ev2, sm_expr] -> case compileExpr(ev2, s, Some(l1)) of
                     [ev3, sm] -> [ev3, singletonBuffer(JMP (l1)) <+ LABEL (l2) <+> sm
                         <+ LABEL(l1) <+> sm_expr <+ CJMP(NZ, l2)
                         <+> maybeJump(endLabel)]
                     esac
                  esac
               esac
      | Repeat (s, cond)  -> case genLabels(env, 2) of
               [l1, l2, ev] -> case compileExpr(ev, s, Some(l1)) of
                  [ev2, sm] -> case compileExpr(ev2, cond, None) of
                    [ev3, sm_expr] -> [ev3,     singletonBuffer(LABEL(l2)) <+> sm
                                       <+ LABEL(l1) <+> sm_expr <+ CJMP(Z, l2)
                                       <+> maybeJump(endLabel)]
                    esac
                  esac
               esac
      | Var (name) -> [env, singletonBuffer(LD (lookupVar(env, name))) <+> maybeJump(endLabel)]
      | Ref (name) -> [env, singletonBuffer(LDA (lookupVar(env, name))) <+> maybeJump(endLabel)]
      | Const (val) -> [env, singletonBuffer(CONST (val)) <+> maybeJump(endLabel)]
      | Binop (op, expr1, expr2) -> case compileExpr(env, expr1, None) of
                 [ev1, sm1] -> case compileExpr(ev1, expr2, None) of
                   [ev2, sm2] -> [ev2, sm1 <+> sm2 <+ BINOP (op) <+> maybeJump(endLabel)]
                 esac
               esac
      | Ignore (expr)  -> case compileExpr(env, expr, None) of
              [ev2, sm] -> [env, sm <+ DROP <+> maybeJump(endLabel)]
            esac
      | Call (f, {})  ->
                 case lookupFun (env, f) of
                   Fun (fLabel, n) -> [env, singletonBuffer (CALL (fLabel, n))]
                 esac
      | Call (f, args)  ->
                 case genLabels(env, 1) of
                   [l1, ev] -> case compileExprList(ev, args, Some(l1)) of
                     [ev1, sm_args] ->
                       case lookupFun (ev1, f) of
                         Fun (fLabel, n) -> [ev1, sm_args <+ LABEL(l1) <+ CALL (fLabel, n)]
                       esac
                   esac
                 esac
      | Scope (definitions, expr) ->
                 -- step 1 -- use 'addFun' to all function definitions
                 fun primaryProcessDefinition([env, funs, globals], definition) {
                   case definition of
                     Local (names) -> if isGlobal(env)
                                      then [addVars(env, names), funs, foldl (
                                                                        fun (gc, name) {gc <+ GLOBAL(name)},
                                                                        globals, names
                                                                        )]
                                      else [addVars(env, names), funs, globals]
                                      fi
                   | Fun   (fname, argv, body) -> case genFunLabel(env, fname) of
                       [flabel, ev] -> [addFun(ev, fname, flabel, argv.size), LFun (flabel, argv, body) : funs, globals]
                     esac
                   esac
                 }
                 -- step 2 -- use 'rememberFun' to modified function definitions
                 fun secondaryProcessDefinition(env, LFun(flabel, argv, body)) {
                   rememberFun(env, flabel, argv, body)
                 }

                 case foldl (primaryProcessDefinition,
                            [beginScope(env), {}, emptyBuffer ()], definitions)
                 of
                   [ev, funs, globals] ->
                   case compileExpr(foldl(secondaryProcessDefinition,
                                          ev, funs), expr, None) of
                     [ev1, sm_code] -> [endScope(ev1), globals <+> sm_code]
                   esac
                 esac
    esac
  }

  local compileFuncsFixPoint = fix (fun (f) {
      fun (env, fList) {
       case fList of
         {} -> case getFuns(env) of
                [{}, ev] -> emptyBuffer()
              | [fs, ev] -> f(ev, fs)
              esac
       | Fun (f, args, body, state) : fs ->
         case genLabels(addArgs(beginFun(env, state), args), 1) of
           [l1, ev] -> case compileExpr(ev, body, Some(l1)) of
             [ev1, sm_body] ->
               singletonBuffer (LABEL (f))
               <+ BEGIN (f, args.size, getLocals (env))
               <+> sm_body <+> LABEL(l1) <+ END <+> f(ev1, fs)
           esac
         esac
       esac
      }
    });

  -- fprintf(stderr, "CompileSM: %s\n", expr.string);
  case genLabels(initCompEnv(), 1) of
    [l1, env] -> case compileExpr(env, expr, Some(l1)) of
      [ev, initCode] -> {
                           local mainFunction = singletonBuffer (LABEL ("main"))
                                 <+ BEGIN ("main", 0, getLocals(env))
                                 <+> initCode <+ LABEL(l1) <+ END;
                           local fullSMCode = mainFunction <+> compileFuncsFixPoint(ev, {});

                           fprintf(stderr, "Generated code: %s\n", fullSMCode.string);
                           fullSMCode.getBuffer
                        }
    esac
  esac
}