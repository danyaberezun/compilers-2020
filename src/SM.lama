-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
	if size(insns) == 0 then c
	else
		local i = insns[1], s = c[0], d = c[1], w = c[2];
		case insns[0] of
			  LD(v)     -> eval([singleton(d(v)) +++ s, d, w], i)
			| CONST(ct) -> eval([singleton(ct) +++ s, d, w], i)
			| BINOP(op) -> eval([singleton(evalBinop(op, s[1][0], s[0])) +++ s[1][1], d, w], i)
			| READ      -> local v = readWorld(w);
							eval([singleton(v[0]) +++ s, d, v[1]], i)
			| WRITE     -> eval([s[1], d, writeWorld(s[0], w)], i)
			| ST(v)     -> eval([s[1], d <- [v, s[0]], w], i)
			| _         -> failure("SM-configuration %s not found.\n", insns[0])
		esac
	fi
}

fun evalBinop(op, x, y){
	case op of
		  "*"  ->  (x * y)
		| "/"  ->  (x / y)
		| "%"  ->  (x % y)
		| "+"  ->  (x + y)
		| "-"  ->  (x - y)
		| "==" -> (x == y)
		| "!=" -> (x != y)
		| "<=" -> (x <= y)
		| "<"  ->  (x < y)
		| ">=" -> (x >= y)
		| ">"  ->  (x > y)
		| "&&" -> (x && y)
		| "!!" -> (x !! y)
		| _    -> failure("Operation %s not found.\n", op)
	esac

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
	case expr of
		  Var (v)            -> singleton(LD(v))
		| Const (c)          -> singleton(CONST(c))
		| Binop (op, s1, s2) -> compileExpr(s1) +++ compileExpr(s2) +++ singleton(BINOP(op))
		| _                  -> failure("Expression %s not found.\n", expr)
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
	case stmt of
		  Read (v)      -> singleton(READ) +++ singleton(ST(v))
		| Write (s)     -> compileExpr(s) +++ singleton(WRITE)
		| Assn (v, s)   -> compileExpr (s) +++ singleton(ST(v))
		| Seq (s1, s2)  -> compileSM (s1) +++ compileSM(s2)
		| _             -> failure("Statement %s not found.\n", stmt)
	esac
}
