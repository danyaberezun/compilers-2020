-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c@[st, state, w], insns) {
	case insns of
		  READ : p -> local world = readWorld(w); eval([world[0] : st, state, world[1]], p)
		| WRITE : p -> eval([st[1], state, writeWorld(st[0], w)], p)
		| BINOP(op) : p -> eval([evalOp(op, st[1][0], st[0]) : st[1][1], state, w], p)
		| CONST(n) : p -> eval([n : st, state, w], p)
		| LD(x) : p -> eval([state(x) : st, state, w], p)
		| ST(x) : p -> eval([st[1], state <- [x, st[0]], w], p)
		| {} -> [st, state, w]
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
   		  Const(n) -> singleton(CONST(n))
        | Var(elem) -> singleton(LD(elem))
        | Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
		  Assn(x, e) -> compileExpr(e) +++ singleton(ST(x))
		| Write(x) -> compileExpr(x) +++ singleton(WRITE)
		| Read(x) -> singleton(READ) +++ singleton(ST(x))
		| Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
		| Skip -> {}
	esac
}