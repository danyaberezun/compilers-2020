-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, map, world@[input, output]], insns) {
case insns of
	{} -> c
	 | head : rest_prog -> case head of
					BINOP (op) -> case stack of 
								second : first : stack -> eval (env, [apply (op, first, second) : stack, map, world], rest_prog)
						      esac
					| CONST (n) -> eval (env, [n : stack, map, world], rest_prog)
					| WRITE -> case stack of
								first : stack -> eval (env, [stack, map, writeWorld (first, world)], rest_prog)
						   esac
					| READ -> eval (env, [fst (readWorld (world)) : stack, map, snd (readWorld (world))], rest_prog)
					| ST (x) -> case stack of
								first : stack -> eval (env, [stack, map <- [x, first], world], rest_prog)
						    esac
					| LD (x) -> eval (env, [map (x) : stack, map, world], rest_prog)
					| LABEL (l) -> eval (env, c, rest_prog)
					| JMP (l) -> eval (env, c, fromLabel(env, l))
					| CJMP (cond, l) -> case stack of
								shead : tail -> case cond of
										"z" -> case shead of 
											0 -> eval (env, c, fromLabel (env, l))
											| _ -> eval (env, [tail, map, world], rest_prog)
											esac
										| "n" -> case shead of
											0 -> eval (env, [tail, map, world], rest_prog)
											| _ -> eval (env, c, fromLabel (env, l))
											  esac
										esac
							esac
					| LDA (x) -> eval (env, [Ref(x) : stack, map, world], rest_prog)
					| STI -> case stack of head : Ref(x) : tail -> eval (env, [head : tail, map <- [x, head], world], rest_prog) esac
					| DROP -> case stack of head : tail -> eval(env, [tail, map, world], rest_prog) esac
				esac
esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {return case expr of
    Binop(op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ singleton(BINOP(op)) |
    Var(x) -> singleton(LD(x)) |
    Const(x) -> singleton(CONST(x))
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    fun compileEnv(env, stmt) {
	case stmt of 
		 Read (x) -> [env, (READ:{}) +++ (ST (x):{})]
		| Ref (x) -> [env, LDA(x) : {})]
		| Ignore (x) -> case compileEnv (env, x) of
					[env1, res] -> [env1, res +++ (DROP:{})]
				esac
		| Var (x) -> [env, (LD (x) : {})]
		| Const (n) -> [env, (CONST (n) : {})]
		| Binop (op, l, r) -> case compileEnv (env, l) of
					[env1, lres] -> case compileEnv (env1, r) of
								[env2, rres] -> [env2, lres +++ rres +++ (BINOP (op) : {})]
							esac
				      esac
		| Write (e) -> case compileEnv (env, e) of [env1, res] -> [env1, res +++ (WRITE:{})] esac			
		| Seq (s1, s2) -> case compileEnv (env, s1) of
					[env1, stmt1] -> case compileEnv (env1, s2) of
								[env2, stmt2] -> [env2, stmt1 +++ stmt2]
							esac
				esac
		| Assn (x, e) -> case compileEnv (env, x) of
					[env1, var] -> case compileEnv (env1, e) of
								[env2, res] -> [env2, var +++ res +++ (STI :{})]
							esac
				esac
		| Skip -> [env, {}]
		| If (e, s1, s2) -> case genLabels(env, 2) of 
					[lelse, lfi, env1] -> case compileEnv(env1, e) of
								[env2, e1] -> case compileEnv (env2, s1) of
										[env3, stmt1] -> case compileEnv (env3, s2) of
												   [env4, stmt2] -> [env4, e1 +++ (CJMP ("z", lelse):{}) +++ stmt1 +++ (JMP (lfi):{}) +++ (LABEL (lelse):{}) +++ stmt2 +++ (LABEL (lfi):{})]
												 esac
									      esac
							      esac
				    esac
		| While (e, s) -> case genLabels (env, 2) of 
					[lwhile, lod, env1] -> case compileEnv (env1, e) of
									[env2, res] -> case compileEnv (env2, s) of 
												[env3, stmt1] -> [env3, (LABEL (lwhile):{}) +++ res +++ (CJMP ("z",lod):{}) +++ stmt1 +++ (JMP (lwhile):{}) +++ (LABEL (lod):{})]
											esac
								esac
				esac
		| Repeat (s, e) -> case genLabel (env) of 
					[lrepeat, env1] -> case compileEnv (env1, e) of
								[env2, cond] -> case compileEnv (env2, s) of 
											[env3, stmt1] -> [env3, (LABEL (lrepeat):{}) +++ stmt1 +++ cond +++ (CJMP ("z", lrepeat):{})]
										esac
						     esac
				   esac
	esac
	}
compileEnv (initCompEnv (), stmt)[1]
}
