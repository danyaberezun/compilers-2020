-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
	  | wat -> failure("loc is invalid: %s", loc.string)
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
	fun checkJump(cond, val) {
    case cond of
  	  "z" -> val == 0
    | "n" -> val != 0
  	esac
  }

  fun eval ([stack, cst, state, world], insns) {
		while (size(insns) > 0) do
		  local i = hd(insns);
			insns := tl(insns);
      case i of
			  BEGIN (name, argsCnt, localsCnt) ->
					-- todo refactor with take and foldl?
					local ai = 0;
				  state := makeState(argsCnt, localsCnt);
					while ai < argsCnt do
					  assign(state, Arg (argsCnt - ai - 1), hd(stack));
						stack := tl(stack);
					  ai := ai + 1
				  od
			|	END ->
				  case cst of
					  {} -> insns := {}
					| [newState, newInsns]:cstTail ->
					    cst := cstTail;
						  insns := newInsns;
						  state := newState
					esac
			|	CALL (fLabel, argsCnt) ->
  				cst := [state, insns]:cst;
  				insns := env.fromLabel(fLabel)
			| BUILTIN (f, n) ->
			    local args = case take(stack, n) of [rest, li] ->
					  stack := rest;
						li
					esac;
					case evalBuiltin(f, args, world) of [a, newWorld] ->
						stack := a:stack;
						world := newWorld
					esac
  	  | LD(x) -> stack := lookup(state, x):stack
  	  | LDA(x) -> stack := x:stack
  	  | CONST(const) -> stack := const:stack
  	  | STRING(str) -> stack := str:stack
  	  | BINOP(op) -> case stack of y:x:rest ->
			    stack := calculate(op, x, y):rest
				esac
  	  | ST(x) -> case stack of val:rest ->
			    assign(state, x, val)
				esac
  	  | STI -> case stack of val:ref:rest ->
				  assign(state, ref, val);
				  stack := val:rest
			  esac
			| STA -> case stack of val:i:arr:rest ->
			    arr[i] := val;
			    stack := val:rest
			  esac
  	  | Var(x) -> stack := state(x):stack
  	  | DUP -> case stack of x:rest ->
			    stack := x:x:rest
				esac
  	  | LABEL(l) -> {}
  	  | JMP(l) -> insns := fromLabel(env, l)
  	  | CJMP(cond, l) -> case stack of val:rest ->
			    stack := rest;
					if checkJump(cond, val) then
					  insns := fromLabel(env, l)
					fi
				esac
      | DROP -> case stack of x:rest ->
			    stack := rest
				esac
			| ELEM -> case stack of i:x:rest ->
			    stack := x[i]:rest
        esac
      | GLOBAL (x) -> skip
			| ARRAY (n) -> case take (stack, n) of [rest, li] ->
			    stack := listArray(li):rest
			  esac
      | _ -> failure("evalSM: can't parse instruction: %s\n", i.string)
			esac
	  od;
		[stack, cst, state, world]
	}
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun si(x) { singleton(x) }

fun collectGlobals(allCode) {
  fun inner(code, globals) {
    case code of
      {} -> globals
    | head:tail ->
      fun helper(x) { inner(tail, addSet(globals, x)) }
      case head of
        ST  (Glb (x)) -> helper(x)
      | LD  (Glb (x)) -> helper(x)
      | LDA (Glb (x)) -> helper(x)
      | _ -> inner(tail, globals)
      esac
    esac
  }
  local globalsSet = inner(allCode, emptySet(compare));
  local globals = foldSet(fun (acc, x) { x:acc }, {}, globalsSet);
  map(fun (x) { GLOBAL (x) }, globals)
}

public fun compileSM(stmt) {
  local env = beginScope(initCompEnv());
	case compileSM0(stmt, env) of [mainCode, env] ->
	  local pref = {LABEL ("main"), BEGIN("main", 0, getLocals(env))};
		case getFuns(env) of [functions, env] ->
			case foldl(funCompiler, [{}, env], functions) of [funCode, env] ->
				local code = mainCode +++ si(END) +++ funCode;
        pref +++ collectGlobals(code) +++ code
			esac
		esac
	esac
}

-- returns new env with added vars and remembered functions
fun addDefinitions(env, defs) {
  fun addDef(s@[state, remFunctions], d) {
    case d of
      Local (args) -> [addVars(state, args), remFunctions]
		| Fun (name, args, body) ->
		  case genFunLabel(state, name) of [fLabel, state] -> [
			  addFun(state, name, fLabel, args),
				[fLabel, args, body]:remFunctions
			]
			esac
    esac
  }
	fun remFun(state, f) {
    case f of [fLabel, args, body] ->
      rememberFun(state, fLabel, args, body)
  	esac
  }

  case foldl(addDef, [env, {}], defs) of [env, remFunctions] ->
	  foldl(remFun, env, remFunctions)
	esac
}

fun compileFunction(f@Fun (fLabel, args, body, state), env) {
  case beginFun(env, state) of env ->
    case addArgs(env, args) of env ->
			local vvv = compileSM0(body, env);
      case vvv of [compiledBody, env] ->
        local funCode = {LABEL(fLabel), BEGIN(fLabel, size(args), getLocals(env))}
	        +++ compiledBody
			    +++ si(END);
			  [funCode, env]
	    esac
	  esac
	esac
}

fun argCompiler([code, env], arg) {
  case compileSM0(arg, env) of [argCode, env] ->
	  [code +++ argCode, env]
	esac
}

fun funCompiler([code, env], f@Fun(fLabel, args, body, s)) {
  case compileFunction(f, env) of [funCode, env] ->
		[code +++ funCode, env]
	esac
}

fun checkArgs(f, exp, act) {
  if exp != act then
	  failure("function %s: expected %d arguments, found: %s", f, exp, act)
	fi
}

fun checkBuiltinArgs(f, act) {
  local exp = case f of
    "stringval" -> 1
  | "length" -> 1
  | "read" -> 0
  | "write" -> 1
	esac;
	if act != exp then
	  failure("builtin function %s: expected %d arguments, found: %s", f, exp, act)
	fi
}

fun compileSMList(stmts, env) {
	fun inner([codes, env], stmt) {
	  case compileSM0(stmt, env) of [code, env] -> [code:codes, env] esac
	}
	case foldl(inner, [{}, env], stmts) of [codes, env] ->
	  [reverse(codes), env]
	esac
}

public fun compileSM0 (stmt, env) {
  case stmt of
		Scope(defs, expr) ->
			case addDefinitions(beginScope(env), defs) of env ->
				case compileSM0(expr, env) of [code, env] ->
				  [code, endScope(env)]
				esac
			esac
	| Call(fname, args) ->
	  case foldl(argCompiler, [{}, env], args) of [argsCode, env] ->
		  local callCode = case isBuiltin(fname) of
			  true  -> checkBuiltinArgs(fname, size(args));
				         si(BUILTIN (fname, size(args)))
			| false -> case lookupFun(env, fname) of Fun(fLabel, nargs) ->
		               checkArgs(fname, size(nargs), size(args));
									 si(CALL (fLabel, size(args)))
				         esac
		  esac;
			[argsCode +++ callCode, env]
		esac
	| Builtin (fname, args) ->
	  case foldl(argCompiler, [{}, env], args) of [argsCode, env] ->
			checkBuiltinArgs(fname, size(args));
			[argsCode +++ si(BUILTIN (fname, size(args))), env]
		esac
  | Seq (head, tail) ->
			case compileSMList({head, tail}, env) of [{headSM, tailSM}, env] ->
			  [headSM +++ tailSM, env]
			esac
	| Skip -> [{}, env]
	| Ref(z) -> [si(LDA(lookupVar(env, z))), env]
  | Assn (z, expr) ->
	  case compileSMList({z, expr}, env) of [{zSM, exprSM}, env] ->
			local command = case z of
				ElemRef(_, _) -> STA
			| _ -> STI
			esac;
  		[zSM +++ exprSM +++ si(command), env]
		esac
	| Binop(op, x, y) ->
	  case compileSMList({x, y}, env) of [{xSM, ySM}, env] ->
			[xSM +++ ySM +++ si(BINOP(op)), env]
		esac
	| Var(x) -> [si(LD(lookupVar(env, x))), env]
	| Const(c) -> [si(CONST(c)), env]
	| String (str) -> [si(STRING(str)), env]
  | Write (expr) ->
	  case compileSM0(expr, env) of [compE, env] ->
		  [compE +++ si(WRITE), env]
		esac
	| w@While (e, b) ->
	  case genLabels(env, 2) of [l1, l2, env] ->
		  case compileSMList({e, b}, env) of [{compE, compB}, env] ->
				local joined = (LABEL(l1):compE) +++ (CJMP("z",l2):{})
				  +++ compB
					+++ (JMP(l1):LABEL(l2):{});
				[joined, env]
			esac
		esac
	| If (e, b1, b2) ->
	  case genLabels(env, 2) of [le, lfi, env] ->
			case compileSMList({e, b1, b2}, env) of [{compE, compB1, compB2}, env] ->
				local joined = compE +++ si(CJMP("z", le))
				                 +++ compB1 +++ ({JMP(lfi),
				    					 LABEL(le)})
				    						 +++ compB2 +++
				    					 si(LABEL(lfi));
				[joined, env]
		  esac
		esac
	| Repeat (s, e) ->
	  case genLabel(env) of [l, env] ->
		  case compileSMList({s, e}, env) of [{compS, compE}, env] ->
				[si(LABEL(l)) +++ compS +++ compE +++ si(CJMP("z", l)), env]
			esac
	  esac
	| Elem (x, i) ->
	  case compileSMList({x, i}, env) of [{xSM, iSM}, env] ->
			[xSM +++ iSM +++ si(ELEM), env]
		esac
	| ElemRef (x, i) ->
	  case compileSMList({x, i}, env) of [{xSM, iSM}, env] ->
			[xSM +++ iSM, env]
		esac
	| Array (exprs) ->
	  case compileSMList(exprs, env) of [codes, env] ->
		  [deepFlatten(codes) +++ si(ARRAY(size(exprs))), env]
		esac
  | i@Ignore (expr) ->
    case compileSM0(expr, env) of [compExpr, env] ->
      [compExpr +++ si(DROP), env]
    esac
  | wat -> failure("SM: can't parse command: %s\n", wat.string)
  esac
}
(* End *)
