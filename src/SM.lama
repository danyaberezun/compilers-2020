-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
(* Assignment *)
fun eval (env, conf@[st, sm_env, wrld], insns) {
  fun satisfies(value, condition) {
    case condition of
      "z"  -> value != 0
    | "nz" -> value == 0
    | _    -> failure ("Only Jnz and Jz are supported") 
    esac
  }

  fun head(x:xs) { x  }
  fun tail(x:xs) { xs }

  case insns of 
      {} -> conf
  | x:xs -> {

      case x of 
          LABEL (_)    -> skip
        |   JMP (l)    -> xs := env.fromLabel(l) 
        |  CJMP (x, l) -> if head(st).satisfies(x) then conf := [tail(st), sm_env, wrld]
                                                   else xs   := env.fromLabel(l)
                          fi 
        | _ -> conf := 
                case x of 
                   DROP      -> [tail(st), sm_env, wrld]
                |   LDA (x)  -> [Ref(x):st, sm_env, wrld]
                |   STI      -> case st of v:Ref(x):st -> [v:st, sm_env <- [x, v], wrld] esac
                | BINOP (op) -> case st of y:x:st -> [op.asFunc(x, y):st, sm_env, wrld] esac
                |  READ      -> case readWorld (wrld) of [z, wrld] -> [z:st, sm_env, wrld] esac
                | WRITE      -> case st of z:st -> [st, sm_env, writeWorld (z, wrld)] esac
                |    ST (x)  -> case st of z:st -> [st, sm_env <- [x, z], wrld] esac
                |    LD (x)  -> [sm_env(x):st, sm_env, wrld]
                | CONST (c)  -> [c:st, sm_env, wrld]
                esac
      esac;

      eval (env, conf, xs)
    }
  esac
}
(* End *)

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
(* Assignment *)
public fun compileSM (stmt) {
   compileExpr(stmt, [initCompEnv(), None])[0]
}

-- compileSMInEnvironment :: Stmt -> (CompEnv, Maybe Label) -> (CompEnv, Maybe Label)
public fun compileExpr (stmt, env@[labels, ret]) {
  infixl >>= after : ([code, env], f) { 
    case f (env) of [code2, env] -> [code +++ code2, env] esac -- a La bind for writer
  } 
  fun run_(labels) { [{}, [labels, None]] }                 -- start writer
  fun exp_(expr)   { fun (env) { compileExpr(expr, env) } } -- write expression
  fun cmd_(command){ fun (env) { [command :{}, env]     } } -- write single command

  fun lfi_ (mbRet)  { fun ([labels, _]) { [{}, [labels, mbRet]] } } -- set the return label to mbRet      

  case stmt of 
      Skip            -> run_(labels)
  |    Var (x)        -> run_(labels) >>= cmd_(LD (x))
  |    Ref (x)        -> run_(labels) >>= cmd_(LDA (x))
  |  Const (i)        -> run_(labels) >>= cmd_(CONST (i))
  |  Binop (op, x, y) -> run_(labels) >>= exp_(x) >>= exp_(y) >>= cmd_(BINOP (op))
  | Ignore (x)        -> run_(labels) >>= exp_(x)    >>= cmd_(DROP)
  |   Read (x)        -> run_(labels) >>= cmd_(READ) >>= cmd_(ST (x))
  |  Write (e)        -> run_(labels) >>= exp_(e)    >>= cmd_(WRITE)
  |   Assn (x, e)     -> run_(labels) >>= exp_(x)    >>= exp_(e)      >>= cmd_(STI)
  |    Seq (e1, e2)   -> run_(labels) >>= exp_(e1)   >>= exp_(e2)
  |  While (cnd, st)  -> case labels.genLabels(2) of [le, ls, labels] 
                                             -> run_(labels) 
                                            >>= cmd_( JMP (le)        )  --      JMP Le
                                            >>= cmd_( LABEL (ls)      )  -- Ls:
                                            >>= exp_( st              )  --      [st]  
                                            >>= cmd_( LABEL (le)      )  -- Le:
                                            >>= exp_( cnd             )  --      [cnd != 0]
                                            >>= cmd_( CJMP ("nz", ls) )  --      jnz Ls
                        esac
  | Repeat (st, cnd) -> case labels.genLabels(1) of [l, labels] 
                                             -> run_(labels)
                                            >>= cmd_( LABEL (l)     ) -- L:
                                            >>= exp_( st            ) --     [st]
                                            >>= exp_( cnd           ) --     [cnd != 0]
                                            >>= cmd_( CJMP ("z", l) ) --     jz L
                        esac 
  | If (cnd, th, el) -> case ret of
                          None -> case labels.genLabels(2) of [le, lfi, labels]
                                             -> run_(labels)
                                            >>= lfi_( Some (lfi)     ) --                 # set the return label
                                                                       -- 
                                            >>= exp_( cnd            ) --     [cnd != 0]
                                            >>= cmd_( CJMP ("z", le) ) --     jz Le
                                            >>= exp_( th             ) --     [th]
                                            >>= cmd_( JMP (lfi)      ) --     jmp Lfi
                                            >>= cmd_( LABEL (le)     ) -- Le:
                                            >>= exp_( el             ) --     [el]
                                            >>= cmd_( LABEL (lfi)    ) -- Lfi:
                                                                       -- 
                                            >>= lfi_( None           ) --                 # clear the return label
                                  esac
                        | Some (lfi) -> case labels.genLabels(1) of [le, labels]
                                             -> run_(labels)
                                            >>= lfi_( Some (lfi)     ) --                 # set the return label
                                                                       -- 
                                            >>= exp_( cnd            ) --     [cnd != 0]
                                            >>= cmd_( CJMP ("z", le) ) --     jz Le
                                            >>= exp_( th             ) --     [th]
                                            >>= cmd_( JMP (lfi)      ) --     jmp Lfi     # label already exists
                                            >>= cmd_( LABEL (le)     ) -- Le:
                                            >>= exp_( el             ) --     [el]
                                                                       --
                                            >>= lfi_( None           ) --                 # clear the return label
                                        esac      
                        esac
  esac
}
(* End *)
