-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case c of [s, d, w@[in, out]] ->
    case insns of
      {} -> c  
    | LD (x) : e -> eval(env, [d(x) : s, d, w], e)
    | ST (x) : e -> case s of a : ss -> eval(env, [s, (d <- [x, a]), w], e) esac
    | CONST(c) : e -> eval(env, [c : s, d, w], e)
    | BINOP(op) : e -> case s of r : l : ss -> eval(env, [binopOp(op, l, r) : ss, d, w], e) esac
    | READ : e -> case in of elem : i -> eval(env, [elem: s, d, [i, out]], e) esac
    | WRITE : e -> case s of elem : ss -> eval(env, [ss, d, [in, elem : out]], e) esac
    | LABEL(s) : e -> eval(env, c, e)
    | JMP(l) : e -> eval(env, c, fromLabel(env, l))
    | CJMP(cond, l)  : e -> case s of cmp : ss -> case cond of
                                                    "z" -> case cmp of
                                                             0 -> eval(env, c, fromLabel (env, l))
                                                           | _ -> eval(env, c, e)
                                                            esac
                                                  | "nz" -> case cmp of
                                                              0 -> eval(env, c, e)
                                                            | _ -> eval(env, c, fromLabel (env, l))
                                                            esac
                                                  esac
                            esac
    esac                      
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of 
    Var   (x)         -> singleton (LD (x))
  | Const (n)         -> singleton (CONST (n))
  | Binop (b, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ singleton (BINOP (b))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  fun compileEnv (env, stmt) {
    case stmt of
      Assn(x, expr) -> [env, compileExpr(expr) +++ singleton(ST(x))]
    | Read(x) -> [env, {READ, ST(x)}]
    | Write(expr) -> [env, compileExpr(expr) +++ singleton(WRITE)]
    | Skip -> [env, {}]
    | Seq(s1,s2) -> case compileEnv(env, s1) of
                      [env1, stmt1] -> case compileEnv (env1, s2) of
                                        [env2, stmt2] -> [env2, stmt1 +++ stmt2]
                                      esac
                    esac
    | While(expr, s) -> case genLabels(env,2) of
                          [l1, l2, env1] -> case compileEnv(env1, s) of
                                              [env2, insns] -> [env2, {JMP (l2), LABEL (l1)} +++ 
                                               insns +++ singleton (LABEL (l2)) +++ compileExpr(expr)
                                               +++ singleton(CJMP ("nz", l1))]
                                            esac
                        esac
    | Repeat(s, expr) -> case genLabels(env, 1) of 
                          [l, env1] -> case compileEnv(env1, s) of
                                          [env2, insns] -> [env2, singleton(LABEL (l)) +++ insns
                                           +++ compileExpr(expr) +++ singleton(CJMP("z", l))]
                                        esac
                        esac
    | If(expr, s1, s2) -> case genLabels(env, 2) of
                            [le, lf, env1] -> case compileEnv (env1, s1) of
                                                [env2, stmt1] -> case compileEnv(env2, s2) of
                                                                  [env3, stmt2] -> [env3, compileExpr(expr)
                                                                   +++ singleton(CJMP ("z", le)) +++ stmt1 +++
                                                                   singleton (JMP(lf)) +++ singleton(LABEL (le))
                                                                   +++ stmt2 +++ singleton(LABEL (lf))]
                                                                esac
                                              esac
                          esac
    esac
  }
  compileEnv(initCompEnv(), stmt)[1]
}
