-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun helper(c@[st, state, w], i) {
    case i of
        BINOP(op) -> case st of 
          a:b:r -> [(evalExpr(state, Binop(op, Const(a), Const(b)))):r, state, w] 
        esac |
        CONST(n)  -> [n:st, state, w] |
        READ ->
          local tmp;
          tmp := readWorld(w);
          [tmp[0]:st, state, tmp[1]] |
        WRITE -> case st of 
          a:r -> [r, state, writeWorld(a, w)] 
        esac |
        LD(x) -> [state(x) : st, state, w] |
        ST(x) -> case st of 
          a:r -> [r, state <- [x, a], w] 
        esac
      esac
  }
  case insns of
    {} -> c |
    i:is -> eval((helper(c, i)), is)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop(op, l, r) -> {compileExpr(r), compileExpr(l), BINOP(op)} |
    Var(x) -> LD(x) |
    Const(n) -> CONST(n)
  esac
}

fun deepFlatten (l) {
  local res = [0, {}], curr = [res];

  fun append (x) {
    local new = x : {};
    
    curr [0][1] := new;
    curr [0] := new    
  }

  fun traverse (l) {
    case l of
      _ : _ -> iter (traverse, l)
    | {}    -> skip
    | _     -> append (l)
    esac
  }
  
  traverse (l);
  
  res [1]
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun helper(stmt) { 
    case stmt of
      Skip -> {} |
      Assn(x, e) -> {compileExpr(e), ST(x)} |
      Read(x) -> {READ, ST(x)} |
      Write(e) -> {compileExpr(e), WRITE} |
      Seq(s1, s2) -> {helper(s1), helper(s2)}
    esac
  }
  deepFlatten(helper(stmt))
}
