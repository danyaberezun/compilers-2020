-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, configuration, insns)
{
  local stack; 
  local st; 
  local wrld; 
  stack := configuration [0]; 
  st := configuration [1]; 
  wrld := configuration [2]; 

  case insns of 
  	  {} -> configuration 
  	| BINOP (op) : programm -> case stack of y:x:stack      -> eval(env, [(evalExpr (st, Binop (op, Const (x), Const (y)))):stack, st, wrld], programm) esac 
 	| READ : programm -> case readWorld (wrld) of [z, wrld] -> eval(env, [z:stack, st, wrld], programm) esac 
	| WRITE : programm -> case stack of z:stack             -> eval(env, [stack, st, writeWorld (z, wrld)], programm) esac 
	| ST (x) : programm -> case stack of z:stack            -> eval(env, [stack, st <- [x, z], wrld], programm) esac 
	| LD (x) : programm                                     -> eval(env, [st(x):stack, st, wrld], programm) 
	| CONST (n) : programm                                  -> eval(env, [n:stack, st, wrld], programm) 
	| LABEL (s) : programm 				  -> eval(env, configuration, programm)
	| JMP (l) : programm 					  -> eval(env, configuration, fromLabel(env, l))
	| CJMP (cond, l) : programm -> case stack of flag:stack -> case cond of
								  	  "z" -> case flag of 
								  	  	    0 -> eval(env, configuration, fromLabel(env, l))
								  	  	  | _ -> eval(env, configuration, programm)
								  	         esac
								  	| "nz" -> case flag of
								  		    0 -> eval(env, configuration, programm)
								  		  | _ -> eval(env, configuration, fromLabel(env, l))
								  		  esac
								   esac
				     esac 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) 
{
  case expr of
    Var (x)          -> return singleton(LD(x))
  | Const (n)        -> return singleton(CONST(n))
  | Binop (op, l, r) -> return compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) 
{
  fun compileEnvironment(env, stmt)
  {
    case stmt of
      Assn (x, expr)    -> return [env, compileExpr(expr) +++  singleton(ST(x))]
    | Seq (st1, st2)     -> case compileEnvironment(env, st1) of [new_env1, new_st1] ->
    				case compileEnvironment(new_env1, st2) of [new_env2, new_st2] ->
    				   return [new_env2, new_st1 +++ new_st2]
    				esac
    			     esac
    | Skip               -> return [env, {}]
    | Read (x)           -> return [env, singleton(READ) +++ singleton(ST(x))]
    | Write (expr)       -> return [env, compileExpr(expr) +++ singleton(WRITE)]
    | While (expr, st1) -> case genLabels(env, 2) of [label1, label2, new_env] -> 
   				case compileEnvironment(new_env, st1) of [new_env1, st2] -> 
   				  return [new_env1, singleton(JMP(label2)) +++ singleton(LABEL(label1)) +++ st2 +++ singleton(LABEL(label2))  +++ compileExpr(expr) +++ singleton(CJMP("nz", label1))]
   				esac
    			    esac
    | Repeat (st1, expr) -> case genLabels(env, 1) of [label1, new_env] ->
    			     	case compileEnvironment(new_env, st1) of [new_env1, st2] -> 
    			     	  return [new_env1, singleton(LABEL(label1)) +++ st2 +++ compileExpr(expr) +++ singleton(CJMP("z", label1))]
    			     	esac
    			     esac
    | If (expr, st1, st2) -> case genLabels(env, 2) of [labelElse, labelFi, new_env] ->
    			      	 case compileEnvironment(new_env, st1) of [new_env1, new_st1] ->
    			      	    case compileEnvironment(new_env1, st2) of [new_env2, new_st2] ->
    			      	    	return [new_env2, compileExpr(expr) +++ singleton(CJMP("z", labelElse)) +++ new_st1 +++ singleton(JMP(labelFi)) +++ singleton(LABEL(labelElse)) +++ new_st2 
    			      	    	        +++ singleton(LABEL(labelFi))]
    			      	    esac
    			      	 esac   
    			      esac
    | _ -> failure("Statement %s not found. \n", stmt)
    esac
  }
  
  local env = initCompEnv ();
  compileEnvironment(env, stmt)[1]
}

