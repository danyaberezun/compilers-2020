-- Stack machine.
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;
-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}
public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}
-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}
-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun eval (env, c, insns) {
  case c of
    [stack, st, w@[i, o]] -> case insns of
        {} -> c
      | BINOP (op): other -> case stack of x : y : nstack -> eval (env, [evalOp (op, y, x) : nstack, st, w], other) esac
      | CONST (n) : other -> eval (env, [n : stack, st, w], other)
      | READ      : other -> eval (env, [fst (readWorld (w)) : stack, st, snd (readWorld (w))], other)
      | WRITE     : other -> case stack of x : nstack -> eval (env, [nstack, st, writeWorld (x, w)], other) esac
      | LD    (x) : other -> eval (env, [st (x) : stack, st, w], other)
      | ST    (x) : other -> case stack of y : nstack -> eval (env, [nstack, (st <- [x, y]), w], other) esac

      | LABEL (nm): other -> eval(env, c, other)
      | JMP (lb)  : other -> eval(env, c, fromLabel(env, lb)) 
      | CJMP (cond, l): other -> case stack of
								shead : tail -> case cond of
										"z" -> case shead of 
											0 -> eval (env, c, fromLabel (env, l))
											| _ -> eval (env, [tail, st, w], other)
											esac
										| "nz" -> case shead of
											0 -> eval (env, [tail, st, w], other)
											| _ -> eval (env, c, fromLabel (env, l))
											 esac
										esac
							    esac
      | LDA (x) : other -> eval (env, [Ref (x) : stack, st, w], other)
			| STI : other -> case stack of
							head : Ref (x) : nstack -> eval (env, [head : nstack, st <- [x, head], w], other)
						 esac
			| DROP : other -> case stack of
							head : nstack -> eval (env, [nstack, st, w], other)
						  esac
    esac
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

public fun compileSM (stmt) {

    fun compileEnv (env, stmt) {
        case stmt of
            Ref (x) -> [env, (LDA (x):{})]
		      | Ignore (x) -> case compileEnv (env, x) of
					      [env1, res] -> [env1, res +++ (DROP:{})]
				              esac
		      | Var (x) -> [env, (LD (x) : {})]
		      | Const (n) -> [env, (CONST (n) : {})]
		      | Binop (op, l, r) -> case compileEnv (env, l) of
					        [env1, lres] -> case compileEnv (env1, r) of
								      [env2, rres] -> [env2, lres +++ rres +++ (BINOP (op) : {})]
							esac
				      esac
          | Assn (x, expr) -> case compileEnv (env, x) of
					         [env1, place] -> case compileEnv (env1, expr) of
								          [env2, res] -> [env2, place +++ res +++ (STI :{})]
							                    esac
				                   esac

          | Read (x)       -> [env, singleton(READ)+++ singleton(ST (x))]

          | Write (expr) -> case compileEnv (env, expr) of
					               [env1, var] -> [env1, var +++ (WRITE:{})]
				                    esac

          | Skip           -> [env, {}]

          | Seq (s1, s2)   -> case compileEnv (env, s1) of
					                            [env1, stmt1] -> case compileEnv (env1, s2) of
								                                                  [env2, stmt2] -> [env2, stmt1 +++ stmt2]
							                                         esac
				                      esac

          | While (expression, s)   -> case genLabels(env, 2) of [lb1, lb2, env0] -> 
              case compileEnv(env0, expression) of [env1, expr] ->
									case compileEnv(env1, s) of [env2, insns] ->
										[env2, {JMP (lb2), LABEL (lb1)} +++ insns +++ singleton(LABEL (lb2)) +++ expr +++ singleton(CJMP ("nz", lb1))]
									esac
								       esac
                  esac

          | Repeat (s, expression)  -> case genLabels(env, 1) of [lb, env0] ->
              case compileEnv(env0, expression) of [env1, expr] ->
									case compileEnv(env1, s) of [env2, insns] ->
										[env2, singleton(LABEL (lb)) +++ insns +++ expr +++ singleton(CJMP ("z", lb))]
									esac
								    esac
                      esac
          
          | If (expression, s1, s2) -> case genLabels(env, 2) of [lb_else, lb_fi, env0] -> 
          case compileEnv(env0, expression) of [env1, expr] ->
            case compileEnv (env1, s1) of
								[env2, stmt1] -> case compileEnv (env2, s2) of
										[env3, stmt2] -> [env3, expr +++ singleton(CJMP ("z", lb_else)) +++ stmt1 +++ singleton(JMP (lb_fi)) 
                    +++ singleton(LABEL (lb_else)) +++ stmt2 +++ singleton(LABEL (lb_fi))]
										             esac
							                    esac
				                      esac
                              esac
        esac
                              } 
              compileEnv (initCompEnv (), stmt)[1]
}