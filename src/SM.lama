-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

public fun binopCalc (op, a, b) {
	case op of
			"+"  -> (a + b)
		  | "-"  -> (a - b)
		  | "*"  -> (a * b)
		  | "/"  -> (a / b)
		  | "%"  -> (a % b)
		  | "==" -> (a == b)
		  | "!=" -> (a != b)
		  | "<"  -> (a < b)
		  | "<=" -> (a <= b)
		  | ">"  -> (a > b)
		  | ">=" -> (a >= b)
		  | "&&" -> (a && b)
		  | "!!" -> (a !! b)
		esac
}


-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    if size(insns) <= 0 then c 
	else
		case insns[0] of
		  BINOP(op) 	-> 
			case st of a : b : tl ->
				eval([binopCalc(op, b, a) : tl, cst, s, w], insns[1])
			esac 
		| CONST  (n)  	-> 
			eval([n : st, cst, s, w], insns[1])
		| LD     (x)   	-> 
			eval([lookup(s, x) : st, cst, s, w], insns[1])
		| LDA    (x)  	-> 
			eval([Ref(x) : st, cst, s, w], insns[1])
		| ST     (x)   	-> 
			assign(s, x, st[0]);
			eval([st[1], cst, s, w], insns[1])
		| STI			->
			case st of v : Ref(x) : st2 -> 
				assign(s, x, v);
				eval([v:st2, cst, s, w], insns[1])
			esac
		| DROP 			->
			eval([st[1], cst, s, w], insns[1])
		| LABEL (_)		-> eval(c, insns[1]) 
		| JMP   (l)		-> eval(c, fromLabel(env, l))
		| CJMP  (c, l)	-> 
			case st of a : tl ->
				if ((compare(c, "z")==0 && a==0) !! (compare(c, "nz")==0 && a))
				then eval([tl, cst, s, w], fromLabel(env, l))
				else eval([tl, cst, s, w], insns[1])
				fi
			esac
		| GLOBAL (x)	-> 
			assign(s, Glb(x), 0);
			eval([st, cst, s, w], insns[1])
		| CALL (f, a) 	-> 
			case f of 
			  "read"  ->
				case evalBuiltin(f, {}, w) of [res, w1] ->
					eval([res : st, cst, s, w1], insns[1])
				esac
			| "write" ->
				case st of x : st2 ->
					case evalBuiltin(f, x:{}, w) of [res, w1] ->
						eval([res : st2, cst, s, w1], insns[1])
					esac
				esac
			| _ -> eval([st, [s, insns[1]] : cst, s, w], fromLabel(env, f))
			esac
		| BEGIN (f, a, l) -> 
			case take(st, a) of [st2, vals] ->
				local s = makeState(a, l), i;
				for i:=0, i  < a, i := i+1 do
					assign(s, Arg(i), vals[0]);
					vals := vals[1]
				od;
				eval([st2, cst, s, w], insns[1])
			esac
		| END 			->
			case cst of
			  {} -> c
			| [s1, insns1] : tl -> eval([st, tl, s1, w], insns1)
			esac
		| BUILTIN (f, n) ->
			case take(st, n) of [st2, vals] ->
				case evalBuiltin(f, vals, w) of [res, w1] ->
					eval([res : st2, cst, s, w1], insns[1])
				esac
			esac
		| STRING (str) -> eval([str : st, cst, s, w], insns[1])
		| ARRAY (n) ->
			case take(st, n) of [st2, vals] ->
				eval([listArray(vals) : st2, cst, s, w], insns[1])
			esac
		| STA -> 
			case st of v : i : a : tl ->
				a[i] := v;
				eval([v : tl, cst, s, w], insns[1])
			esac
		| ELEM -> 
			case st of i : a : tl ->
				eval([a[i] : tl, cst, s, w], insns[1])
			esac
		esac
	fi
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun addDefs(env, defs) {
	if size(defs) == 0 then [env, {}, {}]
	else
		case defs[0] of
		  Local (vars) 			-> 
			if isGlobal(env) then 
				local globs = foldr(fun (l, x) {
					GLOBAL(x) : l
					}, {}, vars);
				case addDefs(addVars(env, vars), defs[1]) of [env1, f, d] ->
					[env1, f, globs +++ d]
				esac
			else addDefs(addVars(env, vars), defs[1])
			fi
		| Fun (name, args, body) ->
			case genFunLabel(env, name) of [fLabel, env1] ->
				case addDefs(addFun(env1, name, fLabel, size(args)), defs[1]) of [env2, f, d] ->
					[env2, [fLabel, args, body] : f, d]
				esac
			esac
		esac
	fi
}

fun compileSMList(env, exprs){
	case exprs of
	  {} 		-> [env, {}]
	| expr : tl	->
		case compileSM1(env, expr, "") of [env1, insns] -> 
			case compileSMList(env1, tl) of [env2, insns2] ->
				[env2, insns +++ insns2]
			esac
		esac
	esac
}

fun compileSM1 (env, expr, lEnd) {
	case expr of
	  Var(x) 		  -> [env, singleton(LD (lookupVar(env, x)))]
	| Ref(x) 		  -> [env, singleton(LDA(lookupVar(env, x)))]
	| Ignore(e)		  -> 
		case compileSM1(env, e, lEnd) of [env1, insns] ->
			[env1, insns +++ singleton(DROP)]
		esac
	| Const(n)		  -> [env, singleton(CONST(n))]
	| Binop(op, e1, e2)-> 
		case compileSM1(env, e1, "") of [env1, insns1] -> 
			case compileSM1(env1, e2, "") of [env2, insns2] ->
				[env2, insns1 +++ insns2 +++ singleton(BINOP(op))]
			esac
		esac
	| Assn(x, e)	  -> 
		case compileSM1(env, x, "") of [env1, insns1] -> 
			case compileSM1(env1, e, "") of [env2, insns2] -> 
				case x of
				  ElemRef(_, _) -> 
					[env2, insns1 +++ insns2 +++ singleton(STA)]
				| _ -> [env2, insns1 +++ insns2 +++ singleton(STI)]
				esac
			esac
		esac
	| Seq(s1, s2)     -> 
		case compileSM1(env, s1, "") of [env1, insns1] -> 
			case compileSM1(env1, s2, lEnd) of [env2, insns2] ->
				[env2, insns1 +++ insns2]
			esac
		esac
	| Skip 			  -> [env, {}]
	| While(e, s)	  -> 
		case genLabels(env, 2) of [l1, l2, env1] ->
			case compileSM1(env1, e, "") of [env15, insnsE] ->
				case compileSM1(env15, s, "") of [env2, insns] ->
					[env2, {JMP (l2), LABEL (l1)} +++ 
							insns +++ 
							singleton(LABEL (l2)) +++ 
							insnsE +++
							singleton(CJMP ("nz", l1)) ]
				esac
			esac
		esac
	| Repeat(s, e)    ->
		case genLabels(env, 1) of [l, env1] ->
			case compileSM1(env1, s, "") of [env2, insns] ->
				case compileSM1(env2, e, "") of [env3, insnsE] ->
					[env3, singleton(LABEL(l)) +++
						insns +++
						insnsE +++
						singleton(CJMP("z", l))]
				esac
			esac
		esac
	| If(e, s1, s2)   ->
		case genLabels(env, 2) of [lElse, lFi, env1] ->
			if compare(lEnd, "") == 0 then lEnd := lFi fi;
			case compileSM1(env1, e, "") of [env15, insnsE] ->
				case compileSM1(env15, s1, lEnd) of [env2, insns1] ->
					case compileSM1(env2, s2, lEnd) of [env3, insns2] ->
						[env3, insnsE +++
							singleton(CJMP("z", lElse)) +++
							insns1 +++
							singleton(JMP(lEnd)) +++
							singleton(LABEL(lElse)) +++
							insns2 +++
							singleton(LABEL(lFi))]
					esac
				esac
			esac
		esac
	| Scope(defs, e)  -> 
		case addDefs(beginScope(env), defs) of [env1, funs, insnsDef] ->
			case foldl(fun (env, [fLabel, args, body]){
					rememberFun(env, fLabel, args, body)
				}, env1, funs) of env2 ->
				case compileSM1(env2, e, "") of [env3, insns] ->
					[endScope(env3), insnsDef +++ insns]
				esac
			esac
		esac
	| Call (f, exprs) -> 
		  case compileSMList(env, exprs) of [env1, insns1] ->
			case f of 
			  "read"  -> [env1, insns1 +++ singleton(CALL(f, 0))]
			| "write" -> [env1, insns1 +++ singleton(CALL(f, 1))]
			| _ 	  ->
				case lookupFun(env1, f) of Fun(fLabel, n) ->
					[env1, insns1 +++ singleton(CALL(fLabel, n))]
				esac
				
				--[env1, singleton(CONST(0))]
			esac
		esac
	| Fun (fLabel, args, body, fEnv) ->
	  case compileSM1(addArgs(beginFun(env, fEnv), args), body, "") of
		[env1, insnsf] ->
			[env1, {LABEL(fLabel), 
					BEGIN(fLabel, size(args), getLocals(env1))} +++
					insnsf +++
					singleton(END)]
	  esac
	| String (str)  -> [env, singleton(STRING(str))]
	| Array (exprs) ->
		case compileSMList(env, exprs) of [env1, insns] ->
			[env1, insns +++ singleton(ARRAY(size(exprs)))]
		esac
	| Elem (ea, ei) ->
		case compileSMList(env, {ea, ei}) of [env1, insns] ->
			[env1, insns +++ singleton(ELEM)]
		esac
	| ElemRef(ea, ei) -> compileSMList(env, {ea, ei})
	| Builtin(f, exprs) ->
		case compileSMList(env, exprs) of [env1, insns] ->
			[env1, insns +++ singleton(BUILTIN(f, size(exprs)))]
		esac
	esac
}


public fun compileSM (expr) {
	case compileSM1(beginScope(initCompEnv()), expr, "") of 
	[env, code] ->
		local flag = 1;
		code := ({ LABEL("main"), BEGIN("main", 0, getLocals(env))} +++
		  code +++ singleton(END));
		
		while (flag) do
			case getFuns(env) of [funs, env1] ->
				if size(funs) == 0 then flag := 0
				else
					case foldl(fun([en, c], f) {
						case compileSM1(en, f, "") of [en2, c2] ->
							[en2, c +++ c2]
						esac
					  }, [env1, code], funs) of [env2, code2] ->
						env  := env2;
						code := code2
					esac
				fi
			esac
		od;
		--printf("%s\n", showSM(code));
		--{}
		code
  esac
}
(* End *)
