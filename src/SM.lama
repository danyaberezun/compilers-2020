-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, world], insns) {
    case insns of (x:tail) -> 
    case x of 
        JMP(l) -> eval(c, fromLabel(env, l))
        | CJMP(cond, l) -> case stack of (t:rest) -> 
            if (compare(cond, "z") == 0 && t == 0 !! compare(cond, "nz") == 0 && t != 0)
            then eval([rest, cst, state, world], fromLabel(env, l))
            else eval([rest, cst, state, world], tail)
            fi
          esac
        | LABEL(l) -> eval(c, tail)
        | CALL(f,_) -> eval([stack, [state, tail]:cst, state, world], env.fromLabel(f))
        | END -> case cst of 
          [ostate, oinsns]:cst -> eval([stack, cst, ostate, world], oinsns)
          | _ -> c
          esac
        | _ -> 
            local nconf;
            nconf :=
              case x of 
                  BINOP(op) ->
                    case stack of (a:b:rest) ->
                        [(evalOp(op, b, a):rest), cst, state, world]
                    esac
                  | CONST(n) -> [(n:stack), cst, state, world]
                  | LD(x) -> [(state.lookup(x)):stack, cst, state, world]
                  | ST(x) -> 
                    case stack of (t:rest) -> 
                      [rest, cst, state.assign(x, t); state, world] 
                    esac
                  
                  | READ -> case readWorld(world) of [n, nworld] -> 
                        [(n:stack), cst, state, nworld]
                    esac
                  | WRITE ->
                    case stack of (t:rest) -> {
                      local nworld;
                      nworld := writeWorld(t, world);
                      [rest, cst, state, nworld]
                    }
                    esac
                  | STI -> case stack of (res:var:rest) -> 
                    [(res:rest), cst, state.assign(var, res); state, world]
                    esac
                  | LDA(x) -> 
                     [(x:stack), cst, state, world]
                  | DROP -> case stack of (_:rest) ->
                     [rest, cst, state, world] | _ -> failure(insns.string)
                    esac
                  | BEGIN(_, nargs, nlocs) -> case stack.take(nargs) of [rest, vals] ->
                      local nstate = foldl(
                        fun([state1, n], val) {
                          [
                            state1.assign(Arg(n), val); state1,
                            n + 1
                          ]
                        },
                        [makeState(nargs, nlocs), 0],
                        vals
                      )[0];
                      [rest, cst, nstate, world]
                    esac
                  | GLOBAL(x) -> assign(state, Glb(x), 0); [stack, cst, state, world]
                  | ARRAY(l) -> case take(stack, l) of [stack, elems] -> 
                      [listArray(elems):stack, cst, state, world] 
                    esac
                  | ELEM -> case stack of i:arr:stack -> 
                      [arr[i]:stack, cst, state, world] 
                    esac
                  | STA ->  case stack of val:i:arr:stack -> 
                      arr[i] := val; [val:stack, cst, state, world] 
                    esac
                  | STRING(s) -> [s:stack, cst, state, world]
                  | BUILTIN(name, narg) -> case take(stack, narg) of [stack, args] ->
                       case evalBuiltin(name, args, world)  of [res, world] -> 
                           [res:stack, cst, state, world]
                       esac
                    esac
              esac;
            eval(nconf, tail)
     esac
    | _ -> c
  esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  case compileSmWithEnv(stmt, initCompEnv().enterScope.addFun("read", Builtin, 0).addFun("write", Builtin, 1)) of [insns, env] ->
     compileFuncs(
       singleton(LABEL("main")) +++
       singleton(BEGIN("main", 0, env.getLocals)) +++
       insns +++
       singleton(END)
       , 
       env.endScope
     )[0]
  esac
}

fun compileFuncs (insns, env) {
  case env.getFuns of 
    [{}, env] -> [insns, env] |
    [funcs, env] -> case foldl (
        fun ([insns, env], Fun (name, args, body, state)) {
          case addArgs(env.beginFun(state), args) of env ->
            case compileSmWithEnv(body, env) of [bodyInsns, env] ->
              [
                insns +++
                singleton(LABEL(name)) +++
                singleton(BEGIN(name, args.size, env.getLocals)) +++
                bodyInsns +++
                singleton(END)
              ,
              env
              ]
            esac
          esac
        }, 
        [insns, env], 
        funcs
      ) of [insns, env] ->
      compileFuncs (insns, env)
    esac
  esac
}

fun compileSmWithEnv(stmt, env) {
  compileSmWithEnvAndLbl(stmt, env, false, "")
}

fun compileSmWithEnvAndLbl(stmt, env, shouldJump, lblToJump) {
    local additional = if shouldJump then singleton(JMP(lblToJump)) else {} fi;
    case stmt of 
    Assn(x, expr) -> case compileSmWithEnv(x, env) of [ins1, env1] -> 
      case compileSmWithEnv(expr, env1) of [ins2, env2] ->
              [ins1 +++ ins2 +++ 
              case x of ElemRef(_, _) -> singleton(STA) | _ -> singleton(STI) esac 
              +++ additional, env2]
      esac
    esac
    | Seq(stmt1, stmt2) -> case compileSmWithEnv(stmt1, env) of [res1, env1] ->
                           case compileSmWithEnvAndLbl(stmt2, env1, shouldJump, lblToJump) of [res2, env2] ->
                           [res1 +++ res2, env2]
                           esac
                           esac
    | Skip -> [{} +++ additional, env]
    | If(cond, stmt, estmt) -> 
        case genLabels(env, 2) of [lbl1, lbl2, nenv] ->
        case compileSmWithEnv(cond, nenv) of [ins1, env0] ->
        case 
          if (shouldJump) 
            then compileSmWithEnvAndLbl(stmt, env0, shouldJump, lblToJump) 
            else compileSmWithEnvAndLbl(stmt, env0, true, lbl2)
          fi of [res1, env1] ->
        
        local res2, env2;
        case estmt of 
            None -> res2 := {}; env2 := env1
            | _ -> case compileSmWithEnv(estmt, env1) of [res3, env3] -> res2 := res3; env2 := env3 esac
        esac;
        [
          ins1 +++ 
          singleton(CJMP("z", lbl1)) +++  
          res1 +++ 
          singleton(LABEL(lbl1)) +++
          res2 +++
          if (shouldJump) then additional else singleton(LABEL(lbl2)) fi
          ,
          env2
        ]
        esac
        esac
        esac
    | While(cond, stmt) ->
        case genLabels(env, 2) of [lbl1, lbl2, nenv] ->
        case compileSmWithEnv(cond, nenv) of [ins1, env0] ->
        case compileSmWithEnv(stmt, env0) of [res1, env1] ->
        [
          singleton(JMP(lbl2)) +++
          singleton(LABEL(lbl1)) +++
          res1 +++
          singleton(LABEL(lbl2)) +++
          ins1 +++
          singleton(CJMP("nz", lbl1)) +++
          additional
          ,
          env1
        ]
        esac
        esac
        esac
    | Rep(stmt, cond) ->
        case genLabels(env, 1) of [lbl1, nenv] ->
        case compileSmWithEnv(stmt, nenv) of [res1, env1] ->
        case compileSmWithEnv(cond, env1) of [ins1, env0] ->
        [
          singleton(LABEL(lbl1)) +++
          res1 +++
          ins1 +++
          singleton(CJMP("z", lbl1)) +++
          additional
          ,
          env0
        ]
        esac
        esac
        esac
    | Ignore(expr) -> case compileSmWithEnv(expr, env) of [ins1, env1] ->
        [
          ins1 +++
          singleton(DROP) +++
          additional,
          env1
        ]
      esac
    | Const(n) -> 
      [
        singleton(CONST(n)) +++
        additional,
        env
      ]
    | Var(x) -> 
      [
        singleton(LD(env.lookupVar(x))) +++
        additional,
        env
      ]
    | Binop(op, lefto, righto) ->
       case compileSmWithEnv(lefto, env) of [ins1, env1] -> case compileSmWithEnv(righto, env1) of [ins2, env2] ->
       [
         ins1 +++
         ins2 +++
         singleton(BINOP(op)) +++
         additional,
         env2
       ]
       esac esac
    | Ref(x) -> 
        [
          singleton(LDA(env.lookupVar(x))) +++
          additional,
          env
        ]
    | Scope(defs, expr) -> case foldl(fun([env, funcs, glob], def) {
        case def of
          Local(vars) -> [env.addVars(vars), funcs, if env.isGlobal then (map(fun (var) {GLOBAL(var)}, vars)) +++ glob else glob fi] |
          Fun (name, args, body) -> case genFunLabel(env, name) of
              [fn, env] -> [env.addFun(name, fn, size(args)), [fn, args, body]:funcs, glob]  
          esac
        esac 
    }, [env.beginScope, {}, {}], defs) of 
    [env, funcs, glob] -> case compileSmWithEnv(
            expr,
            foldl(fun(env, [f, args, body]) {
                  rememberFun(env, f, args, body)  
                }, 
                env, 
                funcs
              )
            ) of 
                [insns1, env1] -> [glob +++ insns1 +++ additional, env1.endScope]
            esac
        esac
    |  Call (f, argExprs) ->
            case foldl(fun([insns, env], expr) {
              case compileSmWithEnv(expr, env) of [insns1, env1] -> [insns +++ insns1, env1] esac
            }, [{}, env], argExprs) of
          [insns, env] ->
          case lookupFun(env, f) of 
          Fun(Builtin, _) ->
            [insns +++ singleton(BUILTIN(f, argExprs.size)) +++ additional, env]
          | Fun(fn, n) ->
           [insns +++ singleton(CALL(fn, n)) +++ additional, env]
          esac
        esac
    | ElemRef(arr, i) -> case compileSmWithEnv(arr, env) of [arrRes, env] ->
                         case compileSmWithEnv(i, env) of [ires, env] -> 
            [arrRes +++ ires +++ additional, env]
      esac esac
    | Elem(arr, i) -> case compileSmWithEnv(arr, env) of [arrRes, env] ->
                      case compileSmWithEnv(i, env) of [ires, env] ->
              [arrRes +++ ires +++ singleton(ELEM) +++ additional, env]
      esac esac
    | Array(arr) -> case foldl(
      fun([arrRes, env], elem) {
        case compileSmWithEnv(elem, env) of [eres, env] -> [arrRes +++ eres, env] esac
      },
      [{}, env],
      arr
    ) of [arrRes, env] ->
        [arrRes +++ singleton(ARRAY(arr.size)) +++ additional, env]
      esac
    |  String(x) -> [singleton(STRING(x)) +++ additional, env]
    | Builtin(name, args) -> case compileList(env, args) of [res, env] -> 
        [res +++ singleton(BUILTIN(name, args.size)) +++ additional, env]
      esac
        
  esac
}
(* End *)


fun compileList(env, args) {
  foldl(
      fun([res, env], elem) {
        case compileSmWithEnv(elem, env) of [eres, env] -> [res +++ eres, env] esac
      },
      [{}, env],
      args
    )
}
