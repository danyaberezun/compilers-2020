-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
    {}     -> c
    | ins : insns_ ->
      eval (case ins of
        CONST (n)  -> [ n : st, cst, s, w ]
      | BINOP (op) -> case st of a : b : rest -> [ evalOp (op, a, b) : rest, cst, s, w ] esac
      | LD    (x)  -> [ lookup(s, x) : st, cst, s, w ]
      | LDA   (x)  -> [ Ref (x) : st, cst, s, w ]
      | ST    (x)  -> case st of a : rest -> assign(s, x, a); [ rest, cst, s, w ] esac
      | STI        -> case st of a : Ref (x) : rest -> assign (s, x, a); [ a : rest, cst, s, w ] esac
      | DUP        -> case st of a : rest -> [ a : a : rest, cst, s, w ] esac
      | DROP       -> case st of a : rest -> [ rest, cst, s, w ] esac
      | READ       -> case readWorld (w) of [ a, w ] -> [ a : st, cst, s, w ] esac
      | WRITE      -> case st of a : rest -> [ rest, cst, s, writeWorld (a, w) ] esac
      | CJMP (cond, where) -> case st of a : rest -> [ rest, cst, s, w ] esac
      | CALL (func, argc) -> [st, [s, insns_] : cst, s, w]
      | GLOBAL (x) -> assign (s, Glb (x), 0); [st, cst, s, w]
      | BEGIN (func, argc, varc) ->
        case take (st, argc) of [st, argv] ->
          [st, cst, foldl (fun ([s, i], arg) {
            assign (s, Arg (i), arg);
            [s, i + 1]
          }, [makeState (argc, varc), 0], argv)[0], w]
        esac
      | END -> case cst of [s, _] : cst -> [st, cst, s, w] | _ -> c esac
      | _          -> c
      esac, 
      case ins of
          JMP (where) -> fromLabel (env, where)
        | CALL (func, argc) -> fromLabel (env, func)
        | CJMP (cond, where) -> case st of a : rest ->
          if (a == (case cond of "z" -> 0 | _ -> 1 esac)) then fromLabel (env, where) else insns_ fi esac
        | END -> case cst of [_, ret] : cst -> ret | _ -> {} esac
        | _ -> insns_
      esac)
    esac
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun compileImpl (env, stmt) { 
  case stmt of
    Assn (tgt, e)       ->
      case compileImpl (env, tgt) of [env, smTgt] ->
        case compileImpl (env, e) of [env, smVal] ->
          [env, {smTgt, smVal, STI}]
        esac
      esac
  | Seq (e1, e2)        -> 
      case compileImpl (env, e1) of [env, sm1] ->
        case compileImpl (env, e2) of [env, sm2] ->
          [env, {sm1, sm2}]
        esac
      esac
  | Skip                -> [env, {}]
  | Read (x)            -> [env, {READ, ST (lookupVar(env, x))}]
  | Write (e)           ->
      case compileImpl (env, e) of [env, sm] ->
        [env, {sm, WRITE}]
      esac
  | If (cond, thn, els) -> 
      case compileImpl (env, cond) of [env, smCond] ->
        case genLabels (env, 2) of [labelEls, labelEnd, env] ->
          case compileImpl (env, thn) of [env, smThn] ->
            case compileImpl (env, els) of [env, smEls] ->
              [env,
                { smCond
                , CJMP ("z", labelEls)
                , smThn
                , JMP (labelEnd)
                , LABEL (labelEls)
                , smEls
                , LABEL (labelEnd)
                }
              ]
            esac
          esac
        esac
      esac
  | While (cond, body) ->
      case compileImpl (env, cond) of [env, smCond] ->
        case genLabels (env, 2) of [labelBody, labelCond, env] ->
          case compileImpl (env, body) of [env, smBody] ->
            [env,
              { JMP (labelCond)
              , LABEL (labelBody)
              , smBody
              , LABEL (labelCond)
              , smCond
              , CJMP ("nz", labelBody)
              }
            ]
          esac
        esac
      esac
  | Repeat (body, cond) ->
      case compileImpl (env, cond) of [env, smCond] ->
        case genLabels (env, 1) of [labelBody, env] ->
          case compileImpl (env, body) of [env, smBody] ->
            [env,
              { LABEL (labelBody)
              , smBody
              , smCond
              , CJMP ("z", labelBody)
              }
            ]
          esac
        esac
      esac
  | Var (id) -> [env, singleton (LD (lookupVar(env, id)))]
  | Ref (id) -> [env, singleton (LDA (lookupVar(env, id)))]
  | Const (n) -> [env, singleton (CONST (n))]
  | Binop (op, lhs, rhs) ->
      case compileImpl (env, lhs) of [env, smLhs] ->
        case compileImpl (env, rhs) of [env, smRhs] ->
          [env, {smRhs, smLhs, BINOP (op)}]
        esac
      esac
  | Ignore (e) ->
      case compileImpl (env, e) of [env, sm] ->
        [env, {sm, DROP}]
      esac
  | Scope (defs, x) ->
    case foldl (fun ([env, globals], def) {
      case def of
        Local (names) -> [addVars (env, names),
          if isGlobal (env) then
            map(fun (x) { GLOBAL (x) }, names) +++ globals
          else globals fi
        ] |
        Fun (name, params, body) ->
          case genFunLabel (env, name) of [label, env] ->
            [addFun (env, name, label, params.size), globals]
          esac
      esac
    }, [beginScope(env), {}], defs) of [env, globals] ->
      case foldl (fun (env, def) {
        case def of Fun (name, params, body) -> 
          rememberFun (env, lookupFun (env, name)[0], params, body)
          | _ -> env
        esac
      }, env, defs) of env ->
        case compileImpl (env, x) of [env, t] ->
          [endScope (env), { globals, t }]
        esac
      esac
    esac
  | Call (name, args) ->
    case lookupFun (env, name) of Fun (label, n) ->
      case foldl (fun ([env, res], arg) {
        case compileImpl (env, arg) of [env, t] ->
          [env, {res, t}]
        esac
      }, [env, {}], args) of [env, res] ->
        [env, {res, CALL (label, n)}]
      esac
    esac
  esac
}

fun compileSMFun (env, sm) {
  case getFuns (env) of [funs, env] ->
    case funs of {} -> [env, sm] | _ ->
      case foldl (fun ([env, sm], Fun (name, params, body, st)) {
        case addArgs(beginFun (env, st), params) of env ->
          case compileImpl(env, body) of [env, bodySM] ->
            [env, {
              sm,
              LABEL (name),
              BEGIN (name, params.size, getLocals (env)),
              bodySM,
              END
            }]
          esac
        esac
      }, [env, sm], funs) of [env, sm] ->
        compileSMFun (env, sm)
      esac
    esac
  esac
}

public fun compileSM (stmt) {
  case compileImpl (initCompEnv (), stmt) of [env, sm] ->
    deepFlatten(compileSMFun (env, {
      LABEL ("main"),
      BEGIN ("main", 0, getLocals (env)),
      sm,
      END
    })[1])
  esac
}
