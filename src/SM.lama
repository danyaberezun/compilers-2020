-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }
  
  fun enumerate(l) {
      fun inner(ls, n) {
          case ls of
            {} -> {} |
            x : xs -> [x, n] : inner(xs, n + 1) 
          esac
      }
      inner(l, 0)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, cst, state, w], insns) {
    case insns of
      {} -> c
    | i : is -> case i of 
        CONST (n) -> eval([n : stack, cst, state, w], is)
      | BINOP (op) -> eval(case stack of lhs : rhs : t ->  [evalOp (op, lhs, rhs) : t, cst, state, w] esac, is)
      | LD (x) -> eval([lookup(state, x) : stack, cst, state, w], is)
      | LDA(x) -> eval([Ref(x) : stack, cst, state, w], is)
      | ST (x) -> eval(case stack of h : t -> assign(state, x, h); [t, cst, state, w] esac, is)
      | STI -> eval(case stack of val : Ref(x) : t -> assign(state, x, val); [val:t, cst, state, w] esac, is)
      | DROP -> eval(case stack of _:t -> [t, cst, state, w] esac, is)
      | LABEL (l) -> eval(c, is)
      | JMP (l) -> eval(c, env.fromLabel(l))
      | CJMP ("z", l) -> case stack of h : t -> 
          eval([t, cst, state, w], if h then is else env.fromLabel(l) fi)
        esac
      | CJMP ("nz", l) -> case stack of h : t -> 
          eval([t, cst, state, w], if h == 0 then is else env.fromLabel(l) fi)
        esac
      | GLOBAL(x) -> assign(state, Glb(x), 0); eval([stack, cst, state, w], is)
      | CALL(f, _) -> case f of 
            "read" -> case evalBuiltin(f, {}, w) of [res, w] -> eval([res : stack, cst, state, w], is) esac |
            "write" -> case stack of 
                x : stack -> case evalBuiltin(f, x:{}, w) of [res, w] -> eval([res : stack, cst, state, w], is) esac
            esac |
            _ ->  eval([stack, [state, is]: cst, state, w], env.fromLabel(f))
        esac
      | BEGIN(_, nArgs, nLocals) -> case take(stack, nArgs) of 
            [stack, vals] -> local state = foldl(fun(s, [val, narg]) {
                    assign(s, Arg(narg), val);
                    s
                }, makeState(nArgs, nLocals), enumerate(vals));
                eval([stack, cst, state, w], is)
        esac
      | END -> case cst of 
            {} -> c |
            [state, is]:cst -> eval([stack, cst, state, w], is)
        esac
      | BUILTIN (f, n) -> case take(stack, n) of 
            [stack, vals] -> case evalBuiltin(f, vals, w) of
                [res, w] -> eval([res: stack, cst, state, w], is)
            esac
        esac
      | STRING(str) -> eval([str : stack, cst, state, w], is)
      | ARRAY (n) -> case take(stack, n) of 
            [stack, vals] -> eval([listArray(vals) : stack, cst, state, w], is)
        esac
      | ELEM -> case stack of
            i : a : stack -> eval([a[i] : stack, cst, state, w], is)
        esac
      | STA -> case stack of
            val : i : a : stack -> a[i] := val; eval([val : stack, cst, state, w], is)
        esac
      | _ -> failure("evaluation not yet implemented")
     esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  fun compileSMListImpl(env, exprs) {
    case foldl(fun ([smInsns, env], expr) {
            case compileSMImpl (env, expr) of
                [is, env] -> [is : smInsns, env]
            esac
        }, [{}, env], exprs) of
        [insns, env] -> [reverse(insns), env]
    esac
  }
  fun addDefs(env, defs) {
      case foldl(fun([env, funs, globs], def) {
          case def of
            Local(vars) -> [addVars(env, vars), funs, if isGlobal(env) then (map(fun (x) {GLOBAL(x)}, vars)) : globs else globs fi] |
            Fun (name, args, body) -> case genFunLabel(env, name) of
                [fLabel, env] -> [addFun(env, name, fLabel, size(args)), [fLabel, args, body] : funs, globs]  
            esac 
          esac 
      }, [env, {}, {}], defs) of
        [env, funs, globs] -> [env, reverse(funs), reverse(globs)]
      esac
  }
  fun compileSMImpl(env, stmt) {
      case stmt of
        Var (x) -> [LD (lookupVar(env, x)), env]
      | Ref (x) -> [LDA (lookupVar(env, x)), env]
      | Ignore (e) -> case compileSMImpl(env, e) of 
            [is, env] -> [{is, DROP}, env]
        esac
      | Const (n) -> [CONST (n), env]
      | Binop(op, lhs, rhs) -> case compileSMListImpl(env, {lhs, rhs}) of
            [lis:ris:_, env] -> [{ris, lis, BINOP(op)}, env]
        esac
      | Assn (x, e) -> case compileSMListImpl(env, {x, e}) of
            [xis:eis:_, env] -> [{xis, eis, case x of ElemRef(_, _) -> STA | _ -> STI esac}, env]
        esac
      | Seq (s1, s2) -> case compileSMListImpl(env, {s1, s2}) of
            [is1:is2:_, env] -> [{is1, is2}, env]
        esac
      | Skip -> [{}, env]
      | If (cond, s1, s2) -> case genLabels(env, 2) of 
            [l1, l2, env] -> case compileSMListImpl(env, {cond, s1, s2}) of
                [cis:is1:is2:_, env] -> [{cis, CJMP("z", l1), is1, JMP(l2), LABEL(l1), is2, LABEL(l2)}, env]
            esac
        esac
      | While (cond, stmt) -> case genLabels(env, 2) of
            [l1, l2, env] -> case compileSMListImpl(env, {cond, stmt}) of
              [cis:body:_, env] -> [{JMP (l2), LABEL (l1), body, LABEL(l2), cis, CJMP ("nz", l1)}, env]
            esac
        esac
      | Repeat (stmt, cond) -> case genLabel(env) of
            [l, env] -> case compileSMListImpl(env, {stmt, cond}) of
              [body:cis:_, env] -> [{LABEL(l), body, cis, CJMP ("z", l)}, env]
            esac
        esac
      | Scope(defs, expr) -> case addDefs(beginScope(env), defs) of 
            [env, funs, globs] -> case compileSMImpl(foldl(fun(env, [fLabel, args, body]) {
              rememberFun(env, fLabel, args, body)  
            }, env, funs), expr) of 
                [is, env] -> [{globs, is}, env.endScope]
            esac
        esac
      | Call (f, exprs) -> case compileSMListImpl(env, exprs) of
            [is, env] -> case f of
                "read" -> [{is, CALL(f, 0)}, env] |
                "write" -> [{is, CALL(f, 1)}, env] |
                _ -> case lookupFun(env, f) of
                    Fun(fLabel, n) -> [{is, CALL(fLabel, n)}, env]
                esac
            esac 
        esac
      | Fun(fLabel, args, body, fEnv) -> case compileSMImpl(addArgs(beginFun(env, fEnv), args), body) of
            [is, env] -> [{LABEL(fLabel), BEGIN(fLabel, size(args), env.getLocals), is, END}, env]
        esac 
      | String (str) -> [STRING(str), env]
      | Array (exprs) -> case compileSMListImpl(env, exprs) of 
            [is, env] -> [{is, ARRAY(size(exprs))}, env]
        esac
      | Elem(arrExpr, indexExpr) -> case compileSMListImpl(env, {arrExpr, indexExpr}) of
            [is, env] -> [{is, ELEM}, env]
        esac
      | ElemRef(arrExpr, indexExpr) -> compileSMListImpl(env, {arrExpr, indexExpr})
      | Builtin (f, exprs) -> case compileSMListImpl(env, exprs) of 
            [is, env] -> [{is, BUILTIN(f, size(exprs))}, env]
        esac
      | _ -> failure ("not yet implemented")
      esac
  }
  
  fun compileFuns(env) {
    case getFuns(env) of 
        [funs, env] -> case foldl(fun ([is1, env1], f) {
            case compileScope(env1, f) of
                [is2, env2] -> [is2 : is1, env2]
            esac
        }, [{}, env], funs) of 
            [fis, env] -> [reverse (fis), env]
        esac
    esac
  }
  fun compileScope(env, scopeExpr) {
      case compileSMImpl(env, scopeExpr) of 
        [is, env] -> case compileFuns(env) of
            [fis, env] -> [is : fis, env]
        esac
      esac
  }
  case compileSMImpl(beginScope(initCompEnv()), expr) of 
    [main, env] -> case compileFuns(env) of 
        [fis, _] -> deepFlatten({LABEL("main"), BEGIN("main", 0, getLocals(env)), main, END, fis})
    esac
  esac
}
(* End *)
