-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun eval (c@[st, env, wrld], instructions) {
  case instructions of 
      {} -> c
  | instr:left -> {

      c := 
        case instr of 
          BINOP (op) -> case st of 
                          y:x:st -> [(evalExpr (env, Binop (op, Const (x), Const (y)))):st, env, wrld]
                        esac
        |  READ      -> case readWorld (wrld) of [z, wrld] -> [z:st, env, wrld] esac
        | WRITE      -> case st of z:st -> [st, env, writeWorld (z, wrld)] esac
        |    ST (x)  -> case st of z:st -> [st, env <- [x, z], wrld] esac
        |    LD (x)  -> [env(x):st, env, wrld]
        | CONST (c)  -> [c:st, env, wrld]
        esac;

      eval (c, left)
    }
  esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

-- NOTICE ORDER!!!

fun compileExpr (expr) {
case expr of
    Var (x) -> return singleton(LD(x))
    | Const (x) -> return singleton(CONST(x))
    | Binop (op, frst, scnd) -> return compileExpr(frst) +++ compileExpr(scnd) +++singleton(BINOP(op))
esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  case stmt of
    Assn (name, expr) -> return compileExpr(expr) +++ singleton(ST(name))
  | Seq (stmt1, stmt2) -> return compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read (name) -> return singleton(READ) +++ singleton(ST(name))
  | Write (expr) -> return compileExpr(expr) +++ singleton(WRITE)
  esac
}
