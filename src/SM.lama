-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c, insns) {
  local stack = c[0], s = c[1], w = c[2];
  if insns.size == 0 
  then return c
  fi;
  case insns.hd of
    READ -> 
      local v_w = readWorld (w);
      eval ([v_w[0]:stack, s, v_w[1]], insns.tl)
  | WRITE -> 
      local v = stack.hd, tale = stack.tl;
      return eval ([tale, s, writeWorld (v, w)], insns.tl)
  | BINOP (str) -> 
      local y = stack.hd, x = stack.tl.hd, tale = stack.tl.tl;
      eval ([evalBinop (str, x, y):tale, s, w], insns.tl)
  | LD (x) -> eval ([s (x):stack, s, w], insns.tl)
  | ST (x) -> 
      local v = stack.hd, tale = stack.tl;
      eval ([tale, s <- [x, v], w], insns.tl)
  | CONST (n) -> eval ([n:stack, s, w], insns.tl)
  esac
}

-- Runs a stack machine for a given input and a
-- given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (str) -> singleton (LD (str))
  | Const (val) -> singleton (CONST (val))
  | Binop (str, expr1, expr2) -> compileExpr (expr1) +++ compileExpr (expr2) +++ singleton (BINOP (str))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (str, expr) -> compileExpr (expr) +++ singleton (ST (str))
  | Read (str) -> singleton (READ) +++ singleton (ST (str))
  | Write (expr) -> compileExpr (expr) +++ singleton (WRITE)
  | Seq (stmt1, stmt2) -> compileSM (stmt1) +++ compileSM (stmt2)
  esac
}