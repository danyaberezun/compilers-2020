-- Stack machine.

import List;
import World;
import State;
import Expr;


fun eval(c@[s, st, w], insns) {
  case insns of
    LD(x): p -> eval([st(x) : s, st, w], p)
  | ST(x): p -> eval([s[1], (st <- [x,s[0]]), w], p)
  | CONST(n): p -> eval([n : s, st, w], p)
  | BINOP(op): p -> eval([evalOp(op, s[1][0], s[0]) : s[1][1], st, w], p)
  | READ: p -> local ss; ss := readWorld(w); eval([ss[0] : s, st, ss[1]], p)
  | WRITE: p -> eval([s[1], st, writeWorld(s[0], w)], p)
  | {} -> c
  esac
}


public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}


fun compileExpr (expr) {
  case expr of
    Var(x) -> singleton(LD(x))
  | Const(n) -> singleton(CONST(n))
  | Binop(op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
  esac
}


public fun compileSM (stmt) {
  case stmt of
    Assn (st, expr) -> compileExpr(expr) +++ singleton(ST(st))
  | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read(s) -> { READ, ST(s) }
  | Write(expr) -> compileExpr(expr) +++ singleton(WRITE)
	esac
}
