-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (env, c, insns) {
  case c of
     [s, st, w@[i,o]] -> case insns of
       {} -> c
      | BINOP(b): p -> case s of x : y: ss -> eval(env, [ebinop(b, y, x): ss, st, w], p) esac
      | CONST(n): p -> eval(env, [n : s, st, w], p)
      | READ: p -> case i of x : it -> eval(env, [x : s, st, [it, o]], p) esac
      | WRITE: p -> case s of x : ss -> eval(env, [ss, st, [i, x : o]], p) esac
      | LD(x): p -> eval(env, [st(x) : s, st, w], p)
      | ST(x): p -> case s of y : ss -> eval(env, [ss, (st <- [x,y]), w], p) esac
      | LABEL(s): p -> eval(env, c, p)
      | JMP(l): p -> eval(env, c, fromLabel(env, l))
      | CJMP(cond, l): p -> case s of cmp : ss -> case cond of 
                     "z" -> case cmp of
                              0 -> eval (env, c, fromLabel (env, l))
                              |_ -> eval (env, c, p)
                    esac
                    |"nz" -> case cmp of
                              0 -> eval (env, c, p)
                              |_ -> eval (env, c, fromLabel (env, l))
                    esac
                esac
              esac                                                           
          esac
    esac
}	

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
      Const (n)     ->  singleton(CONST(n))
    | Var (x)       ->  singleton(LD(x))
    | Binop(op, l, r) ->  compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op)) 
    | _             -> failure("Expression %s not found. \n", expr)
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun compileEnv(env, stmt) {
  case stmt of
      Assn(x, e)    -> [env, compileExpr(e) +++ singleton(ST(x))]
    | Write(e) -> [env, compileExpr(e) +++ singleton(WRITE)]
    | Read(x)       -> [env, {READ, ST(x)}]
    | Seq(s1,s2)    -> case compileEnv(env, s1) of
                            [env, s1] -> case compileEnv(env, s2) of
                                          [env, s2]-> [env, s1 +++ s2] 
                                         esac 
                       esac
    | Skip          -> [env, {}]
    | While(expr, s) -> case genLabels(env, 2) of [label1, label2, env1] ->
                                  case compileEnv(env1, s) of [env2, insts] ->
                                      [env2, {JMP(label2), LABEL(label1)} +++ insts +++ singleton(LABEL(label2)) +++ compileExpr(expr) +++ singleton(CJMP("nz", label1))]
                                  esac
                        esac
    | Repeat(s, expr) -> case genLabels(env, 1) of [label, env1] ->
                                  case compileEnv(env1, s) of [env2, insts] ->
                                      [env2, singleton(LABEL(label)) +++ insts +++ compileExpr(expr) +++ singleton(CJMP("z", label))]
                                  esac
                         esac
    | If(expr, s1, s2) -> case genLabels(env, 2) of [lb_else, lb_fi, env1] ->
                                   case compileEnv(env1, s1) of [env2, stmt1] ->
                                            case compileEnv(env2, s2) of [env3, stmt2] ->
                                                  [env3, compileExpr(expr) +++ singleton(CJMP("z", lb_else )) +++ stmt1 +++ singleton(JMP(lb_fi)) +++ singleton(LABEL (lb_else)) +++ stmt2 +++ singleton(LABEL (lb_fi))]
                                            esac
                                   esac
                          esac
    | _ -> failure("Statement %s not found. \n", stmt)
  esac
  }
  compileEnv (initCompEnv(), stmt)[1]
}