-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns)
{
  local stack;
  local st;
  local wrld;
  stack := configuration [0];
  st := configuration [1];
  wrld := configuration [2];
  
  case insns of 
      {} -> configuration
  | x:xs -> {

      configuration := 
        case x of 
          BINOP (op) -> case stack of 
                          y:x:stack -> [(evalExpr (st, Binop (op, Const (x), Const (y)))):stack, st, wrld]
                        esac
        |  READ      -> case readWorld (wrld) of [z, wrld] -> [z:stack, st, wrld] esac
        | WRITE      -> case stack of z:stack -> [stack, st, writeWorld (z, wrld)] esac
        |    ST (x)  -> case stack of z:stack -> [stack, st <- [x, z], wrld] esac
        |    LD (x)  -> [st(x):stack, st, wrld]
        | CONST (n)  -> [n:stack, st, wrld]
        esac;

      eval (env, configuration, xs)
    }
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) 
{
  case expr of
    Var (x)          -> return singleton(LD(x))
  | Const (n)        -> return singleton(CONST(n))
  | Binop (op, l, r) -> return compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) 
{
  case stmt of
    Assn (x, expr)    -> return compileExpr(expr) +++  singleton(ST(x))
  | Seq (st1, st2)     -> return compileSM(st1) +++ compileSM(st2)
  | Skip               -> return {}
  | Read (x)           -> return singleton(READ) +++ singleton(ST(x))
  | Write (expr)       -> return compileExpr(expr) +++ singleton(WRITE)
  esac
}
