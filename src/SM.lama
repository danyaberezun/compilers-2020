-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

-- zero not-zero flags in regs
fun compznz (x, znz) {
    case znz of
      "z"  -> x  == 0
    | "nz" -> x !=  0
    esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N

-- fun eval (condition, instance) {
-- 	case condition of 
--     [stack, state, world@[in, out]] -> 
--   		case instance of
--   			  {} -> condition 
--   			| BINOP (binop) : remaining -> case stack of right : left : stack__ -> eval([parse_bin_operation(binop, left, right) : stack__,state,world], remaining) esac
--   			| CONST (n) : remaining -> eval([n : stack, state, world], remaining)
--   			| READ : remaining -> case in of elem : in__ -> eval([elem : stack, state, [in__, out]], remaining) esac
--   			| WRITE : remaining -> case stack of elem : stack__ -> eval([stack__, state, [in, elem : out]], remaining) esac
--   			| LD (elem) : remaining -> eval([state (elem) : stack, state, world], remaining)
--   			| ST (elem) : remaining -> case stack of other : stack__ -> eval([stack, (state <- [elem, other]), world], remaining) esac
--   		esac
-- 	esac
-- }

fun eval (environment, condition@[stack, state, world@[in, out]], instance) {
  case instance of
    {}->condition
    | BINOP(operation):remaining->
      case stack of x:y:rstack-> -- remaining stack
        eval(environment,[parse_bin_operation(operation, y, x) : rstack, state, world], remaining)
      esac
    |  CONST(number):remaining->eval(environment, [number:stack, state, world], remaining)
    |  READ : remaining ->
      case in of x:rin-> -- remaining input stream
        eval(environment, [x:stack, state, [rin, out]], remaining)
      esac
    | WRITE : remaining->
      case stack of out_value : rstack->
        eval(environment, [rstack, state, [in, out_value:out]], remaining)
      esac
    | LD(x) : remaining-> eval(environment, [state(x):stack, state, world], remaining)
    | ST(x) : remaining->
      case stack of last:rstack->
        eval(environment, [stack, (state<-[x,last]), world], remaining)
      esac
      -- ММм меточки
    | LABEL (label) : remaining-> eval(environment, 
      condition, 
      remaining)
    | JMP (label) : remaining-> eval(environment, 
      condition, 
      environment.fromLabel(label))
    | CJMP(znz, label) : remaining->
      case stack of x:rstack->
        if compznz(x, znz) then eval(environment, 
          condition, 
          environment.fromLabel(label)) else eval(environment, 
          condition, 
          remaining) fi
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions


fun compileExpr (expression) {
  case expression of
        Const(n) -> singleton(CONST(n))
      | Var(x) -> singleton(LD(x))
      | Binop(bop, left, right) -> compileExpr(left) +++ compileExpr(right) +++ singleton(BINOP(bop))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

-- добавить конструктор хардкода while/repeat и if

fun last(label) {
  case label of
      {} -> [{}]
    | x : {} -> [{}, x]
    | x : y -> case last(y) of [a, b] -> [x:a, b] esac
  esac
}


public fun compileSM (statement) {
  -- case statement of
  --     Skip -> {}
  --   | Assn(elem, expression) -> compileExpr(expression) +++ singleton(ST(elem))
  --   | Read(elem) -> singleton(READ) +++ singleton(ST(elem))
  --   | Write(elem) -> compileExpr(elem) +++ singleton(WRITE)
  --   | Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
  -- esac

  fun wrCompileSM(sstatement, environment){
    case sstatement of
      Skip-> [{}, environment]
      | Assn(elem, expression) -> [compileExpr(expression) +++ singleton(ST(elem)), environment]
      | Read(elem)-> [{READ, ST(elem)}, environment] -- singleton(READ) +++ singleton(ST(elem)) also works
      | Write(expression)-> [compileExpr(expression)+++singleton(WRITE), environment]
      | Seq(s1, s2)->
        case wrCompileSM(s1, environment) of
          [instnc, environment]->
          case wrCompileSM(s2, environment) of
            [instnc1, environment]-> [instnc +++ instnc1, environment]
          esac
        esac
      | If (expression, s1, s2)->
        case environment.genLabels(2) of
          [s2label, outLabel, environment]->
            case wrCompileSM(s1, environment) of
              [instnc, environment]->
                case wrCompileSM(s2, environment) of
                  [instnc1, environment]->
                  [compileExpr(expression)+++(CJMP("z", s2label):{})+++
                  (
                    case last(instnc) of 
                      [instnc, LABEL(label)]->
                      instnc+++{JMP(label), LABEL(s2label)}+++instnc1+++(LABEL(label):{})
                      | _->
                      instnc+++{JMP(outLabel), LABEL(s2label)}+++instnc1+++(LABEL(outLabel):{})
                    esac
                  ), environment
                  ]
                esac
            esac
        esac
      | While (expression, ssstatement)->
        case environment.genLabels(2) of
          [label1, label2, environment]->
          case wrCompileSM(ssstatement, environment) of
            [instnc, environment]->
            [
            {JMP(label2), LABEL(label1)}+++instnc+++
            (LABEL(label2):{})+++compileExpr(expression)+++(CJMP("nz", label1):{}), 
            environment
            ]
          esac
        esac
      | Repeat (ssstatement, expression)->
      case environment.genLabel of
        [label, environment]->
        case wrCompileSM(ssstatement, environment) of
          [instnc, environment]->
          [
          (LABEL(label):{})+++instnc+++compileExpr(expression)+++(CJMP("z", label):{}),
          environment
          ]
        esac
      esac
    esac
  }

  wrCompileSM(statement, initCompEnv())[0]

}
