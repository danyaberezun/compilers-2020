-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)

  fun eval (c@[st, cst, s, w], insns) {
    fun isSat(val, cond) {
      case cond of 
        "z"  -> val == 0
      | "nz" -> val != 0
      esac
    }
    fun processArgs(s, args) {
      foldl (fun (i, arg) {
        assign (s, Arg(i), arg);
        i + 1
      }, 0, args);
      s
    }


    case insns of
        {} -> c
      | JMP   (l)	   : insns -> eval(c, fromLabel(env, l))
      | CJMP  (c, l) : insns -> case st of a : st ->
                                  eval([st, cst, s, w], if a.isSat(c) then fromLabel(env, l) else insns fi) 
                                esac
      | CALL (f, a)  : insns -> eval([st, [s, insns] : cst, s, w], fromLabel(env, f))
      | END 			   : insns -> case cst of
                                  {} -> c
                                | [s, insns] : cst -> eval([st, cst, s, w], insns)
                                esac
      | ins : insns ->  c := case ins of
                                BINOP  (op) 	   -> case st of a : b : st -> [op.asFunc(b, a) : st, cst, s, w] esac 
                              | CONST  (n)  	   -> [n : st, cst, s, w]
                              | LD     (x)   	   -> [lookup(s, x) : st, cst, s, w]
                              | LDA    (x)  	   -> [Ref(x) : st, cst, s, w]
                              | ST     (x)   	   -> case st of z : st -> assign(s, x, z); [st, cst, s, w] esac
                              | STI			         -> case st of v : Ref(x) : st -> assign(s, x, v); [v : st, cst, s, w] esac
                              | DROP 			       -> [st.snd, cst, s, w]
                              | READ        	   -> case readWorld(w) of [x, w] -> [x : st, cst, s, w] esac
                              | WRITE       	   -> case st of z : st -> [st, cst, s, writeWorld(z, w)] esac
                              | GLOBAL (x)	     -> assign(s, Glb(x), 0); [st, cst, s, w]
                              | BEGIN  (f, a, l) -> case take(st, a) of [st, args] -> [st, cst, processArgs(makeState(a, l), args), w] esac
                              | LABEL  (_)       -> c 
                            esac;
                        eval (c, insns)
    esac
  }

  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun processDefines(env, defs) {
  case defs of 
    {} -> [env, {}, {}]
  | def : defs -> 
      case def of 
        Local (vs) -> if isGlobal(env) 
                      then case processDefines(addVars(env, vs), defs) of
                                [env, f, d] -> [env, f, foldr (fun (l, x) { GLOBAL(x) : l }, d, vs)]
                           esac
                      else processDefines(addVars(env, vs), defs)
                      fi
      | Fun   (f, as, body) -> 
          case genFunLabel (env, f) of [lF, env] ->  
              case processDefines(addFun(env, f, lF, size(as)), defs) of
                [env, f, d] -> [env, [lF, as, body] : f, d]
              esac
          esac
      esac
  esac
}

infixl >>= after : (m, k) { 
  case m of [env, code] -> case k (env) of [env, code2] -> [env, code +++ code2] esac esac
}  

fun run_  (e)       { [e, {}] }
fun exp_  (e)       { fun (env) { compileStep(env, e, "") } } 
fun expL_ (e, l)    { fun (env) { compileStep(env, e, l) } } 
fun cmd_  (command) { fun (env) { [env, command:{}] } } 
fun call_ (f)       { fun (env) {
                        case lookupFun (env, f) of 
                          Fun (f, n) -> [env, CALL (f, n) : {}] 
                        esac 
                      }
                    }
fun exps_ (exprs)   { fun (env) { foldl (fun (m, expr) { m >>= exp_(expr) }, run_ (env), exprs) } }
fun bgnSc_ (defs)   { fun (env) { case processDefines(beginScope(env), defs) of [env, fs, code] -> [rememberAll(env, fs), code] esac } }
fun endSc_                (env) { [endScope(env), {}] }  
fun rememberAll (env, fs) { foldl (fun (env, [f, as, b]) { rememberFun(env, f, as, b) }, env, fs) } 

fun compileStep (env, expr, lEnd) {
	case expr of
	  Var    (x) 		       -> run_ (env) >>= cmd_ (LD  (lookupVar (env, x)))
	| Ref    (x) 		       -> run_ (env) >>= cmd_ (LDA (lookupVar (env, x)))
	| Const  (n)		       -> run_ (env) >>= cmd_ (CONST (n))
	| Read   (x)     	     -> run_ (env) >>= cmd_ (READ) >>= cmd_ (ST(lookupVar(env, x)))
	| Skip 			           -> run_ (env)
	| Ignore (e)		       -> run_ (env) >>= expL_ (e, lEnd) >>= cmd_ (DROP)
	| Binop  (op, e1, e2)  -> run_ (env) >>= exp_ (e1) >>= exp_ (e2) >>= cmd_ (BINOP (op))
	| Assn   (x, e)	       -> run_ (env) >>= exp_ (x) >>= exp_ (e) >>= cmd_ (STI)
	| Write  (e)	         -> run_ (env) >>= exp_ (e) >>= cmd_ (WRITE) 
	| Seq    (s1, s2)      -> run_ (env) >>= exp_ (s1) >>= expL_ (s2, lEnd)
	| While  (e, s)	       -> case genLabels(env, 2) of [le, ls, env] ->  
                                   run_ (env) 
                               >>= cmd_ (JMP (le))
                               >>= cmd_ (LABEL (ls))
                               >>= exp_ (s)
                               >>= cmd_ (LABEL (le))
                               >>= exp_ (e) 
                               >>= cmd_ (CJMP ("nz", ls))
                            esac
	| Repeat (s, e)        -> case genLabels(env, 1) of [l, env] ->
                                   run_ (env)
                               >>= cmd_ (LABEL (l))
                               >>= exp_ (s)
                               >>= exp_ (e)
                               >>= cmd_ (CJMP ("z", l))
                            esac
  | If     (c, th, el)   -> case env.genLabels(2) of [le, lfi, env] ->
                                   local finally = cmd_ (LABEL (lfi));
                                   case lEnd of  "" -> lEnd := lfi; finally := run_ | _  -> skip esac;
                                   run_ (env)
                               >>= exp_ (c)
                               >>= cmd_ (CJMP ("z", le) )
                               >>= exp_ (th)
                               >>= cmd_ (JMP (lEnd)) 
                               >>= cmd_ (LABEL (le)) 
                               >>= exp_ (el)
                               >>= cmd_ (LABEL (lfi)) 
                               >>= finally
                            esac
	| Call   (f, exprs)    -> run_ (env) >>= exps_ (exprs) >>= call_ (f)
	| Fun    (f, as, b, e) -> case exp_ (b) (addArgs(beginFun(env, e), as)) of 
                              [env, bc] -> [env, LABEL (f) : BEGIN (f, size(as), getLocals(env)) : bc +++ (END:{})] 
                            esac 
  | Scope  (defs, e)     -> run_ (env) >>= bgnSc_ (defs) >>= exp_ (e) >>= endSc_
	esac
}


public fun compileSM (expr) {
  fun cycle (env) {
    case getFuns(env) of  [{},_] -> [{},{}] | [fs, env] -> run_ (env) >>= exps_(fs) >>= cycle esac
  }
	case run_(initCompEnv()) >>= exp_(expr) of 
    [env, code] -> [env, LABEL("main") : BEGIN ("main", 0, getLocals(env)) : code +++ (END : {})] >>= cycle
  esac [1]
}
(* End *)
