-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[st, state, w], insns) {
  case insns of
      {} -> c |
      BINOP (op) : e -> case st of 
        a:b:r -> eval(env, [evalOp(op, b, a):r, state, w], e)
      esac |
      CONST (n) : e   -> eval(env, [n:st, state, w], e) |
      READ : e  ->
        local tmp;
        tmp := readWorld(w);
        eval(env, [tmp[0]:st, state, tmp[1]], e) |
      WRITE : e  -> case st of
        a:r -> eval(env, [r, state, writeWorld(a, w)], e)
      esac |
      LD (x) : e  -> eval(env, [state(x) : st, state, w], e) |
      LDA (x) : e  -> eval(env, [Ref (x) : st, state, w], e) |
      ST (x) : e  -> case st of
        a:r -> eval(env, [r, state <- [x, a], w], e)
      esac |
      STI : e  -> case st of
        a : Ref (x) : r -> eval(env, [a:r, state <- [x, a], w], e)
      esac |
      LABEL (s) : e  -> eval(env, c, e) |
		  JMP (l) : e  -> eval(env, c, fromLabel(env, l)) |
		  CJMP (c, l) : e	->
			case st of a : r ->
        case c of
        "z" -> if (a == 0) then eval(env, [r, state, w], fromLabel(env, l)) else eval(env, [r, state, w], e) fi |
        "nz" -> if (a == 1) then eval(env, [r, state, w], fromLabel(env, l)) else eval(env, [r, state, w], e) fi
			  esac
      esac |
      DUP : e -> case st of a:r -> eval(env, [a:a:r, state, w], e) esac |
      DROP : e -> case st of a:r -> eval(env, [r, state, w], e) esac
  esac
}
(* End *)

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
(* Assignment *)
public fun compileSM (stmt) {
  fun helper(env, stmt, endIf) { 
    case stmt of
      Skip -> [env, {}] |
      Var (x) -> [env, singleton(LD (x))] |
      Ref (x) -> [env, singleton(LDA (x))] |
      Const (x) -> [env, singleton(CONST (x))] |
      Ignore (e) -> case helper(env, e, endIf) of [env, cmd] -> [env, cmd +++ singleton(DROP)] esac |
      Assn (x, e) -> case helper (env, x, "") of [env, cmd1] ->
        case helper (env, e, "") of [env, cmd2] -> [env, cmd1 +++ cmd2 +++ singleton(STI)] esac
      esac |
      Read (x) -> [env, {READ, ST(x)}] |
      Write (e) -> case helper (env, e, "") of [env, cmd] -> [env, cmd +++ singleton(WRITE)] esac |
      Seq(s1, s2) ->
      case helper(env, s1, "") of [env, insns1] ->
        case helper(env, s2, endIf) of [env, insns2] ->
          [env, insns1 +++ insns2]
        esac
      esac |
      If (e, s1, s2) -> case genLabels(env, 2) of [lElse, lFi, env] ->
			  if compare(endIf, "") == 0 then endIf := lFi fi;
        case helper(env, e, "") of [env, exprCmd] ->
          case helper(env, s1, endIf) of [env, is1] ->
            case helper(env, s2, endIf) of [env, is2] ->
              [env, exprCmd +++
                  singleton(CJMP("z", lElse)) +++
                  is1 +++
                  {JMP(endIf), LABEL(lElse)} +++
                  is2 +++
                  singleton(LABEL(lFi))]
            esac
          esac
        esac
      esac |
      While(e, s)	-> case genLabels(env, 2) of [l1, l2, env] ->
        case helper(env, e, "") of [env, exprCmd] ->
          case helper(env, s, "") of [env, is] ->
            [env, {JMP (l2), LABEL (l1)} +++ is +++ singleton(LABEL (l2)) +++ exprCmd +++ singleton(CJMP ("nz", l1))]
          esac
        esac
		  esac |
      Repeat (s, e) -> case genLabels(env, 1) of [l, env] ->
        case helper(env, s, "") of [env, is] ->
          case helper(env, e, "") of [env, exprCmd] -> [env, singleton(LABEL(l)) +++ is +++ exprCmd +++ singleton(CJMP("z", l))] esac
        esac
      esac |
      Binop (op, e1, e2) -> case helper(env, e1, "") of [env, cmd1] ->
        case helper(env, e2, "") of [env, cmd2] -> [env, cmd1 +++ cmd2 +++ singleton(BINOP (op))] esac
      esac
    esac
  }
  helper(initCompEnv(), stmt, "")[1]
}
(* End *)
