-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[st, state, w], insns) {
  case insns of
      {} -> [st, state, w]
    | BINOP(op) : remI -> eval([binopOp(op, st[1][0], st[0]) : st[1][1], state, w], remI)
    | CONST(n)  : remI -> eval([n : st, state, w], remI)
    | READ      : remI -> local world_ = readWorld(w); eval([world_[0] : st, state, world_[1]], remI)
    | WRITE     : remI -> eval([st[1], state, writeWorld(st[0], w)], remI)
    | LD(x)     : remI -> eval([state(x) : st, state, w], remI)
    | ST(x)     : remI -> eval([st[1], state <- [x, st[0]], w], remI)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Const (z)     ->  singleton(CONST(z))
    | Var (el)      ->  singleton(LD(el))
    | Binop(op, l, r) ->  compileExpr(l) +++ compileExpr(r) +++ singleton(BINOP(op))
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Read (x) -> singleton(READ) +++ singleton(ST(x))
      | Write (e) -> compileExpr(e) +++ singleton(WRITE)
      | Assn (x, e) -> compileExpr(e) +++ singleton(ST(x))
      | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
      | Skip -> {}
  esac
}
