-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N

fun eval (c@[st, s, w], insns) {
  case insns of
	{} -> c
	 | insns : rest_prog -> case insns of
					  READ -> eval ([fst (readWorld (w)) : st, s, snd (readWorld (w))], rest_prog)
					| WRITE -> case stack of
								fir : st -> eval ([st, s, writeWorld (fir, w)], rest_prog)
							   esac
					| BINOP(op) -> case stack of 
								sec : fir : st -> eval ([evalOp (op, fir, sec) : st, s, w], rest_prog)
							      esac
					| LD(x) -> eval ([s (x) : st, s, w], rest_prog)
					| ST(x) -> case stack of
								fir : st -> eval ([st, s <- [x, fir], w], rest_prog)
							    esac
					| CONST(n) -> eval ([n : st, s, w], rest_prog)
				esac
esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
  case expr of 
    Var(x) -> singleton(LD(x))
  | Const(n) -> singleton(CONST(n))
  | Binop(op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ singleton(BINOP(op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  case stmt of
   Assn(x, expr) -> compileExpr(expr) +++ singleton(ST(x))
  | Read(x) -> singleton(READ) +++ singleton(ST(x))
  | Write(expr) -> compileExpr(expr) +++ singleton(WRITE)
  | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  esac
}
