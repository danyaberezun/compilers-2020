-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}



-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N
fun eval (c@[stack, map, world@[input, output]], insns) {
case insns of
	{} -> c
	 | head : rest_prog -> case head of
					BINOP (op) -> case stack of 
								second : first : stack -> eval ([evalOp (op, first, second) : stack, map, world], rest_prog)
						      esac
					| CONST (n) -> eval ([n : stack, map, world], rest_prog)
					| WRITE -> case stack of
								first : stack -> eval ([stack, map, writeWorld (first, world)], rest_prog)
						   esac
					| READ -> eval ([fst (readWorld (world)) : stack, map, snd (readWorld (world))], rest_prog)
					| ST (x) -> case stack of
								first : stack -> eval ([stack, map <- [x, first], world], rest_prog)
						    esac
					| LD (x) -> eval ([map (x) : stack, map, world], rest_prog)
				esac
esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
case expr of
	Var (x) -> (LD (x) : {})
	| Const (n) -> (CONST (n) : {})
	| Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ (BINOP (op) : {})
esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
case stmt of 
	 Read (x) -> (READ : {}) +++ (ST (x) : {})
	| Write (e) -> compileExpr (e) +++ (WRITE : {})
	| Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
	| Assn (x, e) -> compileExpr (e) +++ (ST (x) : {})
	| Skip -> {}
esac
} 
