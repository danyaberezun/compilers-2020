-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  fun helper(c@[st, state, w], i) {
    case i of
        BINOP(op) -> case st of 
          a:b:r -> [(evalExpr(state, Binop(op, Const(a), Const(b)))):r, state, w] 
        esac |
        CONST(n)  -> [n:st, state, w] |
        READ ->
          local tmp;
          tmp := readWorld(w);
          [tmp[0]:st, state, tmp[1]] |
        WRITE -> case st of 
          a:r -> [r, state, writeWorld(a, w)] 
        esac |
        LD(x) -> [state(x) : st, state, w] |
        ST(x) -> case st of 
          a:r -> [r, state <- [x, a], w] 
        esac
      esac
  }
  case insns of
    {} -> c |
    i:is -> eval((helper(c, i)), is)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Binop(op, l, r) -> {compileExpr(r), compileExpr(l), BINOP(op)} |
    Var(x) -> LD(x) |
    Const(n) -> CONST(n)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun helper(stmt) { 
    case stmt of
      Skip -> {} |
      Assn(x, e) -> {compileExpr(e), ST(x)} |
      Read(x) -> {READ, ST(x)} |
      Write(e) -> {compileExpr(e), WRITE} |
      Seq(s1, s2) -> {helper(s1), helper(s2)}
    esac
  }
  deepFlatten(helper(stmt))
}
