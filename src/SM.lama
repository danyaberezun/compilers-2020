-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun compznz (x, znz) {
  case znz of
    "z" -> x == 0
  | "nz" -> x != 0
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, configuration@[stack, st, world@[i, o]], insns) {
    case insns of
        {} -> configuration
      | READ      	  : tail -> case i of 
					x : it     -> eval (env, [x : stack, st, [it, o]], tail) 
				    esac
      | WRITE     	  : tail -> case stack of 
					x : ss     -> eval (env, [ss, st, [i, x : o]], tail)
				    esac
      | BINOP (str)       : tail -> case stack of 
					x : y : ss -> eval (env, [evalOp (str, y, x) : ss, st, world], tail) 
				    esac
      | LD    (x) 	  : tail -> eval (env, [st (x) : stack, st, world], tail)
      | ST    (x) 	  : tail -> case stack of 
					y : ss     -> eval (env, [ss, (st <- [x, y]), world], tail) 
				    esac
      | CONST (n) 	  : tail -> eval (env, [n : stack, st, world], tail)
      | LABEL (lbl)       : tail -> eval (env, configuration, tail)
      | JMP   (lbl)       : tail -> eval (env, configuration, env.fromLabel(lbl))
      | DUP               : tail -> eval (env, configuration, tail)
      | CJMP  (znz, lbl)  : tail -> case stack of x : ss ->
                                      if compznz (x, znz) 
                                      then  eval (env, [ss, st, world], env.fromLabel(lbl))
                                      else  eval (env, [ss, st, world], tail)
                                      fi
                                    esac
      | LDA (x)           : tail -> eval (env, [Ref (x) : stack, st, world], tail)
      | STI               : tail -> case stack of v : Ref (x) : ss ->
                                      eval (env, [v : ss, st <- [x, v], world], tail)
                                    esac
      | DROP              : tail -> case stack of
                                      x : stack -> eval (env, [stack, st, world], tail)
                                    esac
  	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}


fun last (lbl) {
  case lbl of
    {}     -> [{}]
  | x : {} -> [{}, x]
  | x : l  -> case last (l) of [a, b] -> [x : a, b] esac
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
 fun compileEnv (stmt, env) {
    case stmt of
      Var   (x)            -> [LD (x) : {}, env]
    | Const (n)            -> [CONST (n) : {}, env]
    | Binop (op, left, right)    -> 
      case compileEnv (left, env) of
        [ins1, env] -> 
        case compileEnv (right, env) of
          [ins2, env] -> [ins1 +++ ins2 +++ (BINOP (op) : {}), env]
        esac
      esac
    | Ref   (x)            -> [LDA (x) : {}, env]
    | Ignor (x)            -> 
      case compileEnv (x, env) of
        [ins, env] -> [ins +++ (DROP : {}), env]
      esac
    | Assn  (x, expr)      ->
      case compileEnv (x, env) of
        [ins1, env] ->
        case compileEnv (expr, env) of
          [ins2, env] -> [ins1 +++ ins2 +++ (STI : {}), env]
        esac
      esac
    | Read  (x)            -> [{READ, ST (x)}, env]
    | Write (expr)         -> 
      case compileEnv (expr, env) of
        [ins, env] -> [ins +++ (WRITE : {}), env]
      esac
    | Skip                 -> [{}, env]
    | Seq   (s1, s2)       -> 
      case compileEnv (s1, env) of
        [ins1, env] ->
          case compileEnv (s2, env) of
            [ins2, env] -> [ins1 +++ ins2, env]
          esac
      esac
    | If    (expr, s1, s2) -> 
      case env.genLabels(2) of
        [ls2, lfi, env] ->
          case compileEnv (s1, env) of
            [ins1, env] ->
              case compileEnv (s2, env) of
                [ins2, env] ->
                [compileSM (expr)      +++
                (CJMP ("z", ls2) : {})   +++ 
                (case last (ins1) of
                    [ins1, LABEL (lbl)] -> 
                    ins1               +++ 
                    {JMP (lbl), DUP, LABEL (ls2)} +++
                    ins2              +++ 
                    (LABEL (lbl) : {})
                  | _                -> 
                    ins1 +++
                    {JMP (lfi), DUP, LABEL (ls2)} +++ 
                    ins2              +++ 
                    (LABEL (lfi) : {})
                esac), env]
              esac
          esac
      esac 
    | While (expr, s) ->
      case env.genLabels(2) of
        [l1, l2, env] ->
          case compileEnv (s, env) of
            [ins, env] -> 
            [{JMP (l2), LABEL (l1)} +++
            ins                     +++
            (LABEL (l2) : {})       +++
            compileSM (expr)      +++
            (CJMP ("nz", l1) : {}), env]
          esac
      esac
    | Repeat (s, expr) ->
      case env.genLabel of
        [lbl, env] ->
          case compileEnv (s, env) of
            [ins, env] ->
              [(LABEL (lbl) : {})  +++
              ins                +++
              compileSM (expr) +++
              (CJMP ("z", lbl) : {}), env]
          esac
      esac
  esac
  }
  compileEnv (stmt, initCompEnv ())[0]
}
