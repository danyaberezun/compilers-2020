-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    -- printf(showSMInsn(insns[0]) ++ "\n");
    case insns of
      {} -> c |
      BINOP (op) : e -> case st of 
        a:b:r -> eval([evalOp(op, b, a):r, cst, s, w], e)
      esac |
      CONST (n) : e -> eval([n:st, cst, s, w], e) |
      READ : e  -> case readWorld(w) of
        [n, w] -> eval([n:st, cst, s, w], e)
      esac |
      WRITE : e  -> case st of
        a:r -> eval([r, cst, s, writeWorld(a, w)], e)
      esac |
      LD (x) : e  -> eval([lookup(s, x) : st, cst, s, w], e) |
      LDA (x) : e  -> eval([Ref (x) : st, cst, s, w], e) |
      ST (x) : e  -> case st of a:r -> 
        assign(s, x, a);
        eval([r, cst, s, w], e)
      esac |
      STI : e  -> case st of a : Ref (x) : r -> 
        assign(s, x, a);
        eval([a:r, cst, s, w], e)
      esac |
      LABEL (s) : e  -> eval(c, e) |
		  JMP (l) : e  -> eval(c, fromLabel(env, l)) |
		  CJMP (c, l) : e	->
			case st of a : r ->
        case c of
        "z" -> if (a == 0) then eval([r, cst, s, w], fromLabel(env, l)) else eval([r, cst, s, w], e) fi |
        "nz" -> if (a == 1) then eval([r, cst, s, w], fromLabel(env, l)) else eval([r, cst, s, w], e) fi
			  esac
      esac |
      DUP : e -> case st of a:r -> eval([a:a:r, cst, s, w], e) esac |
      DROP : e -> case st of a:r -> eval([r, cst, s, w], e) esac |
      CALL (f, n) : e -> eval ([st, [s, e] : cst, s, w], fromLabel(env, f)) |
      BEGIN (f, a, l) : e -> case take (st, a) of [st, args] -> 
        local tmp = foldl (fun ([s, i], arg) {
            assign(s, Arg (i), arg);
            [s,
            i + 1]
          }, [makeState (a, l), 0], args);
        eval ([st, cst, tmp[0], w], e)
      esac |
      GLOBAL (x) : e -> 
        assign (s, Glb (x), 0);
        eval([st, cst, s, w], e) |
      END : e -> case cst of
        {} -> c |
        [s, insn] : cst -> eval ([st, cst, s, w], insn)
      esac
    esac
  }
  (* End *)
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (stmt) {
  fun compileMany(env, stmts, endIf) {
    local r = foldl(fun ([env, insns], expr) {
      case compile (env, expr, "") of
        [env, is] -> [env, insns +++ is]
     esac
    }, [env, {}], stmts);
    -- printf(showSM(r[1]));
    [r[0], r[1]]
  }

  fun addDefs(env, defs) {
    fun lambda ([env, globals], def) {
      case def of 
        Local (l) -> [addVars(env, l), case isGlobal(env) of 
          true -> map(fun (x) {GLOBAL(x)}, l) +++ globals |
          _ -> globals
          esac] |
        Fun (name, args, body) -> 
        case genFunLabel(env, name) of
          [lab, env] -> [addFun(env, name, lab, size(args)), globals]
        esac
      esac
    }
    foldl(lambda, [env, {}], defs)
  }
  

  fun compile(env, stmt, endIf) { 
    case stmt of
      Skip -> [env, {}] |
      Var (x) -> [env, singleton(LD (lookupVar(env, x)))] |
      Ref (x) -> [env, singleton(LDA (lookupVar(env, x)))] |
      Const (x) -> [env, singleton(CONST (x))] |
      Ignore (e) -> case compile(env, e, endIf) of [env, cmd] -> [env, cmd +++ singleton(DROP)] esac |
      Assn (x, e) -> case compile (env, x, "") of [env, cmd1] ->
        case compile (env, e, "") of [env, cmd2] -> [env, cmd1 +++ cmd2 +++ singleton(STI)] esac
      esac |
      Read (x) -> [env, {READ, ST(lookupVar(env, x))}] |
      Write (e) -> case compile (env, e, "") of [env, cmd] -> [env, cmd +++ singleton(WRITE)] esac |
      Seq(s1, s2) ->
        case compile(env, s1, "") of [env, insns1] ->
          case compile(env, s2, endIf) of [env, insns2] ->
            [env, insns1 +++ insns2]
          esac
        esac |
      If (e, s1, s2) -> case genLabels(env, 2) of [lElse, lFi, env] ->
			  if compare(endIf, "") == 0 then endIf := lFi fi;
        case compile(env, e, "") of [env, exprCmd] ->
          case compile(env, s1, endIf) of [env, is1] ->
            case compile(env, s2, endIf) of [env, is2] ->
              [env, exprCmd +++
                  singleton(CJMP("z", lElse)) +++
                  is1 +++
                  {JMP(endIf), LABEL(lElse)} +++
                  is2 +++
                  singleton(LABEL(lFi))]
            esac
          esac
        esac
      esac |
      While(e, s)	-> case genLabels(env, 2) of [l1, l2, env] ->
        case compile(env, e, "") of [env, exprCmd] ->
          case compile(env, s, "") of [env, is] ->
            [env, {JMP (l2), LABEL (l1)} +++ is +++ singleton(LABEL (l2)) +++ exprCmd +++ singleton(CJMP ("nz", l1))]
          esac
        esac
		  esac |
      Repeat (s, e) -> case genLabels(env, 1) of [l, env] ->
        case compile(env, s, "") of [env, is] ->
          case compile(env, e, "") of [env, exprCmd] -> [env, singleton(LABEL(l)) +++ is +++ exprCmd +++ singleton(CJMP("z", l))] esac
        esac
      esac |
      Binop (op, e1, e2) -> case compile(env, e1, "") of [env, cmd1] ->
        case compile(env, e2, "") of [env, cmd2] -> [env, cmd1 +++ cmd2 +++ singleton(BINOP (op))] esac
      esac |
      Scope (defs, expr) -> case addDefs(beginScope(env), defs) of [env, globals] ->
          case 
            foldl(fun (env, def) {
              case def of 
                Fun (name, args, body) -> rememberFun(env, lookupFun(env, name)[0], args, body) |
                _ -> env
              esac
            }, env, defs)
          of env ->
            case compile(env, expr, "") of
              [env, instr] -> [endScope(env), globals +++ instr]
            esac
          esac
      esac |
      Call (name, {}) -> case lookupFun (env, name) of
        Fun (fLabel, n) -> [env, singleton (CALL (fLabel, n))]
      esac |
      Call (name, args) -> case compileMany (env, args, "") of [env, instr] ->
        case lookupFun(env, name) of
            Fun (fLabel, n) -> 
            -- printf ("kek %s, %d\n", fLabel, n);
            [env, instr +++ singleton (CALL (fLabel, n))]
        esac
      esac
    esac
  }
  fun compileFunctions(env, instr) {
    case getFuns(env) of
      [{}, env] -> instr |
      [funs, env] -> case
        foldl(fun ([env, instr], Fun (f, args, body, st)) {
            case addArgs(beginFun(env, st), args) of
              env -> case compile(env, body, "") of 
                [env, body] -> 
                  [
                    env,
                    instr +++ {LABEL (f), BEGIN (f, args.size, getLocals(env))} +++
                    body +++
                    singleton(END)
                  ]
              esac
            esac
          }, [env, instr], funs)
      of
        [env, instr] -> compileFunctions(env, instr)
      esac
    esac
  }

  case compile(initCompEnv(), stmt, "") of [env, instr] -> 
    compileFunctions(env, {LABEL ("main"), BEGIN ("main", 0, getLocals(env))} +++ instr +++ singleton(END))
  esac
}
(* End *)
