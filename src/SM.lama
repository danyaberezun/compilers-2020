-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;
import Ref;

local stderr = fopen("/dev/stderr", "w"); -- open stderr for debugging :)

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  -- example of upcoming instructions:
  -- {READ, ST ("x"), READ, ST ("y"), LD ("x"), LD ("y"), BINOP ("*"), CONST (3), BINOP ("*"), ST ("z"), LD ("z"), WRITE}

  fun applyOp(op, v1, v2) {
      case op of
              "*"  -> v1 * v2
            | "+"  -> v1 + v2
            | "-"  -> v1 - v2
            | "/"  -> if (v2) then v1 / v2 else 0 fi
            | "%"  -> if (v2) then v1 % v2 else 0 fi
            | "==" -> v1 == v2
            | "!=" -> v1 != v2
            | "<"  -> v1 < v2
            | "<=" -> v1 <= v2
            | ">"  -> v1 > v2
            | ">=" -> v1 >= v2
            | "&&" -> v1 && v2
            | "!!" -> v1 !! v2
      esac
  }

  fun evalInstruction(c, instruction) {
    -- local ignore = fprintf (stderr, "SM instruction to eval: ""%s"", stack: ""%s""\n", instruction.string, c[0].string);
    local res = case instruction of
        READ -> local res = readWorld(c[2]); -- pair (value * world)
              [res[0]:c[0], c[1], res[1]]
      | WRITE -> case c[0] of v:vs -> [vs, c[1], writeWorld(v, c[2])] esac
      | LD (name) -> [(c[1](name)):c[0], c[1], c[2]]
      | LDA(name) -> [Ref(name):c[0], c[1], c[2]]
      | DROP      -> case c[0] of v:vs           -> [  vs, c[1]             , c[2]] esac
      | ST (name) -> case c[0] of v:vs           -> [  vs, c[1] <- [name, v], c[2]] esac
      | STI       -> case c[0] of v:Ref(name):vs -> [v:vs, c[1] <- [name, v], c[2]] esac
      | BINOP (op) -> case c[0] of v2:v1:vs -> [applyOp(op, v1, v2):vs, c[1], c[2]] esac
      | CONST (val) -> [val:c[0], c[1], c[2]]
      | LABEL (_) -> c
    esac;
    res
  }

  local config = ref(c);
  local instructions = ref(insns);
  while 1 do
    case deref(instructions) of
      instruction:continuation -> case instruction of
          JMP (l) -> instructions ::= env.fromLabel(l)
        | CJMP (znz, l) -> case deref(config)[0] of
                    v:vs -> local ok = case znz of Z -> v == 0 | _ -> v != 0 esac;
                            if ok then config ::= [vs, deref(config)[1], deref(config)[2]];
                                       instructions ::= env.fromLabel(l)
                                  else config ::= [vs, deref(config)[1], deref(config)[2]];
                                       instructions ::= continuation
                            fi
                    esac
        | _      -> config ::= evalInstruction(deref(config), instruction);
                    instructions ::= continuation
        esac
      | _ -> return(deref(config))
    esac
  od

}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- fprintf (stderr, "Evaluating SM code: ""%s"" ", insns.string);
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
-- converts end label to SM code
  fun maybeJump(maybeLabel) {
    case maybeLabel of Some(l) -> singleton(JMP(l)) | _ -> {} esac
  }

  -- Compiles an expression
  -- Returns [labelGenerator, SMCode]
  fun compileExpr (labelGenerator, stmt, endLabel) {
    -- printf ("Statement to compile to SM: ""%s""\n", stmt.string);
    case stmt of
        Assn (name, expr) -> case compileExpr(labelGenerator, name, None) of
          [lg, sm] -> case compileExpr(lg, expr, None) of
            [lg2, sm2] -> [lg2, sm +++ sm2 +++ singleton(STI) +++ maybeJump(endLabel)]
          esac
        esac
      | Seq (expr1, expr2) -> case compileExpr(labelGenerator, expr1, None) of
          [lg, sm] -> case compileExpr(lg, expr2, endLabel) of
            [lg2, sm2] -> [lg2, sm +++ sm2]
          esac
        esac
      | Skip              -> [labelGenerator, maybeJump(endLabel)]
      | Read (name) -> [labelGenerator, {READ, ST (name)} +++ maybeJump(endLabel)]
      | Write (expr) -> case compileExpr(labelGenerator, expr, None) of
           [lg, sm] -> [lg, sm +++ singleton(WRITE) +++ maybeJump(endLabel)]
         esac
      | If (cond, s1, s2) -> case endLabel of
             Some(l2) -> case labelGenerator.genLabels(1) of
               [l1, lg] -> case compileExpr(lg, cond, None) of
                 [lg1, sm_expr] -> case compileExpr(lg1, s1, Some(l2)) of
                   [lg2, sm1] -> case compileExpr(lg2, s2, Some(l2)) of
                     [lg3, sm2] -> [lg3, sm_expr +++ singleton(CJMP(Z, l1))
                                         +++ sm1 +++ singleton(LABEL(l1)) +++ sm2]
                     esac
                   esac
                 esac
               esac
           | None     -> case labelGenerator.genLabels(2) of
               [l1, l2, lg] -> case compileExpr(lg, cond, None) of
                 [lg1, sm_expr] -> case compileExpr(lg1, s1, Some(l2)) of
                   [lg2, sm1] -> case compileExpr(lg2, s2, Some(l2)) of
                     [lg3, sm2] -> [lg3, sm_expr +++ singleton(CJMP(Z, l1))
                                         +++ sm1 +++ singleton(LABEL(l1)) +++ sm2 +++ singleton(LABEL(l2))]
                   esac
                 esac
               esac
             esac
           esac
      | While (cond, s)   -> case labelGenerator.genLabels(2) of
               [l1, l2, lg] -> case compileExpr(lg, cond, None) of
                  [lg2, sm_expr] -> case compileExpr(lg2, s, Some(l1)) of
                     [lg3, sm] -> [lg3, {JMP (l1), LABEL (l2)} +++ sm
                         +++ singleton(LABEL(l1)) +++ sm_expr +++ singleton(CJMP(NZ, l2))
                         +++ maybeJump(endLabel)]
                     esac
                  esac
               esac
      | Repeat (s, cond)  -> case labelGenerator.genLabels(2) of
               [l1, l2, lg] -> case compileExpr(lg, s, Some(l1)) of
                  [lg2, sm] -> case compileExpr(lg2, cond, None) of
                    [lg3, sm_expr] -> [lg3,     singleton(LABEL(l2)) +++ sm
                                       +++ singleton(LABEL(l1)) +++ sm_expr +++ singleton(CJMP(Z, l2))
                                       +++ maybeJump(endLabel)]
                    esac
                  esac
               esac
      | Var (name) -> [labelGenerator, singleton(LD (name)) +++ maybeJump(endLabel)]
      | Ref (name) -> [labelGenerator, singleton(LDA (name)) +++ maybeJump(endLabel)]
      | Const (val) -> [labelGenerator, singleton(CONST (val)) +++ maybeJump(endLabel)]
      | Binop (op, expr1, expr2) -> case compileExpr(labelGenerator, expr1, None) of
                 [lg1, sm1] -> case compileExpr(lg1, expr2, None) of
                   [lg2, sm2] -> [lg2, sm1 +++ sm2 +++ singleton(BINOP (op)) +++ maybeJump(endLabel)]
                 esac
               esac
      | Ignore (expr)  -> case compileExpr(labelGenerator, expr, None) of
              [lg2, sm] -> [labelGenerator, sm +++ singleton(DROP) +++ maybeJump(endLabel)]
            esac
    esac
  }

  local code = compileExpr(initCompEnv(), stmt, None)[1];
  -- fprintf(stderr, "Stack machine code: %s\n", code.string);
  code
}
