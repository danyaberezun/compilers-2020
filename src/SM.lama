-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, configuration, insns) {
	case configuration of
    [stack, st, world@[i, o]] -> case insns of
        {} -> configuration
      | READ      	  : tail -> case i of 
					x : it     -> eval (env, [x : stack, st, [it, o]], tail) 
				    esac
      | WRITE     	  : tail -> case stack of 
					x : ss     -> eval (env, [ss, st, [i, x : o]], tail)
				    esac
      | BINOP (str)       : tail -> case stack of 
					x : y : ss -> eval (env, [binopTranslate (str, y, x) : ss, st, world], tail) 
				    esac
      | LD    (x) 	  : tail -> eval (env, [st (x) : stack, st, world], tail)
      | ST    (x) 	  : tail -> case stack of 
					y : ss     -> eval (env, [stack, (st <- [x, y]), world], tail) 
				    esac
      | CONST (n) 	  : tail -> eval (env, [n : stack, st, world], tail)
      | LABEL (stack)     : tail -> eval (env, configuration, tail)
      | JMP   (lbl)       : tail -> eval (env, configuration, fromLabel(env, lbl))
      | CJMP  (cond, lbl) : tail -> case stack of cmp : ss -> case cond of 
                                                                       "z"  -> case cmp of
                                                                                        0 -> eval (env, configuration, fromLabel (env, lbl))
                                                                                       |_ -> eval (env, configuration, tail)
                                                                               esac
                                                                      |"nz" -> case cmp of
                                                                                        0 -> eval (env, configuration, tail)
                                                                                       |_ -> eval (env, configuration, fromLabel (env, lbl))
                                                                               esac
                                                              esac
                                    esac
                                  esac
  	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
	  Var   (x)         		  -> singleton 	 (LD (x))
	| Const (n)         		  -> singleton   (CONST (n))
	| Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) +++ singleton (BINOP (op))
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
 fun compileEnv(env, stmt) {
  case stmt of
   	  Skip              -> [env, {}]
	| Assn(x, expr)     -> [env, compileExpr(expr) +++ singleton(ST(x))]
        | Read(x)           -> [env, {READ, ST(x)}]
        | Write(expr)       -> [env, compileExpr(expr) +++ singleton(WRITE)]
	| Seq    (s1, s2)   -> 
	      case compileEnv(env, s1) of
                    [env, s1] -> case compileEnv(env, s2) of
                                   [env, s2]-> [env, s1 +++ s2] 
                                 esac 
              esac
  	| While  (expr, s)  -> case genLabels (env, 2) of [label1, label2, env1] ->
                                                          case compileEnv (env1, s) of [env2, insts] ->
                                                                      [env2, {JMP (label2), LABEL(label1)} +++ insts +++ singleton (LABEL (label2)) +++ compileExpr (expr) +++ singleton (CJMP ("nz", label1))]
                                                          esac
                               esac
  	| Repeat (s, expr)  -> case genLabels (env, 1) of [label, env1] ->
                                                          case compileEnv (env1, s) of [env2, insts] ->
                                                                      [env2, singleton (LABEL (label)) +++ insts +++ compileExpr (expr) +++ singleton (CJMP ("z", label))]
                                                          esac
                               esac
  	| If (expr, s1, s2) -> case genLabels (env, 2) of [lbl_else, lbl_fi, env1] ->
                                                          case compileEnv(env1, s1) of [env2, stmt1] ->
                                                                      case compileEnv(env2, s2) of [env3, stmt2] ->
                                                                            [env3, compileExpr (expr) +++ singleton (CJMP ("z", lbl_else )) +++ stmt1 +++ singleton (JMP (lbl_fi)) +++ singleton (LABEL (lbl_else)) +++ stmt2 +++ singleton(LABEL (lbl_fi))]
                                                                      esac
                                                          esac
                               esac
	esac
 }
 compileEnv (initCompEnv (), stmt)[1]
}
