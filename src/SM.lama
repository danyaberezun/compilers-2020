-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration

fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")

-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N

fun getBinop(str) {
  case str of "+"  -> infix +
    | "-"  -> infix -
    | "*"  -> infix *
    | "/"  -> infix /
    | "%"  -> infix %
    | "==" -> infix ==
    | "!=" -> infix !=
    | "<"  -> infix <
    | "<=" -> infix <=
    | ">"  -> infix >
    | ">=" -> infix >=
    | "&&" -> infix &&
    | "!!" -> infix !!
  esac
}


-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N

fun eval (c, insns) {

  case insns of
    {}     -> c
    | ins : insns_ -> case c of [ stack, state, world ] ->
    eval(case ins of
    CONST (n)  -> [ n : stack, state, world ]
    | BINOP (op) -> case stack of a : b : rest -> [ getBinop (op) (a, b) : rest, state, world ] esac
    | LD    (x)  -> [ state (x) : stack, state, world ]
    | ST    (x)  -> case stack of a : rest -> [ rest, state <- [ x, a ], world ] esac
    | Read       -> case readWorld (world) of [ a, world_ ] -> [ a : stack, state, world_ ] esac
    | Write      -> case stack of a : rest -> [ rest, state, writeWorld (a, world) ] esac
      esac, insns_)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output

public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
  -- failure ("compileExpr not implemented\n")
  case (expr) of
    Var   (x) -> LD (x) : {}
    | Const (n)        -> CONST (n) : {}
    | Binop (op, l, r) -> deepFlatten ({ compileExpr (r), compileExpr (l), BINOP (op) })
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
  -- failure ("compileSM not implemented\n")
    case stmt of
    Assn (str1, str2) -> compileExpr(str2) +++ singleton(ST (str1))
      | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
      | Skip -> {}
      | Read (str) -> { Read, ST(str) }
      | Write (str) -> compileExpr(str) +++ singleton(Write)
  esac
}
