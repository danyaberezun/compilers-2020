-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
    return foldl(fun ([stack, s, w], instr) {
        -- printf("Instr: %s\n", instr.string);
        case [instr, stack] of
        [Binop(op), arg2:arg1:other] -> [singleton(apply(op, arg1, arg2)) +++ other, s, w] |
        [St(x), arg:other] -> [other, s <- [x, arg], w] |
        [Ld(x), _] -> [singleton(s(x)) +++ stack, s, w] |
        [Read, _] -> fun (stack, s, [n, w]) {
            [singleton(n) +++ stack, s, w]
        } (stack, s, readWorld(w)) |
        [Write, arg:other] -> [other, s, writeWorld(arg, w)] |
        [Const(x), _] -> [singleton(x) +++ stack, s, w]
        esac
    }, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    return case expr of
    Binop(op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ singleton(Binop(op)) |
    Var(x) -> singleton(Ld(x)) |
    Const(x) -> singleton(Const(x))
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
    Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2) |
    Read(x) -> {Read, St(x)} |
    Write(e) -> compileExpr(e) +++ singleton(Write) |
    Assn(x, e) -> compileExpr(e) +++ singleton(St(x))
    esac
}
