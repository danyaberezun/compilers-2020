-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun eval (c, insns) {
  case c of
    [s, st, w@[i, o]] -> case insns of
        {} -> c
      | BINOP (op) : p -> case s of x : y : ss -> eval ([apply (op, y, x) : ss, st, w], p) esac
      | CONST (n) : p -> eval ([n : s, st, w], p)
      | READ      : p -> case i of x : it -> eval ([x : s, st, [it, o]], p) esac
      | WRITE     : p -> case s of x : ss -> eval ([ss, st, [i, x : o]], p) esac
      | LD    (x) : p -> eval ([st (x) : s, st, w], p)
      | ST    (x) : p -> case s of y : ss -> eval ([s, (st <- [x, y]), w], p) esac
    esac
  esac
}

public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}


fun compileExpr (expr) {
  case expr of 
    Var   (x)         -> singleton (LD (x))
  | Const (n)         -> singleton (CONST (n))
  | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ singleton (BINOP (op))
  esac
}

public fun compileSM (stmt) {
  case stmt of
    Assn (val, expr)   -> compileExpr(expr) +++ singleton( ST(val) )
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Read (val)         -> { READ, ST(val) }
  | Write (expr)       -> compileExpr(expr) +++ singleton( WRITE )
  esac
}
