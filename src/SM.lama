-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {

  case insns of {} -> c | insn : p ->
    case insn of
      LABEL (s)     ->  eval( env, c, p )
    | JMP   (l)     ->  eval( env, c, fromLabel(env, l) )
    | CONST (n)     ->  eval( env, [n : stack, state, w], p )
    | LD    (x)     ->  eval( env, [state(x) : stack, state, w], p )
    | LDA   (x)     ->  eval( env, [Ref(x):stack, state, w], p )

    | CJMP (con, l) ->  case stack of head:rest ->
                          case con of 
                            "nz" -> eval( env, [rest, state, w], if head then fromLabel(env, l) else p fi )
                          | _    -> eval( env, [rest, state, w], if head then p else fromLabel(env, l) fi )
                          esac
                        esac

    | READ          ->  case readWorld(w) of [val, new_w] -> 
                          eval( env, [val:stack, state, new_w], p ) 
                        esac 

    | WRITE         ->  case stack of head:rest -> 
                          eval( env, [rest, state, writeWorld(head, w)], p ) 
                        esac

    | BINOP (op)    ->  case stack of fst:snd:rest -> 
                          eval( env, [evalOp(op, snd, fst) : rest, state, w], p )
                        esac 

    | ST    (x)     ->  case stack of head:rest -> 
                          eval( env, [rest, state <- [x, head], w], p ) 
                        esac

    | DROP          ->  case stack of 
                          0 -> eval(env, c, p)
                        | _:tail -> eval(env, [tail, state, w], p) 
                        esac

    | STI           ->  case stack of Ref(x):value:rest ->
                          eval( env, [value:rest, state <- [x, value], w], p )
                        esac

    | _ -> failure("%s is not yet implemented\n", insn.string)
    esac
  esac
}
(* End *)

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- compiles list of expressions
fun compileExprList (env, exprs) {
  case foldl (fun ([env, vals], e) {
                case compileExpr(env, e) of
                  [env, val] -> [env, val:vals]
                esac
              },
              [env, {}],
              exprs) of
    [env, vals] -> [env, reverse (vals)]
  esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (env, expr) {

  case expr of
    Skip                ->  [ env, {} ]
  | Var   (str)         ->  [ env, singleton( LD(str) ) ]
  | Const (int)         ->  [ env, singleton( CONST(int) ) ]
  | Read  (x)           ->  [ env, { READ, ST(x) } ]
  | Ref   (x)           ->  [ env, singleton(LDA(x)) ]
  
  | Ignore (exp)        ->  case compileExpr(env, exp) of [env, val] ->
                              [ env, val +++ singleton(DROP) ]
                            esac

  | Write  (exp)        ->  case compileExpr(env, exp) of [env, val] ->
                              [ env, val +++ singleton(WRITE) ]
                            esac

  | Binop  (op, l, r)   ->  case compileExprList(env, {l, r}) of [env, lval:rval:_] ->
                              [ env, lval +++ rval +++ singleton(BINOP(op)) ]
                            esac

  | Assn   (x, ex)      ->  case compileExprList(env, {x, ex}) of [env, ref:val:_] ->
                              [ env, val +++ ref +++ singleton(STI) ]
                            esac

  | Seq    (exp1, exp2) ->  case compileExprList(env, {exp1, exp2}) of [env, e1:e2:_] ->
                              [ env, e1 +++ e2 ]
                            esac

  | If     (c, b1, b2)  ->  case genLabels(env, 2) of [el, exit, env] ->
                              case compileExprList(env, {c, b1, b2}) of [env, cond:br1:br2:_] ->
                                [ env, cond +++ singleton(CJMP("z", el)) +++ br1 +++ {JMP(exit), LABEL(el)} +++ br2 +++ singleton(LABEL(exit)) ]
                              esac
                            esac

  | While  (cond, body) ->  case genLabels(env, 2) of [le, ls, env] ->
                              case compileExprList(env, {cond, body}) of [env, c:b:_] -> 
                                [ env, { JMP(le), LABEL(ls) } +++ b +++ singleton(LABEL(le)) +++ c +++ singleton(CJMP("nz", ls)) ]
                              esac
                            esac

  | Repeat (body, cond) ->  case genLabel(env) of [rep, env] ->
                              case compileExprList(env, {body, cond}) of [env, b:c:_] ->
                                [ env, singleton(LABEL(rep)) +++ b +++ c +++ singleton(CJMP("z", rep)) ]
                              esac
                            esac

  | _ -> failure ("is not yet implemented %s\n", expr.string)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  compileExpr(initCompEnv(), expr)[1]
}
