-- A deep embedding of L0 into Lama
import List;
import Array;
import Fun;
import World;
import Stmt;
import State;
import SM;
-- Embeds expression operands: strings are
-- embedded into identifiers, integer constants --- into
-- constants; non-operand expressions are left intact
fun opnd (x) {
  case x of
    # string -> Var (x)
  | # unboxed -> Const (x)
  | _ -> x
  esac
}
-- Redefinition of standard infix operators
infix + at + (l, r) {Binop ("+", opnd (l), opnd (r))}
infix - at - (l, r) {Binop ("-", opnd (l), opnd (r))}
infix * at * (l, r) {Binop ("*", opnd (l), opnd (r))}
infix / at / (l, r) {Binop ("/", opnd (l), opnd (r))}
infix % at % (l, r) {Binop ("%", opnd (l), opnd (r))}
infix == at == (l, r) {Binop ("==", opnd (l), opnd (r))}
infix != at != (l, r) {Binop ("!=", opnd (l), opnd (r))}
infix < at < (l, r) {Binop ("<", opnd (l), opnd (r))}
infix <= at <= (l, r) {Binop ("<=", opnd (l), opnd (r))}
infix > at > (l, r) {Binop (">", opnd (l), opnd (r))}
infix >= at >= (l, r) {Binop (">=", opnd (l), opnd (r))}
infix && at && (l, r) {Binop ("&&", opnd (l), opnd (r))}
infix !! at !! (l, r) {Binop ("!!", opnd (l), opnd (r))}
-- Embeds "read" construct; x is expected to be a string (not a "Var")
fun read (x) {
  Read (x)
}
-- Embeds "write" construct; note, e is expression, thus it
-- is embedded using "opnd"
fun write (e) {
  Write (opnd (e))
}
-- Embeds assignment operator; x is expected to be string, e is expression, this
-- it is embeeded using "opnd"
infix ::= before := (x, e) {
  Assn (x, opnd (e))
}
-- Embeds sequential composition
infixr >> before ::= (s1, s2) {
  Seq (s1, s2)
}
-- Returns embedded program (thus, the file has to be recompiled as the
-- program changes)
public fun program () {
  read ("x") >>read ("y") >>"z" ::= "x" * "y" * 3 >>write ("z")
}
local input = reverse (fix (fun (f) {fun (acc) {case readLine () of #unboxed -> acc | arg -> f (stringInt (arg) : acc) esac}}) ({}));
iter (fun (x) {printf ("%d\n", x)},
      case sysargs[1] of
-- "-i" -> evalStmt (input, program ())
-- | "-s" -> evalSM (input, compileSM (program ()))
   "-i" -> evalExpr (input, program ())
 | _ -> failure ("Invalid compiler flag\n")
      esac
     )